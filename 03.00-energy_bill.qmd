```{python loadingdata, echo = T, eval = T}
#Load csv files (dfevap, dfhx, dfrecap)
import pandas as pd
import numpy as np
#Load csv files
dfevap = pd.read_csv('dfevap.csv', sep = ',')
dfhx = pd.read_csv('dfhx.csv', sep = ',')
dfrecap = pd.read_csv('dfrecap.csv', sep = ',')
```

```{python evap, echo = T, eval = T}
```
# Exergy analysis and Energy bill

Upon completing the process description and analysis for each section, you will gain insights into the current operational status and energy/exergy efficiency of the dairy factory. This analysis comprises two main components:

- Exergy analysis of both pasteurisation and evaporation section
- Energy bills of the whole dairy factory under different scenarios


## Exergy analysis

In the exergy analysis, it's essential to outline the exergy inputs, exergy outputs, and exergy destruction specifically for the Pasteurization and Evaporation sections. To achieve this, you should provide both the theoretical background of exergy calculation and the step-by-step process of your analysis.

To evaluate the losses and inefficiencies of the dairy production an exergy analysis is carried out. The ambient temperature is assumed to be $T_a = 25°C + 273K = 293K$. 

### Pasteurization

#### Refrigeration

$$
L_{milk-refr} = \dot{m}_{in,m}c_{p,whm}[(T_{in} - T_{mix,o})-T_0\ln(\frac{T_1}{T_2})] \\
L_{gw-refr}  = \dot{m}_{gw,refr}c_{p,gw}[(T_{in,gw} - T_{out,gw})-T_0\ln(\frac{T_{in,gw}}{T_{out,gw}})] \\
L_{refr} = L_{milk-refr} + L_{gw-refr}
$$

#### Past 1, Past 2, Past 5

$$
L_{past1,1}  = \dot{m}_{in,m}c_{p,whm}[(T_{mix,o} - T_{past,cent})-T_0\ln(\frac{T_{mix,o}}{T_{past,cent}})] \\
L_{past1,2}  = \dot{m}_{out,m}c_{p,rm}[(T_{past,c} - T_{past,d})-T_0\ln(\frac{T_{past,c}}{T_{past,d}})] \\
L_{past1} = L_{past1,1} + L_{past1,2}
$$

#### Past 3, Past 6

$$
L_{past3,1}  = \dot{m}_{out,m}c_{p,rm}[(T_{past,a} - T_{past,b})-T_0\ln(\frac{T_{past,a}}{T_{past,b}})] \\
L_{past3,2}  = \dot{m}_{steam,3}[(h_{in,steam}-h_{out,steam})-T_0(s_{in,steam}-s_{out,steam})] \\
L_{past3}  = L_{past3,1} + L_{past3,2}
$$ 

#### Mixer

$$
L_{mixer,1}  = \dot{m}_{cr,o}c_{p,cr}[(T_{crpast,a} - T_{crpast,x})-T_0\ln(\frac{T_{crpast,a}}{T_{crpast,x}})] \\
L_{mixer,2} = \dot{m}_{th}c_{p,alginate}[(T_{th} - T_{crpast,x})-T_0\ln(\frac{T_{th}}{T_{crpast,x}})] \\
L_{mixer} = L_{mixer,1} + L_{mixer,2} 
$$


#### Summary of Pasteurization Exergy Results

```{r compute_pasteurisation_exergy, echo = F, eval = T}



```
### Evaporation 

#### Heat Exchanger

$$\dot{L}_{HX}=\dot{m}_{water}(h_{fg}-T_{a}s_{fg})-Q_{HX}(1-\frac{T_{a}}{T_{c,lm}})$$

#### Heat Evaporator

$$\dot{L}_{evaporator}=\dot{m}_{milk}(h_{milk,in}-h_{milk,out})-\dot{m}_{milk}T_{a}(s_{milk,in}-s_{milk,out})-\dot{m}_{water}Cp_{water}[T_{out}-$$

#### Splitter
There are no exergy losses in the spliiters since they are isenthalpic


#### Total

$$\dot{L}_{evaporation}=\Sigma\dot{L}_{HX}+\Sigma\dot{L}_{evaporator}+\Sigma\dot{L}_{splitter}$$


#### Results Exergy Analysis Evaporation

```{python HX, echo = T, eval = T}

#Heat exchangers

```


Furthermore, we highly encourage the use of a Sankey diagram to succinctly summarize your findings. We have provided an example of how to create an interactive Sankey diagram in R using the Plotly library. You can access the necessary function in the file `./sankey_ipese.R`. The following code chunk demonstrates how to utilize this function:

```{r sankey-function, echo = T, eval = T, warning = F, message=F}
source("./sankey_ipese.R") # introduce the sankey function from the source file
df = read.csv('atom_balance.csv',sep = '\t') # replace the atom_balance.csv with your exergy analysis results
sankey_ipese(df = df, unit = 'kmol/h', title = 'Example of an interactive Sankey diagram') # replace the unit and title here
```

## Energy bill

> **Task Instructions**
>
>In this section, your objective is to transform the energy demand you previously calculated into utility consumption. This transformation involves the following energy vectors:
>
>- Natural gas
>- Electricity
>- Water
>
>To execute this conversion, you must explicitly state the assumptions you make during the process. For example, if you are aware of the refrigeration duty within the factory and understand that the refrigeration system operates on electricity, you will pre-determine the coefficient of performance (COP) for your refrigeration cycle. This assumption will enable you to calculate the actual electricity consumption for your processes.
>
>You can refer to the "Brewery example" in the Suivival Guide for comprehensive guidance and relevant information to facilitate this conversion process.
>
>Once you have established the energy utility demand within the dairy factory, you can proceed to calculate the energy bill. This calculation will be based on assumptions regarding energy prices in different countries or regions.

First, the price of electricity (@noauthor_electricity_nodate) and natural gas (@noauthor_natural_nodate) in France and Germany has to be determined. 

```{python Price Table, echo = T, eval = T}
#print dataframe with the price of electricity and natural gas in France and Germany
import pandas as pd
import numpy as np
from IPython.display import display, HTML

elec_fr = 0.12 # €/kWh
elec_ger = 0.21 # €/kWh
gas_fr = 0.08 # €/kWh
gas_gr = 0.08 # €/kWh

price = pd.DataFrame({'France (€/kWh)':[elec_fr, gas_fr], 'Germany (€/kWh)':[elec_ger, gas_gr]}, index = ['Electricity', 'Natural gas'])
price = price.round(3)
HTML(price.to_html())
```

Now, let list all the assumptions used to computed the energy bill:

- The factory is running 95% of the time (8322 hours per year)
- COP of the refrigeration system is 3.5
- All water is used in closed loop. The cost is not taken into account in OPEX but will be in CAPEX.

|                     |            Heating            |           Cooling           |
|:-------------------:|:-----------------------------:|:---------------------------:|
|    Pasteurization   |        Qpast_3, Qpast_6       | Qpast_ref, Qpast_4, Qpast_5 |
|     Evaporation     |           Qevap_st1           |           Qevap_5           |
|        Dryer        |       Qdry_hx1, Qdry_hx2      |          Qdry_cool          |
|       Cleaning      |          Qclean_heat          |         Qclean_cool         |
| Storage & hot water |           Qhot_water          |          Q_storage          |
|       Rivella       |         Qrivella_heat         |                             |
|       Digester      | Qdigester_dq, Qdigester_steam |                             |

The electricity consumption for cooling is computed as follow:

$$
Elec(kW)= Q(kW) / COP
$${#eq-cool_elec}

The OPEX cost is computed as follow:

$$
OPEX(M€/y)= Q(kW) \cdot t_{\text{op}} (h/y) \cdot price(€/kWh) \cdot 10^{-6} (M€/€)
$${#eq-opex}

```{python Energy Bill, echo = T, eval = T}
top = 24*0.95*365 #h/year

#Pasterization
Qpast_ref = 60416 #W    
Qpast_4 = 3863424 #W  #A changer 
Qpast_5 = 16344 #W    #A changer
Qpast_3 = 285.76 #W   #A changer
Qpast_6 = 16643 #W    #A changer

Qpast_cool = Qpast_ref + Qpast_4 + Qpast_5
Qpast_heat = Qpast_3 + Qpast_6 

#Evap
Qevap_5 = 55703.14  #W
Qevap_st1 = 98038.87 #W
Qevap_cool = Qevap_5
Qevap_heat = Qevap_st1

#Dryer
Qdry_cool = 15299.94 #W
Qdry_hx1 =  112.16 #W
Qdry_hx2 =  1967.71#W
Qdry_cool = Qdry_cool
Qdry_heat = Qdry_hx1 + Qdry_hx2 

#Cleaning
Qclean_cool = 225940 #W
Qclean_heat = 334710 #W

#Storage & hot water
Q_storage = 500000  #W
Qhot_water = 167253.2 #W

#Rivella
Qrivella_heat =  579418.2 #W

#Digester
Qdigester_dq1 = 28754.1 #W
Qdigester_steam = 107608.5 #W
Qdigester_heat = Qdigester_dq1 + Qdigester_steam

#Cool cost
COP = 3.5 # assumption
Qcool_tot = (Qpast_cool + Qevap_cool + Qdry_cool + Qclean_cool + Q_storage)/COP
OPEXcool_fr = Qcool_tot*0.001 * elec_fr * top
OPEXcool_ger = Qcool_tot*0.001 * elec_ger *top

#Heat cost
Qheat_tot = Qpast_heat + Qevap_heat + Qdry_heat + Qclean_heat + Qhot_water + Qrivella_heat + Qdigester_heat
OPEXheat_fr = Qheat_tot*0.001 * gas_fr * top
OPEXheat_ger = Qheat_tot*0.001 * gas_gr * top

#print in a dataframe the OPEX line: cooling, heating and total and column: France, Germany
OPEX = pd.DataFrame({'France (M€/y)':[OPEXcool_fr/1e6, OPEXheat_fr/1e6, OPEXcool_fr/1e6 + OPEXheat_fr/1e6], 'Germany (M€/y)':[OPEXcool_ger/1e6, OPEXheat_ger/1e6, OPEXcool_ger/1e6 + OPEXheat_ger/1e6]}, index = ['Cooling', 'Heating', 'Total'])
OPEX = OPEX.round(3)
HTML(OPEX.to_html())
```
