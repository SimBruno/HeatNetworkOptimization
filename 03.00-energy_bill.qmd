

```{python evap, echo = T, eval = T}
```
# Exergy analysis and Energy bill

## Exergy analysis

To evaluate the losses and inefficiencies in the dairy production, an exergy analysis is performed. An exergy loss is the difference between the exergy entering a unit and the exergy leaving the unit. This exergy analysis includes calculating heat losses for each component experiencing heat transfer, covering both pasteurization and evaporation processes. The ambient temperature is set at $T_a = 25Â°C + 273K = 293K$.

### Pasteurization

#### Refrigeration

$$
L_{milk\_ref} = \dot{m}_{f\_milk}c_{p_{f\_milk}}\left((T_{f\_milk} - T_{mixure\_out}) - T_a \ln\left(\frac{T_{f\_milk}}{T_{mixure\_out}}\right)\right)
$$
$$
L_{gly\_ref} = \dot{m}_{gly\_ref}c_{p_{glywater}}\left((T_{f\_milk} - T_{mixure\_out}) - T_a \ln\left(\frac{T_{f\_milk}}{T_{mixure\_out}}\right)\right)
$$
$$
L_{ref} = L_{milk\_ref} + L_{gly\_ref}
$$

#### Past 1
$$
L_{past1\_1} = \dot{m}_{f\_milk}c_{p_{f\_milk}}\left((T_{mixure\_out} - T_{past\_cent}) - T_a \ln\left(\frac{T_{mixure\_out}}{T_{past\_cent}}\right)\right)
$$
$$
L_{past1\_2} = \dot{m}_{milk}c_{p_{raw\_milk}}\left((T_{past\_c} - T_{past\_d}) - T_a \ln\left(\frac{T_{past\_c}}{T_{past\_d}}\right)\right)
$$
$$
L_{past1} = L_{past1\_1} + L_{past1\_2}
$$

#### Past 2
$$
L_{past2\_1} = \dot{m}_{milk}c_{p_{raw\_milk}}\left((T_{milk\_0} - T_{past\_a}) - T_a \ln\left(\frac{T_{milk\_0}}{T_{past\_a}}\right)\right)
$$
$$
L_{past2\_2} = \dot{m}_{milk}c_{p_{raw\_milk}}\left((T_{past\_b} - T_{past\_c}) - T_a \ln\left(\frac{T_{past\_b}}{T_{past\_c}}\right)\right)
$$
$$
L_{past2} = L_{past2\_1} + L_{past2\_2}
$$

#### Past 3
$$
L_{past3\_1} = \dot{m}_{milk}c_{p_{raw\_milk}}\left((T_{past\_a} - T_{past\_b}) - T_a \ln\left(\frac{T_{past\_a}}{T_{past\_b}}\right)\right)
$$

$$
L_{past3\_2} = \dot{m}_{steam\_past3}c_{p_{steam}} \Delta h_3 - T_a \Delta s_3
$$
$$
L_{past3} = L_{past3\_1} + L_{past3\_2}
$$

#### Past 4

$$
L_{past4\_1} = \dot{m}_{milk}c_{p_{raw\_milk}}\left((T_{past\_d} - T_{milk}) - T_a \ln\left(\frac{T_{past\_d}}{T_{milk}}\right)\right)
$$
$$
L_{gly\_past4} = \dot{m}_{gly\_past4}c_{p_{glywater}}\left((T_{past\_d} - T_{milk}) - T_a \ln\left(\frac{T_{past\_d}}{T_{milk}}\right) \right)
$$
$$
L_{past4} = L_{past4\_1} + L_{gly\_past4}
$$

#### Past 5
$$
L_{past5\_1} = \dot{m}_{int}c_{p_{cream}}\left((T_{cream} - T_{crpast\_a}) - T_a \ln\left(\frac{T_{cream}}{T_{crpast\_a}}\right)\right)
$$
$$
L_{past5\_2} = \dot{m}_{cream}c_{p_{cream}}\left((T_{crpast\_b} - T_{crpast\_c}) - T_a \ln\left(\frac{T_{crpast\_b}}{T_{crpast\_c}}\right)\right)
$$
$$
L_{past5} = L_{past5\_1} + L_{past5\_2}
$$

#### Past 6
$$
L_{past6\_1} = \dot{m}_{cream}c_{p_{cream\_mixed}}\left((T_{crpast\_x} - T_{crpast\_b}) - T_a \ln\left(\frac{T_{crpast\_x}}{T_{crpast\_b}}\right)\right)
$$
$$
L_{past6\_2} = \dot{m}_{steam\_past6}c_{p_{steam}} \Delta h_6 - T_a \Delta s_6
$$
$$
L_{past6} = L_{past6\_1} + L_{past6\_2}
$$

#### Past 7

$$
L_{past7\_1} = \dot{m}_{cream}c_{p_{cream}}\left((T_{crpast\_c} - T_{cream}) - T_a \ln\left(\frac{T_{crpast\_c}}{T_{cream}}\right)\right)
$$
$$
L_{gy\_past7} = \dot{m}_{gly\_past7}c_{p_{glywater}}\left((T_{crpast\_c} - T_{cream}) - T_a \ln\left(\frac{T_{crpast\_c}}{T_{cream}}\right)\right)
$$
$$
L_{past7} = L_{past7\_1} + L_{gy\_past7}
$$

#### Mixer

$$
L_{mixer\_1} = \dot{m}_{cream}c_{p_{cream}}\left((T_{crpast\_a} - T_{crpast\_x}) - T_a \ln\left(\frac{T_{crpast\_a}}{T_{crpast\_x}}\right)\right)
$$
$$
L_{mixer\_2} = \dot{m}_{thick}c_{p_{alboline}}\left((T_{thick} - T_{crpast\_x}) - T_a \ln\left(\frac{T_{thick}}{T_{crpast\_x}}\right)\right)
$$
$$
L_{mixer} = L_{mixer\_1} + L_{mixer\_2}
$$

#### Total
$$
L_{tot\_past} = L_{ref} + L_{past1} + L_{past2} + L_{past3} + L_{past4} + L_{past5} + L_{past6} + L_{past7} + L_{mixer}
$$

#### Summary of Pasteurization Exergy Results

```{r path}
#path <- file.path('./venv/Scripts/python.exe')
#library(reticulate)
#use_python(path)

```

```{python compute_pasteurisation, echo = T, eval = T}

#import math
import pandas as pd
import numpy as np
from IPython.display import display, HTML

df = pd.read_csv('pasteurization_process.csv',sep = ';')

for i in range(0,len(df.index)):
    globals()[df.iloc[i][1]] = df.iloc[i][2]

Delta_T_Gly=5
Ta=298

#Refrigeration
L_milk_ref=m_fmilk*Cp_fmilk*((T_fmilk-T_mixure_out)-T_a*np.log(T_fmilk/T_mixure_out))

L_gy_ref=m_gly_ref*Cp_glywater*((Delta_T_Gly)-T_a*np.log(T_fmilk/T_mixure_out))#glywater temperature

L_ref=L_milk_ref+L_gy_ref


#Past 1

L_past1_1=m_fmilk*Cp_fmilk*((T_mixure_out-T_past_cent)-T_a*np.log(T_mixure_out/T_past_cent))
L_past1_2=m_milk*Cp_raw_milk*((T_past_c-T_past_d)-T_a*np.log(T_past_c/T_past_d) )

L_past1=L_past1_1+L_past1_2

#Past 2

L_past2_1=m_milk*Cp_raw_milk*((T_past_a-T_milk_0)-T_a*np.log(T_past_a/T_milk_0))  
L_past2_2=m_milk*Cp_raw_milk*((T_past_c-T_past_b)-T_a*np.log(T_past_c/T_past_b)) 

L_past2_1=m_milk*Cp_raw_milk*((T_milk_0-T_past_a)-T_a*np.log(T_milk_0/T_past_a))  
L_past2_2=m_milk*Cp_raw_milk*((T_past_b-T_past_c)-T_a*np.log(T_past_b/T_past_c)) 

L_past2=L_past2_1+L_past2_2


#Past 3

L_past3_1=m_milk*Cp_raw_milk*((T_past_b-T_past_a)-T_a*np.log(T_past_b/T_past_a))

L_past3_2=m_steam_past3*(delta_h_steam-T_a*delta_s_steam)

L_past3=L_past3_1#L_past3_2-


#Past 4

L_past4_1=m_milk*Cp_raw_milk*((T_milk-T_past_d)-T_a*np.log(T_milk/T_past_d))

L_gy_past4=m_gly_past4*Cp_glywater*((T_milk-T_past_d)-T_a*np.log(T_milk/T_past_d))#glywater temperature

L_past4=L_past4_1+L_gy_past4


#Past 5
L_past5_1=m_int*Cp_cream*((T_crpast_a-T_cream)-T_a*np.log(T_crpast_a/T_cream))
L_past5_2=m_cream*Cp_cream*((T_crpast_c-T_crpast_b)-T_a*np.log(T_crpast_c/T_crpast_b))

L_past5=L_past5_1+L_past5_2


#Past 6
L_past6_1=m_cream*Cp_cream_mixed*((T_crpast_x-T_crpast_b)-T_a*np.log(T_crpast_x/T_crpast_b))
L_past6_2=m_steam_past6*(delta_h_steam-Ta*delta_s_steam)

L_past6=L_past6_1+L_past6_2


#Past 7

L_past7_1=m_cream*Cp_cream*((T_crpast_c-T_cream)-T_a*np.log(T_crpast_c/T_cream))

L_gy_past7=m_gly_past7*Cp_glywater*((T_crpast_c-T_cream)-T_a*np.log(T_crpast_c/T_cream))#glywater temperature

L_past7=L_past7_1+L_gy_past7


#Mixer

L_mixer_1=m_cream*Cp_cream*((T_crpast_a-T_crpast_x)-T_a*np.log(T_crpast_a/T_crpast_x))
L_mixer_2=m_thick*Cp_alboline*((T_crpast_x-T_thick)-T_a*np.log(T_crpast_x/T_thick))

L_mixer=L_mixer_1+L_mixer_2


#Total exergy pasteurisation section

L_tot_past= L_ref+L_past1+L_past2+L_past3+L_past4+L_past5+L_past6+L_past7+L_mixer

#Calculations for Sankey Diagram

L_steam_in=m_steam_past3*(2880000-480*7343)
L_steam_out=m_steam_past3*(461000-383*1.418)
L_fresh_milk=m_fmilk*Cp_fmilk*((T_mixure_out-T_past_cent)-T_a*np.log(T_mixure_out/T_past_cent))


# Dataframe for Exergy Loss Pasteurization

Exergy_losses  = 'kW'

Variables_Names = ['L_Refrigeration','L_Past1','L_Past2','L_Past3','L_Past4','L_Past5','L_Past6','L_Past7','L_mixer','L_tot_past']
Variables_Values = np.divide([L_ref,L_past1,L_past2,L_past3,L_past4,L_past5,L_past6,L_past7,L_mixer,L_tot_past],1000)
Variables_Units =  Exergy_losses
df = pd.DataFrame(data = {'Exergy loss': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})
display(df)
HTML(df.to_html(index=False))

```



### Evaporation 

#### Heat Exchanger
$$
L_{heat1} = m_{11}(h_{11} - T_a s_{11}) - m_{12}(h_{12} - T_a s_{12}) + m_1(h_1 - T_a s_1) - m_2(h_2 - T_a s_2)
$$
$$
L_{heat2} = -m_2(h_2 - T_a s_2) + m_3(h_3 - T_a s_3) - m_{16}(h_{16} - T_a s_{16})
$$
$$
L_{heat3} = -m_3(h_3 - T_a s_3) + m_4(h_4 - T_a s_4) - m_{20}(h_{20} - T_a s_{20})
$$
$$
L_{heat4} = -m_4(h_4 - T_a s_4) + m_5(h_5 - T_a s_5) + m_{15}(h_{15} - T_a s_{15})
$$


#### Heat Evaporator
$$
L_{eva1} = -m_6(h_6 - T_a s_6) + m_7(h_7 - T_a s_7) + m_{14}(h_{14} - T_a s_{14}) - m_{21}(h_{21} - T_a s_{21})
$$
$$
L_{eva2} = -m_8(h_8 - T_a s_8) - m_{17}(h_{17} - T_a s_{17}) + m_{15}(h_{15} - T_a s_{15}) + m_9(h_9 - T_a s_9)
$$
$$
L_{eva3} = -m_{10}(h_{10} - T_a s_{10}) + m_{18}(h_{18} - T_a s_{18}) + m_{16}(h_{16} - T_a s_{16}) + m_{11}(h_{11} - T_a s_{11})
$$

#### Splitter
There are no exergy losses in the splitters since they are isenthalpic


#### Total

$$
\dot{L}_{evaporation}=\Sigma\dot{L}_{HX}+\Sigma\dot{L}_{evaporator}+\Sigma\dot{L}_{splitter}
$$


#### Results Exergy Analysis Evaporation

```{python HX, echo = T, eval = T}

#Exergy Evaporation

#import math
import pandas as pd
import numpy as np
from IPython.display import display, HTML

dfrecap = pd.read_csv('dfrecap.csv', sep = ',')

for i in range(0,len(dfrecap.index)):
    globals()['m'+str(i+1)] = dfrecap['Mass flow (kg/s)'].iloc[i]
    globals()['h'+str(i+1)] = dfrecap['Enthalpy (J/mol)'].iloc[i]
    globals()['s'+str(i+1)] = dfrecap['Entropy (J/K)'].iloc[i]


#Exergy for heat exchangers

Ta=298

L_heat1 = m11*(h11-Ta*s11)-m12*(h12-Ta*s12)+m1*(h1-Ta*s1)-m2*(h2-Ta*s2)

L_heat2= -m2*(h2-Ta*s2)+m3*(h3-Ta*s3)-m16*(h16-Ta*s16)


L_heat3=-m3*(h3-Ta*s3)+m4*(h4-Ta*s4)-m20*(h20-Ta*s20)


L_heat4=-m4*(h4-Ta*s4)+m5*(h5-Ta*s5)+m15*(h15-Ta*s15)


#Exergy for evaporators

L_eva1=-m6*(h6-Ta*s6)+m7*(h7-Ta*s7)+m14*(h14-Ta*s14)-m21*(h21-Ta*s21)


L_eva2=-m8*(h8-Ta*s8)-m17*(h17-Ta*s17)+m15*(h15-Ta*s15)+m9*(h9-Ta*s9)


L_eva3=-m10*(h10-Ta*s10)+m18*(h18-Ta*s18)+m16*(h16-Ta*s16)+m11*(h11-Ta*s11)


#Total exergy evaporation section

L_tot_eva= L_heat1+L_heat2+L_heat3+L_heat4+L_eva1+L_eva2+L_eva3


# Dataframe for Exergy Loss Evaporation

Exergy_losses  = 'kW'

Variables_Names = ['L_heat1','L_heat2','L_heat3','L_heat4','L_eva1','L_eva2','L_eva3','L_tot_eva']
Variables_Values = np.divide([L_heat1,L_heat2,L_heat3,L_heat4,L_eva1,L_eva2,L_eva3,L_tot_eva],1000)
Variables_Units =  Exergy_losses
df_2 = pd.DataFrame(data = {'Exergy loss': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})

display(df_2)
display(HTML(df_2.to_html(index=False)))
```

### Suggested modifications

From the previous calculations, one can see that the total exergy lost to the environment from the pasteurization and evaporation processes is more than 1700 kW. This value indicates that the inefficiencies in both processes are very large. For the pasteurization process, the exergy loss is especially significant in Past 3, as steam enters and leaves the system. In the evaporation part, the exergy loss is particularly high in Evaporator 1 and Evaporator 2.

To decrease the overall exergy losses in the system, different strategies can be implemented. Since the exergy efficiencies are so large the best option is to improve the general energy efficiency by upgrading to more energy-efficient equipment and using insulation.

```{r sankey-function, echo = T, eval = T, warning = F, message=F}
source("./sankey_ipese.R") # introduce the sankey function from the source file
df = read.csv('atom_balance.csv',sep = '\t') # replace the atom_balance.csv with your exergy analysis results
sankey_ipese(df = df, unit = 'kmol/h', title = 'Example of an interactive Sankey diagram') # replace the unit and title here
```




## Energy bill

```{python Price Table, echo = T, eval = T}
#print dataframe with the price of electricity and natural gas in France and Germany
import pandas as pd
import numpy as np
from IPython.display import display, HTML

elec_fr = 0.12 # â¬/kWh
elec_ger = 0.21 # â¬/kWh
gas_fr = 0.08 # â¬/kWh
gas_gr = 0.08 # â¬/kWh

price = pd.DataFrame({'France (â¬/kWh)':[elec_fr, gas_fr], 'Germany (â¬/kWh)':[elec_ger, gas_gr]}, index = ['Electricity', 'Natural gas'])
price = price.round(3)
HTML(price.to_html())
```

Now, let list all the assumptions used to computed the energy bill:

- The factory is running 95% of the time (8322 hours per year)
- COP of the refrigeration system is 3.5
- All water is used in closed loop. The cost is not taken into account in OPEX but will be in CAPEX.

|                     |            Heating            |           Cooling           |
|:-------------------:|:-----------------------------:|:---------------------------:|
|    Pasteurization   |        Qpast_3, Qpast_6       | Qpast_ref, Qpast_4, Qpast_7 |
|     Evaporation     |           Qevap_st1           |           Qevap_5           |
|        Dryer        |       Qdry_hx1, Qdry_hx2      |          Qdry_cool          |
|       Cleaning      |          Qclean_heat          |         Qclean_cool         |
| Storage & hot water |           Qhot_water          |          Q_storage          |
|       Rivella       |         Qrivella_heat         |                             |
|       Digester      | Qdigester_dq, Qdigester_steam |                             |

The electricity consumption for cooling is computed as follow:

$$
Elec(kW)= Q(kW) / COP
$${#eq-cool_elec}

The OPEX cost is computed as follow:

$$
OPEX(Mâ¬/y)= Q(kW) \cdot t_{\text{op}} (h/y) \cdot price(â¬/kWh) \cdot 10^{-6} (Mâ¬/â¬)
$${#eq-opex}

```{python Energy Bill, echo = T, eval = T}
top = 24*0.95*365 #h/year

#Pasterization
Qpast_ref = 60416 #W    
Qpast_4 = 194370 #W  
Qpast_7 = 127000 #W    
Qpast_3 = 285760 #W   
Qpast_6 = 35610 #W    

Qpast_cool = Qpast_ref + Qpast_4 + Qpast_7
Qpast_heat = Qpast_3 + Qpast_6 

#Evap
Qevap_5 = 55703.14  #W
Qevap_st1 = 98038.87 #W
Qevap_cool = Qevap_5
Qevap_heat = Qevap_st1

#Dryer
Qdry_cool = 15299.94 #W
Qdry_hx1 =  112.16 #W
Qdry_hx2 =  1967.71#W
Qdry_cool = Qdry_cool
Qdry_heat = Qdry_hx1 + Qdry_hx2 

#Cleaning
Qclean_cool = 225940 #W
Qclean_heat = 334710 #W

#Storage & hot water
Q_storage = 500000  #W
Qhot_water = 167253.2 #W

#Rivella
Qrivella_heat =  579418.2 #W

#Digester
Qdigester_dq1 = 28754.1 #W
Qdigester_steam = 107608.5 #W
Qdigester_heat = Qdigester_dq1 + Qdigester_steam

#Cool cost
COP = 3.5 # assumption
Qcool_tot = (Qpast_cool + Qevap_cool + Qdry_cool + Qclean_cool + Q_storage)/COP
OPEXcool_fr = Qcool_tot*0.001 * elec_fr * top
OPEXcool_ger = Qcool_tot*0.001 * elec_ger *top

#Heat cost
Qheat_tot = Qpast_heat + Qevap_heat + Qdry_heat + Qclean_heat + Qhot_water + Qrivella_heat + Qdigester_heat
OPEXheat_fr = Qheat_tot*0.001 * gas_fr * top
OPEXheat_ger = Qheat_tot*0.001 * gas_gr * top

#print in a dataframe the OPEX line: cooling, heating and total and column: France, Germany
OPEX = pd.DataFrame({'France (Mâ¬/y)':[OPEXcool_fr/1e6, OPEXheat_fr/1e6, OPEXcool_fr/1e6 + OPEXheat_fr/1e6], 'Germany (Mâ¬/y)':[OPEXcool_ger/1e6, OPEXheat_ger/1e6, OPEXcool_ger/1e6 + OPEXheat_ger/1e6]}, index = ['Cooling', 'Heating', 'Total'])
OPEX = OPEX.round(3)
HTML(OPEX.to_html())


#OPEX_past_5_fr = Qpast_6*0.001 * gas_fr * top + (Qpast_7/COP)*0.001 * elec_fr * top
#OPEX_past_5_ger = Qpast_6*0.001 * gas_gr * top + (Qpast_7/COP)*0.001 * elec_ger * top
#print('OPEX_past_5_fr', OPEX_past_5_fr)
#print('OPEX_past_5_ger', OPEX_past_5_ger)

#OPEX_past1_5_fr = (Qpast_6+Qpast_3)*0.001 * gas_fr * top + ((Qpast_7+Qpast_4)/COP)*0.001 * elec_fr * top
#OPEX_past1_5_ger = (Qpast_6+Qpast_3)*0.001 * gas_gr * top + ((Qpast_7+Qpast_4)/COP)*0.001 * elec_ger * top
#print('OPEX_past1_5_fr', OPEX_past1_5_fr)
#print('OPEX_past1_5_ger', OPEX_past1_5_ger)

#OPEX_CIP_fr = (Qclean_heat)*0.001 * gas_fr * top + ((Qclean_cool)/COP)*0.001 * elec_fr * top
#OPEX_CIP_ger = (Qclean_heat)*0.001 * gas_gr * top + ((Qclean_cool)/COP)*0.001 * elec_ger * top
#print('OPEX_CIP_fr', OPEX_CIP_fr)
#print('OPEX_CIP_ger', OPEX_CIP_ger)
```
