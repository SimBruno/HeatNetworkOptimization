{
  "hash": "165d4473a6293094270c1ce341d47890",
  "result": {
    "markdown": "# Process description and analysis\n\n> **Task Instructions**\n>\n>To provide practical solutions to our industrial partner, the dairy factory, our first task is to show that we truly grasp the problem. To a business manager, industrial processes may seem mysterious and complex, like \"black boxes.\" However, as engineers, we need to dig into the details, using mathematics and physics to analyze and design these industrial processes.\n>\n>In this section, the task is to compute the thermodynamic properties of all the streams within each section of the dairy factory. The data collected here will be instrumental in calculating exergy efficiency and energy bills in the following section. \n\n## Pasteurisation\n\n![Pasteurisation](Figures/pasteurisation.svg)\n\nIn this section the mass and energy balances for each chemical operation of the milk pasteurisation are computed. The pasteurisation aims to produce cream and milk from fresh milk with the intergation of a thickener.\n\n\n### Mass Flows \n\nBecause of the mass flow conservation, we have:\n\n\n$$\n\\begin{cases}\n    \\dot m_{Mixure~out} = \\dot m_{Past{\\_}Cent}=\\dot m_{Fresh~Milk}=8~kg/s \\\\\n    \\dot m_{Milk{\\_}0} = \\dot m_{Past{\\_}a} = \\dot m_{Past{\\_}b} = \\dot m_{Past{\\_}c} =  \\dot m_{Past{\\_}d} = \\dot m_{Milk} = 7.52~kg/s \\\\\n    \\dot m_{cream{\\_}0} = \\dot m_{crpast{\\_}a} = \\dot m_{Past{\\_}cent} - \\dot m_{Milk{\\_}0} =  \\dot m_{Fresh~Milk} - \\dot m_{Milk} = 8 - 7.52 = 0.48~kg/s \\\\\n    \\dot m_{crpast{\\_}x} = \\dot m_{crpast{\\_}b} = \\dot m_{crpast{\\_}c} = \\dot m_{Cream} =  0.55~kg/s \\\\\n    \\dot m_{thickener} = 0.07~kg/s \n\\end{cases}\n$$\n\n\nConsequently, all mass flows are defined.\n\n### Heat Capacities\n\nThe following heat capacities are already provided :\n\n- $c_{p,Raw~Milk} = 3.8 kJ/(kgK)$ (milk after centrifuge)\n\n- $c_{p,Cream~ac} = 3.4 kJ/(kgK)$ (cream after centrifuge)\n\nFrom Litterature @NAGHAVI201864 we chose:\n\n- $c_{p,thickener} = c_{p,alginate} = 4.175 kJ/(kg.K)$ \n\nAssuming that the mixer provides an ideal mix, we have:\n\n$$\n\\begin{align*}\n    c_{p,cream} &= \\frac{\\dot m_{cream{\\_}0}}{\\dot m_{Cream}} \\cdot c_{p,Cream~ac} + \\frac{\\dot m_{thickener}}{\\dot m_{Cream}} \\cdot c_{p,thickener} \\\\\n    \\\\\n    c_{p,cream} &= \\frac{0.48}{0.55} \\cdot 3400 + \\frac{0.07}{0.55} \\cdot 4175\n\\end{align*}\n$$ \n\nWe also consider the centrifuge separes an ideal mix, therefore:\n\n$$\n\\begin{align*}\n    c_{p,fresh{\\_}milk} &= \\frac{\\dot m_{cream{\\_}0}}{\\dot m_{fresh{\\_}milk}} \\cdot c_{p,Cream~ac} + \\frac{\\dot m_{Milk{\\_}0} }{\\dot m_{fresh{\\_}milk}} \\cdot c_{p,raw{\\_}milk} \\\\\n    \\\\\n    c_{p,fresh{\\_}milk} &= \\frac{0.48}{8} \\cdot 3400 + \\frac{7.52}{8} \\cdot 3800\n\\end{align*}\n$$\n\nFinally:\n\n- $c_{p,cream} = 3.5~kJ/(kgK)$\n- $c_{p,fresh_milk} = 3.78~kJ/(kgK)$\n\n### Equations of operations \n\nIn this subsection the heat flow equations for each element of the pasteurisation are indicated. All variables are defined on the pasteurization scheme or in the mass flow and heat capacities sections. The $\\Delta T = 5K$ is applied on Past 2, between Milk_0 and Past_a and on Past 5, between crpast_c and cream. Regarding the glycolic water and the steam, the same temperatures and heat capacities as the one in the beer pasteurization process are used, and it is assumed the exact cooling or the heating are controlled by the mass flow of these elements. \n\n#### Refrigeration\n\n$$\n\\begin{align*}\n    \\dot Q_{refrigeration} &= \\dot m_{Fresh~Milk} \\cdot c_{p,Fresh~Milk} \\cdot (T_{Fresh~Milk} - T_{Mixure{\\_}out}) \\\\\n    &= \\dot m_{gliwater{\\_}ref} \\cdot c_{p,gliwater} \\cdot (T_{Gliwater{\\_}out,ref} - T_{Gliwater{\\_}in,ref})\n\\end{align*}\n$${#eq-past_refrigeration}\n\n#### PAST1\n\n$$\n\\begin{align*}\n    \\dot Q_{past1} &= \\dot m_{Fresh~Milk} \\cdot c_{p,Fresh~Milk} \\cdot (T_{Past{\\_}cent} - T_{Mixure{\\_}out}) \\\\\n    &= \\dot m_{Milk} \\cdot c_{p,Raw~Milk} \\cdot (T_{Past{\\_}c} - T_{Past{\\_}d})\n\\end{align*}\n$${#eq-past_past1}\n\n#### PAST2\n\n$$\n\\begin{align*}\n    \\dot Q_{past2} &= \\dot m_{Milk} \\cdot c_{p,Raw~Milk} \\cdot (T_{Past{\\_}a} - T_{Milk{\\_}0}) \\\\\n    &= \\dot m_{Milk} \\cdot c_{p,Raw~Milk} \\cdot (T_{Past{\\_}b} - T_{Past{\\_}c})\n\\end{align*}\n$${#eq-past_past2}\n\n#### CENTRIFUGE\n\n$$\n\\begin{align*}\n    T_{Past{\\_}cent} = T_{Milk{\\_}0} = T_{cream{\\_}0} ~~~~~~(isothermal~mix)\n\\end{align*}\n$${#eq-past_centrifuge}\n\n#### PAST3\n\n$$\n\\begin{align*}\n    \\dot Q_{past3} &= \\dot m_{Milk} \\cdot c_{p,Raw~Milk} \\cdot (T_{Milk{\\_}b} - T_{Past{\\_}a}) \\\\\n    &= \\dot m_{steam{\\_}p2} \\cdot c_{p,steam} \\cdot (T_{Steam{\\_}in,p3} - T_{Steam{\\_}out,p3})\n\\end{align*}\n$${#eq-past_past3}\n\n#### PAST4\n\n$$\n\\begin{align*}\n    \\dot Q_{past4} &= \\dot m_{Milk} \\cdot c_{p,Raw~Milk} \\cdot (T_{past{\\_}d} - T_{Milk}) \\\\\n    &= \\dot m_{gliwater{\\_}p4} \\cdot c_{p,gliwater} \\cdot (T_{Gliwater{\\_}out,p4} - T_{Gliwater{\\_}in,p4})\n\\end{align*}\n$${#eq-past_past4}\n\n\n#### PAST5\n\n$$\n\\begin{align*}\n    \\dot Q_{past5} &= \\dot m_{Intern} \\cdot c_{p,Cream~ac} \\cdot (T_{crpast{\\_}a} - T_{cream{\\_}0}) \\\\\n    &= \\dot m_{Cream} \\cdot c_{p,Cream} \\cdot (T_{crpast{\\_}b} - T_{crpast{\\_}c})\n\\end{align*}\n$${#eq-past_past5}\n\n#### MIXER\n\n$$\n\\begin{align*}\n    \\dot m_{thickener} \\cdot c_{p,thickener} \\cdot (T_{crpast{\\_}x} - T_{thickener})\n    = \\dot m_{intern} \\cdot c_{p,Cream~ac} \\cdot (T_{crpast{\\_}a} - T_{thickener}) \\\\\n\\end{align*}\n$${#eq-past_mixer}\n\n#### PAST6\n\n$$\n\\begin{align*}\n    \\dot Q_{past6} &= \\dot m_{Cream} \\cdot c_{p,Cream} \\cdot (T_{crpast{\\_}b} - T_{crpast{\\_}x}) \\\\\n    &= \\dot m_{steam{\\_}p6} \\cdot c_{p,steam} \\cdot (T_{Steam{\\_}in,p6} - T_{Steam{\\_}out,p6})\n\\end{align*}\n$${#eq-past_past6}\n\n#### PAST7\n\n$$\n\\begin{align*}\n    \\dot Q_{past7} &= \\dot m_{Cream} \\cdot c_{p,Cream} \\cdot (T_{crpast{\\_}c} - T_{Cream}) \\\\\n    &= \\dot m_{gliwater{\\_}p7} \\cdot c_{p,gliwater} \\cdot (T_{Gliwater{\\_}out,p7} - T_{Gliwater{\\_}in,p7})\n\\end{align*}\n$${#eq-past_past7}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\nfrom IPython.display import display, HTML\nfrom codes_01_energy_bill.pasteurisation_functions import heat_exchanger_Q\n\n# Mass flows(kg/s)\n\nm_fmilk = 8\nm_milk = 7.52\nm_cream = 0.55\nm_int = m_fmilk - m_milk\nm_thick = 0.07\n\n# Heat capacities (J/(kg.K))\n\nCp_alboline = 4175\nCp_raw_milk = 3800 # Has been computed with mix\nCp_cream = 3400\nCp_glywater = 3900 #(Beer pasteurization exercise)\nCp_steam = 1996 #(Internet)\nCp_fmilk = (m_int/m_fmilk)*Cp_cream + (m_milk/m_fmilk)*Cp_raw_milk\nCp_cream_mixed = (m_int/m_cream)*Cp_cream + (m_thick/m_cream)*Cp_alboline\n\n\n# Temperatures (K)\n\nT_a=25+273.15\nT_fmilk = 6+273.15\nT_mixure_out = 4+273.15\nT_past_cent = 60+273.15\nT_milk_0 = T_past_cent\nT_cream_0 = T_past_cent\nT_past_b = 75+273.15\nT_milk = 4+273.15\nT_thick = 4+273.15\nT_crpast_b = 75+273.15\nT_cream = 4+273.15\n\nT_glywater_in = -5 + 273.15\nT_glywater_out = -1 + 273.15\nT_steam_in = 207.336 + 273.15\nT_steam_out = 110 + 273.15\n\n\n# T_past_a, computed later\n# T_past_c, computed later\n# T_past_d, computed later\n# T_crpast_a, computed later\n# T_crpast_x, computed later\n# T_crpast_c, computed later\n\n# Temperatures computation\n\nT_past_c = -5 + T_past_b\nT_past_a = T_past_b - T_past_c + T_milk_0 \nT_past_d = - (( m_fmilk / m_milk ) * ( Cp_fmilk / Cp_raw_milk ) * (T_past_cent- T_mixure_out)) + T_past_c\nT_crpast_a = (( m_cream / m_int ) * ( Cp_cream_mixed / Cp_cream ) * 5) + T_cream_0\nT_crpast_c = (( m_int / m_cream ) * ( Cp_cream / Cp_cream_mixed ) * (-T_crpast_a + T_cream_0)) + T_crpast_b\nT_crpast_x = ((Cp_alboline*m_thick)*T_thick + (Cp_cream*m_int)*T_crpast_a) / ((Cp_alboline*m_thick)+(Cp_cream*m_int))\n\n# Heat flows computation\n\nQ_refrigeration = heat_exchanger_Q(T_fmilk,T_mixure_out,m_fmilk,Cp_fmilk)\nQ_past1 = heat_exchanger_Q(T_past_cent,T_mixure_out,m_fmilk,Cp_fmilk) \nQ_past2 = heat_exchanger_Q(T_past_a,T_milk_0,m_milk,Cp_raw_milk)\nQ_past3 = heat_exchanger_Q(T_past_a,T_past_b,m_milk,Cp_raw_milk)\nQ_past4 = heat_exchanger_Q(T_past_d,T_milk,m_milk,Cp_raw_milk)\nQ_past5 = heat_exchanger_Q(T_crpast_a,T_crpast_b,m_cream,Cp_cream_mixed)\nQ_past6 = heat_exchanger_Q(T_crpast_x,T_crpast_b,m_cream,Cp_cream_mixed)\nQ_past7 = heat_exchanger_Q(T_cream,T_crpast_c,m_cream,Cp_cream_mixed)\n\n# Computation for steam and glywater\n\nm_gly_ref = Q_refrigeration / ( Cp_glywater * (T_glywater_out-T_glywater_in) )\nm_steam_past3 = Q_past3 / ( Cp_steam * (T_steam_in-T_steam_out) )\nm_gly_past4 = Q_past4 / ( Cp_glywater * (T_glywater_out-T_glywater_in) )\nm_steam_past6 = Q_past6 / ( Cp_steam * (T_steam_in-T_steam_out) )\nm_gly_past7 = Q_past7 / ( Cp_glywater * (T_glywater_out-T_glywater_in) )\n\n# Specific entropy and enthalpy from beer pasteurisation\n\ndelta_s_steam = 7.343e3 - 1.418e3\ndelta_h_steam = 2880.8e3 - 461.368e3\n\n\n#DATAFRAMES\n\n# Dataframe for Heat Flows\n\nEnergy_flow = 'kJ/s'\n\nVariables_Names = ['Refrigeration','Past1','Past2','Past3','Past4','Past5','Past6','Past7']\nVariables_Values = np.divide([Q_refrigeration,Q_past1,Q_past2,Q_past3,Q_past4,Q_past5,Q_past6,Q_past7],1000)\nVariables_Units =  Energy_flow \ndf_pasteurization_heat_flow = pd.DataFrame(data = {'Heat Flow': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})\n\n# Dataframe for Temperatures\n\nTemperature = 'Â°C'\n\nTemperatures_vector = [T_a,T_fmilk,T_mixure_out,T_past_cent,T_milk_0,T_cream_0,T_past_a,T_past_b,T_past_c,T_past_d,T_milk,T_crpast_a,T_thick,T_crpast_x,T_crpast_b,T_crpast_c,T_cream,T_steam_in,T_steam_out,T_glywater_in,T_glywater_out]\nto_celsius = lambda t: t - 273.15\nTemperatures_vector = np.array([to_celsius(x) for x in Temperatures_vector])\nVariables_Names = ['a','fmilk','mixure_out','past_cent','milk_0','cream_0','past_a','past_b','past_c','past_d','milk','crpast_a','thick','crpast_x','crpast_b','crpast_c','cream','steam_in','steam_out','glywater_in','glywater_out']\n\nVariables_Values = Temperatures_vector\nVariables_Units =  Temperature \ndf_pasteurization_temperatures = pd.DataFrame(data = {'Temperature': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})\n\n\n# Dataframe for Mass Flows in the Pasteurisation\n\nMass_flow = 'kg/s'\n\nVariables_Names = ['fresh_milk','milk','cream','intern = fresh_milk - milk','thickener']\nVariables_Values = [m_fmilk,m_milk,m_cream,m_int,m_thick]\nVariables_Units =  Mass_flow \ndf_pasteurization_mf_in = pd.DataFrame(data = {'Mass Flow': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})\n\n# Dataframe for Mass Flows for steam and glywater\n\nMass_flow = 'kg/s'\n\nVariables_Names = ['glywater in refrigeration','steam in past3','glywater in past4','steam in past6','glywater in past4']\nVariables_Values = [m_gly_ref,m_steam_past3,m_gly_past4,m_steam_past6,m_gly_past7 ]\nVariables_Units =  Mass_flow \ndf_pasteurization_mf_steam_gly = pd.DataFrame(data = {'Mass Flow': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})\n\n\n# Dataframe for Heat capacities (J/(kg.K))\n\nHeat_capacity = 'J/(kg.K)'\n\nVariables_Names = ['alboline','raw_milk','cream','glywater','steam','fmilk','cream_mixed']\nVariables_Values = [Cp_alboline,Cp_raw_milk,Cp_cream,Cp_glywater,Cp_steam,Cp_fmilk,Cp_cream_mixed]\nVariables_Units =  Heat_capacity \ndf_pasteurization_heat_capacities = pd.DataFrame(data = {'Heat Capacity': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})\n\n# Dataframe for entropy\n\nSpecific_entropy = 'J/(kg.K)'\n\nVariables_Names = ['delta_s_steam']\nVariables_Values = [delta_s_steam]\nVariables_Units =  Specific_entropy \ndf_pasteurization_entropy = pd.DataFrame(data = {'Specific Entropy': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})\n\n# Dataframe for enthalpy\n\nSpecific_enthalpy = 'J/(kg)'\n\nVariables_Names = ['delta_h_steam']\nVariables_Values = [delta_h_steam]\nVariables_Units =  Specific_enthalpy \ndf_pasteurization_enthalpy = pd.DataFrame(data = {'Specific Enthalpy': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})\n\n#HTML(df_pasteurization_heat_flow.to_html(index=False))\n#HTML(df_pasteurization_temperatures.to_html(index=False))\n#HTML(df_pasteurization_mf_in.to_html(index=False))\n#HTML(df_pasteurization_mf_steam_gly.to_html(index=False))\n#HTML(df_pasteurization_heat_capacities.to_html(index=False))\n\n```\n:::\n\n\n\n\n#### Results\n \n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nimport pandas as pd\nimport numpy as np\nfrom IPython.display import display, HTML\n\ndef degree(x):\n    return x +273.15\n\ndef to_J(x):\n    return x *1000\n\ndf_1_variable = pd.DataFrame(data = {'Variable' : ['Q_refrigeration','Q_past1','Q_past2','Q_past3','Q_past4','Q_past5','Q_past6','Q_past7']})\ndf_1_values = df_pasteurization_heat_flow['Value'].apply(to_J)\ndf_1 = pd.concat([df_1_variable,df_1_values], axis = 1)\n\ndf_2_variable = pd.DataFrame(data = {'Variable' : ['T_a','T_fmilk','T_mixure_out','T_past_cent','T_milk_0','T_cream_0','T_past_a','T_past_b','T_past_c','T_past_d','T_milk','T_crpast_a','T_thick','T_crpast_x','T_crpast_b','T_crpast_c','T_cream','T_steam_in','T_steam_out','T_glywater_in','T_glywater_out']})\ndf_2_values = df_pasteurization_temperatures['Value'].apply(degree)\ndf_2 = pd.concat([df_2_variable,df_2_values], axis = 1)\n\ndf_3_variable = pd.DataFrame(data = {'Variable' : ['m_fmilk','m_milk','m_cream','m_int','m_thick']})\ndf_3_values = df_pasteurization_mf_in['Value']\ndf_3 = pd.concat([df_3_variable,df_3_values], axis = 1)\n\ndf_4_variable = pd.DataFrame(data = {'Variable' : ['m_gly_ref','m_steam_past3','m_gly_past4','m_steam_past6','m_gly_past7']})\ndf_4_values = df_pasteurization_mf_steam_gly['Value']\ndf_4 = pd.concat([df_4_variable,df_4_values], axis = 1)\n\ndf_5_variable = pd.DataFrame(data = {'Variable' : ['Cp_alboline','Cp_raw_milk','Cp_cream','Cp_glywater','Cp_steam','Cp_fmilk','Cp_cream_mixed']})\ndf_5_values = df_pasteurization_heat_capacities['Value']\ndf_5 = pd.concat([df_5_variable,df_5_values], axis = 1)\n\ndf_6_variable =  pd.DataFrame(data = {'Variable' : ['delta_s_steam']})\ndf_6_values = df_pasteurization_entropy['Value']\ndf_6 = pd.concat([df_6_variable,df_6_values], axis = 1)\n\ndf_7_variable =  pd.DataFrame(data = {'Variable' : ['delta_h_steam']})\ndf_7_values = df_pasteurization_enthalpy['Value']\ndf_7 = pd.concat([df_7_variable,df_7_values], axis = 1)\n\n\ndf_pasteurization_csv = pd.concat([df_1,df_2,df_3,df_4,df_5,df_6,df_7], axis = 0, ignore_index = True)\n#df_pasteurization_csv = pd.concat([df_1,df_2,df_3,df_4,df_5], axis = 0, ignore_index = True)\n\ndf_pasteurization_csv.to_csv('pasteurization_process.csv',sep=';')\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\nfrom IPython.display import display, HTML\n\ndf_pasteurization_heat_flow = df_pasteurization_heat_flow.round(2)\ndf_pasteurization_temperatures = df_pasteurization_temperatures.round(2)\ndf_pasteurization_mf_steam_gly = df_pasteurization_mf_steam_gly.round(2)\ndf_pasteurization_heat_capacities = df_pasteurization_heat_capacities.round(2)\n\nHTML(df_pasteurization_heat_flow.to_html(index=False))\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Heat Flow</th>\n      <th>Value</th>\n      <th>Unit</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Refrigeration</td>\n      <td>60.42</td>\n      <td>kJ/s</td>\n    </tr>\n    <tr>\n      <td>Past1</td>\n      <td>1691.65</td>\n      <td>kJ/s</td>\n    </tr>\n    <tr>\n      <td>Past2</td>\n      <td>142.88</td>\n      <td>kJ/s</td>\n    </tr>\n    <tr>\n      <td>Past3</td>\n      <td>285.76</td>\n      <td>kJ/s</td>\n    </tr>\n    <tr>\n      <td>Past4</td>\n      <td>194.37</td>\n      <td>kJ/s</td>\n    </tr>\n    <tr>\n      <td>Past5</td>\n      <td>17.52</td>\n      <td>kJ/s</td>\n    </tr>\n    <tr>\n      <td>Past6</td>\n      <td>35.61</td>\n      <td>kJ/s</td>\n    </tr>\n    <tr>\n      <td>Past7</td>\n      <td>127.00</td>\n      <td>kJ/s</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n\n```{.python .cell-code}\nHTML(df_pasteurization_temperatures.to_html(index=False))\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Temperature</th>\n      <th>Value</th>\n      <th>Unit</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>a</td>\n      <td>25.00</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>fmilk</td>\n      <td>6.00</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>mixure_out</td>\n      <td>4.00</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>past_cent</td>\n      <td>60.00</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>milk_0</td>\n      <td>60.00</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>cream_0</td>\n      <td>60.00</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>past_a</td>\n      <td>65.00</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>past_b</td>\n      <td>75.00</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>past_c</td>\n      <td>70.00</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>past_d</td>\n      <td>10.80</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>milk</td>\n      <td>4.00</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>crpast_a</td>\n      <td>65.90</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>thick</td>\n      <td>4.00</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>crpast_x</td>\n      <td>56.49</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>crpast_b</td>\n      <td>75.00</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>crpast_c</td>\n      <td>70.00</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>cream</td>\n      <td>4.00</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>steam_in</td>\n      <td>207.34</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>steam_out</td>\n      <td>110.00</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>glywater_in</td>\n      <td>-5.00</td>\n      <td>Â°C</td>\n    </tr>\n    <tr>\n      <td>glywater_out</td>\n      <td>-1.00</td>\n      <td>Â°C</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n\n```{.python .cell-code}\nHTML(df_pasteurization_mf_in.to_html(index=False))\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Mass Flow</th>\n      <th>Value</th>\n      <th>Unit</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>fresh_milk</td>\n      <td>8.00</td>\n      <td>kg/s</td>\n    </tr>\n    <tr>\n      <td>milk</td>\n      <td>7.52</td>\n      <td>kg/s</td>\n    </tr>\n    <tr>\n      <td>cream</td>\n      <td>0.55</td>\n      <td>kg/s</td>\n    </tr>\n    <tr>\n      <td>intern = fresh_milk - milk</td>\n      <td>0.48</td>\n      <td>kg/s</td>\n    </tr>\n    <tr>\n      <td>thickener</td>\n      <td>0.07</td>\n      <td>kg/s</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n\n```{.python .cell-code}\nHTML(df_pasteurization_mf_steam_gly.to_html(index=False))\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Mass Flow</th>\n      <th>Value</th>\n      <th>Unit</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>glywater in refrigeration</td>\n      <td>3.87</td>\n      <td>kg/s</td>\n    </tr>\n    <tr>\n      <td>steam in past3</td>\n      <td>1.47</td>\n      <td>kg/s</td>\n    </tr>\n    <tr>\n      <td>glywater in past4</td>\n      <td>12.46</td>\n      <td>kg/s</td>\n    </tr>\n    <tr>\n      <td>steam in past6</td>\n      <td>0.18</td>\n      <td>kg/s</td>\n    </tr>\n    <tr>\n      <td>glywater in past4</td>\n      <td>8.14</td>\n      <td>kg/s</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n\n```{.python .cell-code}\nHTML(df_pasteurization_heat_capacities.to_html(index=False))\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Heat Capacity</th>\n      <th>Value</th>\n      <th>Unit</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>alboline</td>\n      <td>4175.00</td>\n      <td>J/(kg.K)</td>\n    </tr>\n    <tr>\n      <td>raw_milk</td>\n      <td>3800.00</td>\n      <td>J/(kg.K)</td>\n    </tr>\n    <tr>\n      <td>cream</td>\n      <td>3400.00</td>\n      <td>J/(kg.K)</td>\n    </tr>\n    <tr>\n      <td>glywater</td>\n      <td>3900.00</td>\n      <td>J/(kg.K)</td>\n    </tr>\n    <tr>\n      <td>steam</td>\n      <td>1996.00</td>\n      <td>J/(kg.K)</td>\n    </tr>\n    <tr>\n      <td>fmilk</td>\n      <td>3776.00</td>\n      <td>J/(kg.K)</td>\n    </tr>\n    <tr>\n      <td>cream_mixed</td>\n      <td>3498.64</td>\n      <td>J/(kg.K)</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n<!---\n\n\n\n::: {.cell}\n\n:::\n::: {.cell}\n\n```{.python .cell-code}\nfrom CoolProp.CoolProp import PropsSI\nrho = PropsSI('D', 'T', 298.15, 'P', 101325, 'Nitrogen')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# a way to pass the value from python to r is to through json file\nlibrary(reticulate)\nx = 42\n```\n:::\n\n-->\n\n## Evaporation\n\n![Evaporation](Figures/Evaporation.svg)\n\nThe evaporator section receives milk from pasteurisation. This milk can be seen as a mixture of water and fat. The aim of this section is to increase the fat proportion from $11.7\\% wt.$ to $50\\% wt.$ by evaporating water. It is composed of heat-exchanger (HEX), 3 evaporators, 2 splitters and a processing module. \n\nIn order to compute the mass and energy balance at each point, the following method is used:\n\n1. Compute the target mixture at the input and output of each evaporator, and the mass flow associated.\n1. Compute the heating demand of each evaporator and the mass flow of steam needed.\n1. Derive the mass flow of steam going from the evaporator, through the splitter, to the heat exchanger.\n1. Compute the heating capacity of each HEX and find the possible temperature steps according to the HEX requirements.\n1. Compute the Glycolic water needed to cool down the milk and the waste water from HEX.\n1. Derive the amount of whey that can be extracted from the processing module.\n\n### Mixture at each Evaporator\n\nThe mass flow $m_1$ is a given data and the mass flows $m_{14}$, $m_{15}$ and $m_{16}$ are parameters that can be manually changed in order to get a reasonable system. Knowing those 4 mass flows and the target mixture, the fat content at each point can be computed by substracting water mass flows.\n\nGiven data:\n\n- $m_1$ = 5.0 kg/s\n- At point 11, Fat content = $50\\%wt.$ and Water content = $50\\%wt.$\n\nAssumptions:\n\n- $m_{14}$ = 1.6 kg/s\n- $m_{15}$ = 1.28 kg/s\n- $m_{16}$ = 0.8 kg/s\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\nfrom IPython.display import display, HTML\n\nm1=5.0\nm6=m1\nm14=1.6\nm15=1.28\nm16=0.8\n\ndef fat_increase(m_int1, m_int2, m_int3, m_in = 5.0, p_fat_out3 = 0.50):\n    m_out = m_in - m_int1 - m_int2 - m_int3\n    if m_out < 0:\n        print(\"ERROR: The mass of the output is negative.\")\n    # OUT 3\n    p_water_out3 = 1 - p_fat_out3\n    m_water_out3 = m_out * p_water_out3\n    m_fat = m_out * p_fat_out3\n    # OUT 2\n    m_water_out2 = m_water_out3 + m_int3\n    m_tot_2 = m_water_out2 + m_fat\n    p_fat_out2 = m_fat / m_tot_2\n    p_water_out2 = 1 - p_fat_out2\n    # OUT 1\n    m_water_out1 = m_water_out2 + m_int2\n    m_tot_1 = m_water_out1 + m_fat\n    p_fat_out1 = m_fat / m_tot_1\n    p_water_out1 = 1 - p_fat_out1\n    # OUT 0\n    m_water_out0 = m_water_out1 + m_int1\n    m_tot_0 = m_water_out0 + m_fat\n    p_fat_out0 = m_fat / m_tot_0\n    p_water_out0 = 1 - p_fat_out0\n    if p_water_out0 > 0.883:\n        print(\"WARNING: The water content in the final product is too high.\")\n    return m_out, p_fat_out0, p_fat_out1, p_fat_out2, p_fat_out3, p_water_out0, p_water_out1, p_water_out2, p_water_out3\n\nm11, p_fat_out0, p_fat_out1, p_fat_out2, p_fat_out3, p_water_out0, p_water_out1, p_water_out2, p_water_out3 = fat_increase(m_int1=m14, m_int2=m15, m_int3=m16, m_in = m6, p_fat_out3 = 0.5)\n\ndata = {'Point': ['6', '7&8', '9&10', '11'],\n        'Fat content (%)': [p_fat_out0*100, p_fat_out1*100, p_fat_out2*100, p_fat_out3*100],\n        'Water content (%)': [p_water_out0*100, p_water_out1*100, p_water_out2*100, p_water_out3*100]}\ndf = pd.DataFrame(data)\ndf = df.set_index('Point')\ndf = df.round(2)\n#print(df)\nHTML(df.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Fat content (%)</th>\n      <th>Water content (%)</th>\n    </tr>\n    <tr>\n      <th>Point</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6</th>\n      <td>13.20</td>\n      <td>86.80</td>\n    </tr>\n    <tr>\n      <th>7&amp;8</th>\n      <td>19.41</td>\n      <td>80.59</td>\n    </tr>\n    <tr>\n      <th>9&amp;10</th>\n      <td>31.13</td>\n      <td>68.87</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>50.00</td>\n      <td>50.00</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n### Heating Demand and Steam Flow of Evaporators\n\nKnowing the mass flow of each evaporator, the heating demand can be computed. The heating demand is the amount of heat needed to evaporate the water in the milk and is given by the following equation. \n\n$$\nQ_{\\text{evap}} = m_{\\text{in}} \\cdot c_{p_{\\text{in}}} \\cdot \\Delta T - m_{\\text{in}} \\cdot h_{\\text{in}} + m_{\\text{out1}} \\cdot h_{\\text{out1}} + m_{\\text{out2}} \\cdot h_{\\text{out2}}\n$${#eq-Qevap}\n\nThen, knowing the heat requirement, it is possible to derive the mass flow of steam that is needed to evaporate the water, assuming a pressure value.\n\n$$\nm_{\\text{w}} = \\frac{Q_{\\text{evap}}}{h_{\\text{fg}}}\n$${#eq-mw}\n\n\nAll the enthalpy, heat capacity and latent heat of vaporization are computed using the CoolProp library. The pressure of the steam is assumed.\n\nGiven/Known data:\n\n- All the mixture mass flows, pressures and temperatures (either given or computed on previous section)\n\nAssumptions:\n\n- Steam at point 22 is assumed to be 1 bar, at 373 K (saturated steam)\n- Perfect evaporator\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#Evaporator 1\nfrom codes_01_energy_bill.coolprop_functions import mixture\nfrom pyxosmose.state import State\ndef evaporator_fct(m_in,m_out1,m_out2,h_in,h_out1,h_out2,cp_in,deltaT,hfg):\n    Q_evap = m_in*cp_in*deltaT - m_in*h_in + m_out1*h_out1 + m_out2*h_out2\n    m_w = (Q_evap)/(hfg)\n    #print('Qevap:',Q_evap)\n    #print('mw:',m_w)\n    return Q_evap, m_w\n#Fixed Parameters \np6=31000\np7=p6\np14=p6\np24=100000\n\nT6=343\nT7=T6\nT14=343\nT24=373 #can be changed if needed to reduce cost instead of having a high pressure\n\n#Dependent Parameters\nState_e6=mixture(T=T6, P=p6, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!\n#print(State_e6)\nh6=State_e6[\"enthalpy\"]\ncp6=State_e6[\"cpmass\"]\n\nState_e7=mixture(T=T7, P=p7, frac_water=p_water_out1, frac_fat=p_fat_out1) # this is a dictionary!!\n#print(State_e7)\nh7=State_e7[\"enthalpy\"]\n\nPoint_e14 = State(pair='TP', fluid='water', temperature=T14, pressure=p14)\n# Then calculate the state using the State class method StateCalc\nPoint_e14.StateCalc()\n# And print the dictionary for revision\nState_e14 = Point_e14.__dict__ # Whole dictionary with properties\nh14=State_e14[\"enthalpy\"]\n#print(h14)\n\nPoint_e24 = State(pair='TP', fluid='water', temperature=T24, pressure=p24)\n# Then calculate the state using the State class method StateCalc\nPoint_e24.StateCalc()\n# And print the dictionary for revision\nState_e24 = Point_e24.__dict__ # Whole dictionary with properties\nhfg1=State_e24[\"enthalpy\"]\n#print(hfg1)\n\n#Evap 1 calculation of heat \nm7=m6-m14\ndeltaT=5\n\nQ_evap1, m_w1 = evaporator_fct(m6,m14,m7,h6,h14,h7,cp6,deltaT,hfg1)\n\n#print(Q_evap1)\n#print(m_w1)\n\n#Evaporator 2\n\nfrom codes_01_energy_bill.coolprop_functions import mixture\n\np8=25000\np9=p8\np15=25000\np17=p14\n\nT8=338\nT9=T8\nT15=338\nT17=T14\n\nState_e8=mixture(T=T8, P=p8, frac_water=p_water_out2, frac_fat=p_fat_out2) # this is a dictionary!!\n#print(State_e8)\nh8=State_e8[\"enthalpy\"]\ncp8=State_e8[\"cpmass\"]\n\nState_e9=mixture(T=T9, P=p9, frac_water=p_water_out2, frac_fat=p_fat_out2) # this is a dictionary!!\n#print(State_e9)\nh9=State_e9[\"enthalpy\"]\n\nPoint_e15 = State(pair='TP', fluid='water', temperature=T15, pressure=p15)\n# Then calculate the state using the State class method StateCalc\nPoint_e15.StateCalc()\n# And print the dictionary for revision\nState_e15 = Point_e15.__dict__ # Whole dictionary with properties\nh15=State_e15[\"enthalpy\"]\n#print(h15)\n\nPoint_e17 = State(pair='TP', fluid='water', temperature=T17, pressure=p17)\n# Then calculate the state using the State class method StateCalc\nPoint_e17.StateCalc()\n# And print the dictionary for revision\nState_e17 = Point_e17.__dict__ # Whole dictionary with properties\nhfg2=State_e17[\"enthalpy\"]\n#print(hfg2)\n\nm8=m7\nm9=m8-m15\ndeltaT=5\n\nQ_evap2, m_w2 = evaporator_fct(m8,m15,m9,h8,h15,h9,cp8,deltaT,hfg2)\n\n#print(Q_evap2)\n#print(m_w2)\n\n#Evaporator 3\n\nfrom codes_01_energy_bill.coolprop_functions import mixture\n\np10=20000\np11=p10\np15=25000\np18=p15\np16=20000\n\nT10=333\nT11=T10\nT15=338\nT18=T15\nT16=333\n\nState_e10=mixture(T=T10, P=p10, frac_water=p_water_out2, frac_fat=p_fat_out2) # this is a dictionary!!\n#print(State_e10)\nh10=State_e10[\"enthalpy\"]\ncp10=State_e10[\"cpmass\"]\n\nState_e11=mixture(T=T11, P=p11, frac_water=p_water_out3, frac_fat=p_fat_out3) # this is a dictionary!!\n#print(State_e11)\nh11=State_e11[\"enthalpy\"]\n\nPoint_e16 = State(pair='TP', fluid='water', temperature=T16, pressure=p16)\n# Then calculate the state using the State class method StateCalc\nPoint_e16.StateCalc()\n# And print the dictionary for revision\nState_e16 = Point_e16.__dict__ # Whole dictionary with properties\nh16=State_e16[\"enthalpy\"]\n#print(h16)\n\nPoint_e18 = State(pair='TP', fluid='water', temperature=T18, pressure=p18)\n# Then calculate the state using the State class method StateCalc\nPoint_e18.StateCalc()\n# And print the dictionary for revision\nState_e18 = Point_e18.__dict__ # Whole dictionary with properties\nhfg3=State_e18[\"enthalpy\"]\n#print(hfg3)\n\nm10=m9\nm11=m10-m16\ndeltaT=5\n\nQ_evap3, m_w3 = evaporator_fct(m10,m16,m11,h10,h16,h11,cp10,deltaT,hfg3)\n\nm17=m_w2\nm18=m_w3\nm24=m_w1\n\n#print(Q_evap3)\n#print(m_w3)\n# print mass flow, temperature, preasure for the points 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18 in a dataframe\n\ndata = {'Point': ['6', '7', '8', '9', '10', '11', '14', '15', '16', '17', '18', '24'],\n        'Mass flow (kg/s)': [m6, m7, m8, m9, m10, m11, m14, m15, m16, m17, m18, m24],\n        'Temperature (K)': [T6, T7, T8, T9, T10, T11, T14, T15, T16, T17, T18, T24],\n        'Pressure (Pa)': [p6, p7, p8, p9, p10, p11, p14, p15, p16, p17, p18, p24]}\ndf = pd.DataFrame(data)\ndf = df.set_index('Point')\ndf = df.round(4)\nHTML(df.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Mass flow (kg/s)</th>\n      <th>Temperature (K)</th>\n      <th>Pressure (Pa)</th>\n    </tr>\n    <tr>\n      <th>Point</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6</th>\n      <td>5.0000</td>\n      <td>343</td>\n      <td>31000</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>3.4000</td>\n      <td>343</td>\n      <td>31000</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>3.4000</td>\n      <td>338</td>\n      <td>25000</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2.1200</td>\n      <td>338</td>\n      <td>25000</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2.1200</td>\n      <td>333</td>\n      <td>20000</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>1.3200</td>\n      <td>333</td>\n      <td>20000</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>1.6000</td>\n      <td>343</td>\n      <td>31000</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>1.2800</td>\n      <td>338</td>\n      <td>25000</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>0.8000</td>\n      <td>333</td>\n      <td>20000</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>1.5505</td>\n      <td>343</td>\n      <td>31000</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>0.1386</td>\n      <td>338</td>\n      <td>25000</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>0.0366</td>\n      <td>373</td>\n      <td>100000</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n\n```{.python .cell-code}\n#print in a data frame the heat demand of each evaporator\ndata = {'Evaporator': ['1', '2', '3'],\n        'Heat demand (W)': [Q_evap1, Q_evap2, Q_evap3]}\ndf = pd.DataFrame(data)\ndf = df.set_index('Evaporator')\ndf = df.round(4)\nHTML(df.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Heat demand (W)</th>\n    </tr>\n    <tr>\n      <th>Evaporator</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>98038.8718</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>453437.0884</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>37624.9694</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n### Steam Flow to HEX\n\nFrom previous sections, $m_{14}$, $m_{15}$, $m_{16}$, $m_{17}$, and $m_{18}$ are known. The mass flow of steam going through the HEX4, HEX3 can be computed using the following equation, corresponding to the ideal splitter:\n\n$$\nm_{\\text{steam,HEX}} = m_{\\text{in}} - m_{\\text{steam,evap}}\n$${#eq-msteamHEX}\n\nThe steam mass flow through HEX2 and HEX1 are known ; $m_{16}$ and $m_{11}$ respectively.\n\nKnown data:\n\n- $m_{14}$, $m_{15}$, $m_{16}$, $m_{17}$, and $m_{18}$\n\nAssumptions:\n\n- Perfect splitter\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nm19=m14-m_w2\nm20=m15-m_w3\n#print(' mHEX4 = m19 = ', m19, '\\n', 'mHEX3 = m20 = ', m20, '\\n', 'mHEX2 = m16 = ', m16, '\\n', 'mHEX1 = m11 = ', m11, '\\n',)\nprint(f'mHEX4 = m19 = {m19:.3f} (kg/s)\\n'\n      f'mHEX3 = m20 = {m20:.3f} (kg/s)\\n'\n      f'mHEX2 = m16 = {m16:.3f} (kg/s)\\n'\n      f'mHEX1 = m11 = {m11:.3f} (kg/s)\\n')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmHEX4 = m19 = 0.049 (kg/s)\nmHEX3 = m20 = 1.141 (kg/s)\nmHEX2 = m16 = 0.800 (kg/s)\nmHEX1 = m11 = 1.320 (kg/s)\n```\n:::\n:::\n\n\n### HEX Heat Demand and Temperature Steps\n\nBefore doing any calculation, it is noticeable that $m_{19}$, i.e. the hot flow through HEX4, is very small. The heating capacity is therefore too small to ensure the required heating. In order to reduce the cost of the system, it is preferable to remove HEX4. \nTo compute the temperature steps and the heating capacity, the following method is used:\n\n- Assume some temperature steps between the 3 HEX.\n- Compute the heating capacity of each HEX, by being aware that $T_{\\text{hot,out}} \\geq T_{\\text{cold,in}}$ condition is satisfied.\n- Adapt the temperature steps with the heating capacity of each HEX, to satisfy the previous condition.\n\nThe following function is used to know the heating capacity of each HEX:\n\n```\ndef HeatExchanger(mcold, cpcold, Tcoldin, Tcoldout, Thotin, cphot, mhot, hhot):\n    Q = mcold * cpcold * (Tcoldout - Tcoldin)\n    Qcond = mhot * abs(hhot)\n    if Qcond < Q:\n        #print(\"Cold stream is completely condensed\")\n        Thotout = (-Q + mhot * abs(hhot)) / (mhot * cphot) + Thotin\n    else:\n        #print(\"Cold stream is not completely condensed\")\n        Thotout = Thotin\n    return Q, Thotout\n```\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef HeatExchanger(mcold, cpcold, Tcoldin, Tcoldout, Thotin, cphot, mhot, hhot):\n    Q = mcold*cpcold*(Tcoldout-Tcoldin)\n    Qcond = mhot*abs(hhot)\n    if Qcond<Q:\n        #print(\"Cold stream is completely condensed\")\n        Thotout = (-Q+mhot*abs(hhot))/(mhot*cphot) + Thotin\n    else:\n        #print(\"Cold stream is not completely condensed\")\n        Thotout = Thotin\n    #print('Q_cond:', Qcond, 'W')\n    #print('Q_HEX:', Q, 'W')\n    #print('T_cold_in:', Tcoldin, 'K')\n    #print('T_cold_out:', Tcoldout, 'K')\n    #print('T_hot_in:', Thotin, 'K')\n    #print('T_hot_out:', Thotout, 'K')\n    return Q, Thotout\n\n# Heat Exchanger 4\n# Calculation can be done but the module is not used\n\nT4=338\nT5=T4\nT19=T14\np4=100000\nState_e4=mixture(T=T4, P=p4, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!\ncp4=State_e4[\"cpmass\"]\nm5=m1\nm19=m14-m_w2\np19=p6\nPoint_e19 = State(pair='TP', fluid='water', temperature=T19, pressure=p19)\n# Then calculate the state using the State class method StateCalc\nPoint_e19.StateCalc()\n# And print the dictionary for revision\nState_e19 = Point_e19.__dict__ # Whole dictionary with properties\nh19=State_e19[\"enthalpy\"]\ncp19=State_e19[\"cpmass\"]\n\nQ4, Thot4 = HeatExchanger(m5, cp4, T4, T5, T19, cp19, m19, h19)\n\n#Heat Exchanger 3\nT3=317.5\nT20=T15\nm4=m1\nm20=m15-m_w3\np20=p8\np3=p4\nState_e3=mixture(T=T3, P=p3, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!\ncp3=State_e3[\"cpmass\"]\n\nPoint_e20 = State(pair='TP', fluid='water', temperature=T20, pressure=p20)\n# Then calculate the state using the State class method StateCalc\nPoint_e20.StateCalc()\n# And print the dictionary for revision\nState_e20 = Point_e20.__dict__ # Whole dictionary with properties\nh20=State_e20[\"enthalpy\"]\ncp20=State_e20[\"cpmass\"]\n\nQ3, Thot3 = HeatExchanger(m4, cp3, T3, T4, T20, cp20, m20, h20)\n\n#Heat Exchanger 2\nT2=302\nm3=m1\np2=p4\nState_e2=mixture(T=T2, P=p2, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!\ncp2=State_e2[\"cpmass\"]\ncp16=State_e16[\"cpmass\"]\n\nQ2, Thot2 = HeatExchanger(m3, cp2, T2, T3, T16, cp16, m16, h16)\n\n#Heat Exchanger 1\nT1=277\np1=p4\nState_e1=mixture(T=T1, P=p1, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!\ncp1=State_e1[\"cpmass\"]\ncp11=State_e11[\"cpmass\"]\nh11=State_e11[\"enthalpy\"]\n\n# mcold, cpcold, Tcoldin, Tcoldout, Thotin, cphot, mhot, hhot\nQ1, Thot1 = HeatExchanger(m1, cp1, T1, T2, T11, cp11, m11, h11)\n\n#HeatExchanger(mcold, cpcold, Tcoldin, Tcoldout, Thotin, cphot, mhot, hhot)\n#Q4, Thot4 = HeatExchanger(m5, cp4, T4, T5, T19, cp19, m19, h19)\n#Q3, Thot3 = HeatExchanger(m4, cp3, T3, T4, T20, cp20, m20, h20)\n#Q2, Thot2 = HeatExchanger(m3, cp2, T2, T3, T16, cp16, m16, h16)\n#Q1, Thot1 = HeatExchanger(m1, cp1, T1, T2, T11, cp11, m11, h11)\n\ndata = {'HEX': ['1', '2', '3', '4'],\n        'Steam Flow (kg/s)' : [m11, m16, m20, m19],\n        'T cold in (K)': [T1, T2, T3, T4],\n        'T cold out (K)': [T2, T3, T4, T5],\n        'T hot in (K)': [T11, T16, T20, T19],\n        'T hot out (K)': [Thot1, Thot2, Thot3, Thot4],\n        'Heat (W)': [Q1, Q2, Q3, Q4]}\ndf = pd.DataFrame(data)\ndf = df.set_index('HEX')\ndf = df.round(2)\nHTML(df.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Steam Flow (kg/s)</th>\n      <th>T cold in (K)</th>\n      <th>T cold out (K)</th>\n      <th>T hot in (K)</th>\n      <th>T hot out (K)</th>\n      <th>Heat (W)</th>\n    </tr>\n    <tr>\n      <th>HEX</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1.32</td>\n      <td>277.0</td>\n      <td>302.0</td>\n      <td>333</td>\n      <td>290.39</td>\n      <td>491475.77</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.80</td>\n      <td>302.0</td>\n      <td>317.5</td>\n      <td>333</td>\n      <td>302.41</td>\n      <td>302869.43</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1.14</td>\n      <td>317.5</td>\n      <td>338.0</td>\n      <td>338</td>\n      <td>319.00</td>\n      <td>400698.49</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.05</td>\n      <td>338.0</td>\n      <td>338.0</td>\n      <td>343</td>\n      <td>343.00</td>\n      <td>0.00</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n### Cooling Demand\n\nHEX5 ensures that the milk is cooled down from $T_{\\text{hot,out,HEX1}}$ = 290.38 K to 277 K. The cooling demand is computed using the following equation:\n\n$$\nQ_{\\text{glycol}} = m_{12} \\cdot cp_{12} \\cdot (T_{12} - T_{13})\n$${#eq-Qglycol}\n\n$$\nm_{\\text{glycol}} = \\frac{Q_{\\text{glycol}}}{cp_{{\\text{glycol}}} \\cdot (T_{\\text{out,glycol}} - T_{\\text{in,glycol}})}\n$${#eq-mglycol}\n\nGiven/Known data:\n\n- $m_{12}$, $T_{12}$, $T_{13}$\n\nAssumptions:\n\n- $T_{\\text{in,glycol}}$ = 270 K\n- $T_{\\text{out,glycol}}$ = 277 K\n- $cp_{\\text{glycol}}$ = 2294 kJ/kg.K\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#Heat Exchanger Glycolic water\n\np12=p11\nT12=Thot1\nT13=277\nm12=m11\n#print(p12,p_water_out3,p_fat_out3)\nState_e12 = mixture(T=T12, P=p12, frac_water=p_water_out3, frac_fat=p_fat_out3)\ncp12=State_e12[\"cpmass\"]\n#print('cp12', cp12)\n\n\nTinglycol=270\nToutglycol=277\ncpglycol=2294\n\nQglycol = m12*cp12*(T12-T13)\nmglycol = m12*(cp12/cpglycol)*(T12-T13)/(Toutglycol-Tinglycol)\n\nprint(f'Q_glycol = {Qglycol:.3f} (W)\\n'\n      f'm_glycol = {mglycol:.3f} (kg/s)')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nQ_glycol = 55703.141 (W)\nm_glycol = 3.469 (kg/s)\n```\n:::\n:::\n\n\n### Whey Extraction\n\nFinally, in order to match the target fat content, it is possible to extract whey from the system. The mass flow of whey is computed using the following equation:\n\n**Processing**:\n\nFlow In:\n\\begin{align*}\n    m_{\\text{pasteur}} &= 7.52 \\text{ (kg/s)}\\\\\n    p_{\\text{water\\_pasteur}} &= 0.883 \\\\\n    p_{\\text{fat\\_pasteur}} &= 1 - p_{\\text{water\\_pasteur}}\n\\end{align*}\n\nFlow to HEX:\n\n\\begin{align*}\n    m_1 &= 5.0 \\text{ (kg/s)}\\\\\n    p_{\\text{water\\_out1}} &= 0.868 \\\\\n    p_{\\text{fat\\_out1}} &= 1 - p_{\\text{water\\_out1}}\n\\end{align*}\n\nFlow to Filter:\n\\begin{align*}\n    m_{\\text{water\\_21}} &= m_{\\text{pasteur}} \\cdot p_{\\text{water\\_pasteur}} - p_{\\text{water\\_out1}} \\cdot m_1 \\\\\n    m_{\\text{fat\\_21}} &= m_{\\text{pasteur}} \\cdot p_{\\text{fat\\_pasteur}} - p_{\\text{fat\\_out1}} \\cdot m_1 \\\\\n    m_{21} &= m_{\\text{pasteur}} - m_1 \\\\\n    p_{\\text{water\\_21}} &= \\frac{m_{\\text{water\\_21}}}{m_{21}} \\\\\n    p_{\\text{fat\\_21}} &= \\frac{m_{\\text{fat\\_21}}}{m_{21}}\n\\end{align*}\n\n**Filter:**\n\nWastewater flow:\n\n\\begin{align*}\n    m_{23} &= 1 \\text{ (kg/s)}\\\\\n    p_{\\text{water\\_23}} &= 1 \\\\\n    p_{\\text{fat\\_23}} &= 0\n\\end{align*}\n\nWhey flow:\n\\begin{align*}\n    m_{\\text{water\\_22}} &= m_{\\text{water\\_21}} - m_{23} \\cdot p_{\\text{water\\_23}} \\\\\n    m_{\\text{fat\\_22}} &= m_{\\text{fat\\_21}} - m_{23} \\cdot p_{\\text{fat\\_23}} \\\\\n    m_{22} &= m_{21} - m_{23} \\\\\n    p_{\\text{water\\_22}} &= \\frac{m_{\\text{water\\_22}}}{m_{22}} \\\\\n    p_{\\text{fat\\_22}} &= \\frac{m_{\\text{fat\\_22}}}{m_{22}}\n\\end{align*}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Processing\n# Flow In\nm_pasteur = 7.52\np_water_pasteur = 0.883\np_fat_pasteur = 1 - p_water_pasteur\n\n# Flow Out\nm_water_21 = m_pasteur * p_water_pasteur - p_water_out0 * m1\nm_fat_21 = m_pasteur * p_fat_pasteur - p_fat_out0 * m1\n\nm_21 = m_pasteur - m1\np_water_21 = m_water_21 / m_21\np_fat_21 = m_fat_21 / m_21\n\n# Filter\nm_23 = 1\np_water_23 = 1\np_fat_23 = 0\n\n# Flow out Whey\nm_water_22 = m_water_21 - m_23 * p_water_23\nm_fat_22 = m_fat_21 - m_23 * p_fat_23\n\nm_22 = m_21 - m_23\np_water_22 = m_water_22 / m_22\np_fat_22 = m_fat_22 / m_22\n\n# Print in a data frame the percent and mass flow of fat and water for point pasteur, 21, 22 and 23\ndata = {'Point': ['Pasteur', '21', '22', '23'],\n        'Fat content (%)': [p_fat_pasteur*100, p_fat_21*100, p_fat_22*100, p_fat_23*100],\n        'Water content (%)': [p_water_pasteur*100, p_water_21*100, p_water_22*100, p_water_23*100],\n        'Mass flow (kg/s)': [m_pasteur, m_21, m_22, m_23]}\ndfwhey = pd.DataFrame(data)\ndfwhey = dfwhey.set_index('Point')\ndfwhey = dfwhey.round(2)\n#print(dfwhey)\nHTML(dfwhey.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Fat content (%)</th>\n      <th>Water content (%)</th>\n      <th>Mass flow (kg/s)</th>\n    </tr>\n    <tr>\n      <th>Point</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Pasteur</th>\n      <td>11.70</td>\n      <td>88.30</td>\n      <td>7.52</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>8.72</td>\n      <td>91.28</td>\n      <td>2.52</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>14.46</td>\n      <td>85.54</td>\n      <td>1.52</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>0.00</td>\n      <td>100.00</td>\n      <td>1.00</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n### Summary for the evaporator section\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#Entropy\n\n#Computing remaining states\np5=p4\nState_e5 = mixture(T=T5, P=p5, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!\n\np13=p12\nState_e13 = mixture(T=T13, P=p13, frac_water=p_water_out3, frac_fat=p_fat_out3) # this is a dictionary!!\n\nT21=277\np21=p1\nState_e21 = mixture(T=T21, P=p21, frac_water=p_water_21, frac_fat=p_fat_21) # this is a dictionary!!\n\nT22=T21\np22=p21\nState_e22 = mixture(T=T22, P=p22, frac_water=p_water_22, frac_fat=p_fat_22) # this is a dictionary!!\n\nT23=T21\np23=p21\nState_e23 = mixture(T=T23, P=p23, frac_water=p_water_23, frac_fat=p_fat_23) # this is a dictionary!!\n\n\nTtest2=T16\nptest2=p16\nState_test2 = State(pair='TP', fluid='water', temperature=Ttest2, pressure=ptest2) \nState_test2.StateCalc()\n# And print the dictionary for revision\nState_test2 = State_test2.__dict__\n\nTtest3=T20\nptest3=p20\nState_test3 = State(pair='TP', fluid='water', temperature=Ttest3, pressure=ptest3) \nState_test3.StateCalc()\n# And print the dictionary for revision\nState_test3 = State_test3.__dict__\n\nTtest4=T19\nptest4=p19\nState_test4 = State(pair='TP', fluid='water', temperature=Ttest4, pressure=ptest4) \nState_test4.StateCalc()\n# And print the dictionary for revision\nState_test4 = State_test4.__dict__\n\n#Exctraction of entropy\ns1=State_e1[\"entropy\"]\ns2=State_e2[\"entropy\"]\ns3=State_e3[\"entropy\"]\ns4=State_e4[\"entropy\"]\ns5=State_e5[\"entropy\"]\ns6=State_e6[\"entropy\"]\ns7=State_e7[\"entropy\"]\ns8=State_e8[\"entropy\"]\ns9=State_e9[\"entropy\"]\ns10=State_e10[\"entropy\"]\ns11=State_e11[\"entropy\"]\ns12=State_e12[\"entropy\"]\ns13=State_e13[\"entropy\"]\ns14=State_e14[\"entropy\"]\ns15=State_e15[\"entropy\"]\ns16=State_e16[\"entropy\"]\ns17=State_e17[\"entropy\"]\ns18=State_e18[\"entropy\"]\ns19=State_e19[\"entropy\"]\ns20=State_e20[\"entropy\"]\ns21=State_e21[\"entropy\"]\ns22=State_e22[\"entropy\"]\ns23=State_e23[\"entropy\"]\nstest2=State_test2[\"entropy\"]\nstest3=State_test3[\"entropy\"]\nstest4=State_test4[\"entropy\"]\n\nh1=State_e1[\"enthalpy\"]\nh2=State_e2[\"enthalpy\"]\nh3=State_e3[\"enthalpy\"]\nh4=State_e4[\"enthalpy\"]\nh5=State_e5[\"enthalpy\"]\nh6=State_e6[\"enthalpy\"]\nh7=State_e7[\"enthalpy\"]\nh8=State_e8[\"enthalpy\"]\nh9=State_e9[\"enthalpy\"]\nh10=State_e10[\"enthalpy\"]\nh11=State_e11[\"enthalpy\"]\nh12=State_e12[\"enthalpy\"]\nh13=State_e13[\"enthalpy\"]\nh14=State_e14[\"enthalpy\"]\nh15=State_e15[\"enthalpy\"]\nh16=State_e16[\"enthalpy\"]\nh17=State_e17[\"enthalpy\"]\nh18=State_e18[\"enthalpy\"]\nh19=State_e19[\"enthalpy\"]\nh20=State_e20[\"enthalpy\"]\nh21=State_e21[\"enthalpy\"]\nh22=State_e22[\"enthalpy\"]\nh23=State_e23[\"enthalpy\"]\nhtest2=State_test2[\"enthalpy\"]\nhtest3=State_test3[\"enthalpy\"]\nhtest4=State_test4[\"enthalpy\"]\n\nm2=m1\nm13=m12\nm17=m_w2\nm18=m_w3\nm21 = m_21\nm22 = m_22\nm23 = m_23\nmtest2=m16\nmtest3=m20\nmtest4=m19\n\n#Recap\n#Print in a dataframe: Temperature, Pressure, Mass flow, Enthalpy, Entropy for each point (i.e. 1 to 23)\n\ndatarecap = {'Point': ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10','11', '12', '13', '14', '15', '16', '17', '18', '19', '20','21', '22', '23', 'test2', 'test3', 'test4'],\n        'Temperature (K)': [T1, T2, T3, T4, T5, T6, T7, T8, T9, T10,T11, T12, T13, T14, T15, T16, T17, T18, T19, T20,T21, T22, T23,Ttest2, Ttest3, Ttest4],\n        'Pressure (Pa)': [p1, p2, p3, p4, p5, p6, p7, p8, p9, p10,p11, p12, p13, p14, p15, p16, p17, p18, p19, p20,p21, p22, p23,ptest2, ptest3, ptest4],\n        'Mass flow (kg/s)': [m1, m2, m3, m4, m5, m6, m7, m8, m9, m10,m11, m12, m13, m14, m15, m16, m17, m18, m19, m20,m21, m22, m23,mtest2, mtest3, mtest4],\n        'Enthalpy (J/mol)': [h1, h2, h3, h4, h5, h6, h7, h8, h9, h10,h11, h12, h13, h14, h15, h16, h17, h18, h19, h20,h21, h22, h23,htest2, htest3, htest4],\n        'Entropy (J/K)': [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10,s11, s12, s13, s14, s15, s16, s17, s18, s19, s20,s21, s22, s23,stest2, stest3, stest4]}\ndfrecap = pd.DataFrame(datarecap)\ndfrecap = dfrecap.set_index('Point')\ndfrecap = dfrecap.round(2)\nHTML(dfrecap.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Temperature (K)</th>\n      <th>Pressure (Pa)</th>\n      <th>Mass flow (kg/s)</th>\n      <th>Enthalpy (J/mol)</th>\n      <th>Entropy (J/K)</th>\n    </tr>\n    <tr>\n      <th>Point</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>277.00</td>\n      <td>100000</td>\n      <td>5.00</td>\n      <td>-97330.56</td>\n      <td>-203.15</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>302.00</td>\n      <td>100000</td>\n      <td>5.00</td>\n      <td>560.64</td>\n      <td>135.21</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>317.50</td>\n      <td>100000</td>\n      <td>5.00</td>\n      <td>61136.10</td>\n      <td>330.82</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>338.00</td>\n      <td>100000</td>\n      <td>5.00</td>\n      <td>141356.45</td>\n      <td>575.65</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>338.00</td>\n      <td>100000</td>\n      <td>5.00</td>\n      <td>141356.45</td>\n      <td>575.65</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>343.00</td>\n      <td>31000</td>\n      <td>5.00</td>\n      <td>160898.84</td>\n      <td>633.26</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>343.00</td>\n      <td>31000</td>\n      <td>3.40</td>\n      <td>98998.76</td>\n      <td>482.65</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>338.00</td>\n      <td>25000</td>\n      <td>3.40</td>\n      <td>-35572.68</td>\n      <td>146.29</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>338.00</td>\n      <td>25000</td>\n      <td>2.12</td>\n      <td>-35572.68</td>\n      <td>146.29</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>333.00</td>\n      <td>20000</td>\n      <td>2.12</td>\n      <td>-53332.80</td>\n      <td>93.37</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>333.00</td>\n      <td>20000</td>\n      <td>1.32</td>\n      <td>-237505.80</td>\n      <td>-352.72</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>290.39</td>\n      <td>20000</td>\n      <td>1.32</td>\n      <td>-371880.45</td>\n      <td>-784.48</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>277.00</td>\n      <td>20000</td>\n      <td>1.32</td>\n      <td>-414140.10</td>\n      <td>-933.47</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>343.00</td>\n      <td>31000</td>\n      <td>1.60</td>\n      <td>292436.50</td>\n      <td>953.30</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>338.00</td>\n      <td>25000</td>\n      <td>1.28</td>\n      <td>271487.85</td>\n      <td>891.79</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>333.00</td>\n      <td>20000</td>\n      <td>0.80</td>\n      <td>250552.63</td>\n      <td>829.41</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>343.00</td>\n      <td>31000</td>\n      <td>1.55</td>\n      <td>292436.50</td>\n      <td>953.30</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>338.00</td>\n      <td>25000</td>\n      <td>0.14</td>\n      <td>271487.85</td>\n      <td>891.79</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>343.00</td>\n      <td>31000</td>\n      <td>0.05</td>\n      <td>292436.50</td>\n      <td>953.30</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>338.00</td>\n      <td>25000</td>\n      <td>1.14</td>\n      <td>271487.85</td>\n      <td>891.79</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>277.00</td>\n      <td>100000</td>\n      <td>2.52</td>\n      <td>-58804.20</td>\n      <td>-114.31</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>277.00</td>\n      <td>100000</td>\n      <td>1.52</td>\n      <td>-108202.50</td>\n      <td>-228.22</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>277.00</td>\n      <td>100000</td>\n      <td>1.00</td>\n      <td>16281.23</td>\n      <td>58.82</td>\n    </tr>\n    <tr>\n      <th>test2</th>\n      <td>333.00</td>\n      <td>20000</td>\n      <td>0.80</td>\n      <td>250552.63</td>\n      <td>829.41</td>\n    </tr>\n    <tr>\n      <th>test3</th>\n      <td>338.00</td>\n      <td>25000</td>\n      <td>1.14</td>\n      <td>271487.85</td>\n      <td>891.79</td>\n    </tr>\n    <tr>\n      <th>test4</th>\n      <td>343.00</td>\n      <td>31000</td>\n      <td>0.05</td>\n      <td>292436.50</td>\n      <td>953.30</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n\n```{.python .cell-code}\n#Print in a dataframe: Q for each heat exchanger and evaporator\ndataevap = {'Evaporator': ['1', '2', '3'],\n        'Q (W)': [Q_evap1, Q_evap2, Q_evap3]}\ndfevap = pd.DataFrame(dataevap)\ndfevap = dfevap.set_index('Evaporator')\ndfevap = dfevap.round(2)\nHTML(dfevap.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Q (W)</th>\n    </tr>\n    <tr>\n      <th>Evaporator</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>98038.87</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>453437.09</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>37624.97</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n\n```{.python .cell-code}\n#Print in a dataframe: Q for each heat exchanger and evaporator\ndatahx = {'Heat_Exchanger': ['1', '2', '3', '4', 'Glycolic'],\n        'Q (W)': [Q1, Q2, Q3, Q4, Qglycol]}\ndfhx = pd.DataFrame(datahx)\ndfhx = dfhx.set_index('Heat_Exchanger')\ndfhx = dfhx.round(2)\nHTML(dfhx.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Q (W)</th>\n    </tr>\n    <tr>\n      <th>Heat_Exchanger</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>491475.77</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>302869.43</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>400698.49</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>Glycolic</th>\n      <td>55703.14</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n#Load the dataframe in a csv file\n\ndfrecap.to_csv('dfrecap.csv')\ndfevap.to_csv('dfevap.csv')\ndfhx.to_csv('dfhx.csv')\n```\n:::\n\n\n## Drum Dryers\n\n![Drum Dryers](Figures/Drum_dryer_new.jpg)\n\nThis section will present the mass and energy balances of the various steps involved in the process of drying the concentrated milk into milk powder. The concentrated milk is received by the evaporation section. As such the concentrated milk is considered to be a mixture of 50% water and 50% fat which will be transformed into a mixture of 96% fat and 4% water.\n\nThis section consists of multiple step:\n\n1. Compute the mixture proportions at the input and output of each dryer.\n1. Compute the heating demand of each dryer\n1. Compute the heating demand of each HEX component\n1. Compute the amount of cooling water needed to cool down the milk powder\n1. Compute the amount of steam needed to heat up the humid air\n1. Compute the amount of water exiting the system at dd13\n\n### Mixture at each dryer\n\nThe parameters of the mixture at the position dd1 is known, since it is the same mixture exiting the evaporation process. Knowing that the second dryer evaporates 63% of the water it receives as input, it is possible to compute the proportions of water and fat content at each input and output of the dryers.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmass_dd1 = 1.32\n#mass_dd5 = 0.5*mass_dd4 + 0.5*mass_dd4*(1-0.63) = mass_dd1*0.5 + mass_dd1*0.08\n#mass_dd5 = mass_dd1*0.5 + mass_dd1*0.5*0.04\n#96% = 0.5*mass_dd1\n\nmass_dd5 = 0.5*mass_dd1 + (0.5*mass_dd1/0.96)*0.04\nmass_dd4 = mass_dd5/(0.5+0.5*(1-0.63))\nmass_dd4 = 0.5*mass_dd1 + (mass_dd5-0.5*mass_dd1)/0.37\n\nwater_dd1 = 50\nwater_dd4 = ((mass_dd4 - mass_dd1/2)/mass_dd4)*100\nwater_dd5 = ((mass_dd5 - mass_dd1/2)/mass_dd5)*100\n\ndata_m = {'Position': ['dd1', 'dd4', 'dd5', 'dd7'],\n        'm (kg)': [mass_dd1, mass_dd4, mass_dd5, mass_dd5],\n        'Water Proportion': [water_dd1, water_dd4, water_dd5, water_dd5]}\n\ndfm = pd.DataFrame(data_m)\ndfm = dfm.set_index('Position')\ndfm = dfm.round(2)\nHTML(dfm.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>m (kg)</th>\n      <th>Water Proportion</th>\n    </tr>\n    <tr>\n      <th>Position</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>dd1</th>\n      <td>1.32</td>\n      <td>50.00</td>\n    </tr>\n    <tr>\n      <th>dd4</th>\n      <td>0.73</td>\n      <td>10.12</td>\n    </tr>\n    <tr>\n      <th>dd5</th>\n      <td>0.69</td>\n      <td>4.00</td>\n    </tr>\n    <tr>\n      <th>dd7</th>\n      <td>0.69</td>\n      <td>4.00</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n### Heating demand of each dryer\n\nFor this part of the calculations it is assumed that the temperature of the steam at the point dd9 is of 50Â°C, the temperature at dd10is 60Â°C and that the pressure of the steam at points dd8, dd9, dd10 and dd11 is of 70529 Pa.\nThe same equations as the ones of section 2.2.2 are used here.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom codes_01_energy_bill.coolprop_functions import mixture\nfrom pyxosmose.state import State\n\nm1_dryer = mass_dd1\n\ncpH2O = 4182 #J/kg\ncpConcMilk = 2610 #J/kg\n\npressure_dryer = 70529 #Pa, it's the saturatioon pressure for 90Â°C\npressure_dd1 = pressure_dd4 = pressure_dd5 = 20000 #Pa\n\nTemp_dd11 = 318.15\nTemp_dd10 = 333.15\nTemp_dd9 = 323.15\nTemp_dd8 = 363.15\nTemp_dd1 = 277.15\nTemp_dd4 = 333.15\nTemp_dd5 = 333.15\n\nmass_dd8 = (mass_dd4-mass_dd5)/79\nmass_dd9 = mass_dd4-mass_dd5 + mass_dd8\nmass_dd10 = mass_dd9\nmass_dd11 = mass_dd10 + mass_dd1-mass_dd4\n\n\ndef evaporator_fct(m_in,m_out1,m_out2,h_in,h_out1,h_out2,cp_in,deltaT,hfg):\n    Q_evap = m_in*cp_in*deltaT - m_in*h_in + m_out1*h_out1 + m_out2*h_out2\n    m_w = (Q_evap)/(hfg)\n    #print('Qevap:',Q_evap)\n    #print('mw:',m_w)\n    return Q_evap, m_w\n\nState_dd1 = mixture(T = Temp_dd1, P = pressure_dd1, frac_water = water_dd1/100, frac_fat = 1-water_dd1/100)\nh1_dryer = State_dd1[\"enthalpy\"]\ncp1_dryer = State_dd1[\"cpmass\"]\n\nState_dd4 = mixture(T = Temp_dd4, P = pressure_dd4, frac_water = water_dd4/100, frac_fat = 1-water_dd4/100)\nh4_dryer = State_dd4[\"enthalpy\"]\ncp4_dryer = State_dd4[\"cpmass\"]\n\nState_dd5 = mixture(T = Temp_dd5, P = pressure_dd5, frac_water = water_dd5/100, frac_fat = 1-water_dd5/100)\nh5_dryer = State_dd5[\"enthalpy\"]\ncp5_dryer = State_dd5[\"cpmass\"]\n\n#We assume T9 goes to 50C so it can go back to 60 for T10 and pressure is the ambient pressure\n\nPoint_dd9 = State(pair='TP', fluid='water', temperature=Temp_dd9, pressure=pressure_dryer)\nPoint_dd9.StateCalc()\nState_dd9 = Point_dd9.__dict__\nh9_dryer = State_dd9[\"enthalpy\"]\ncp9_dryer = State_dd9[\"cpmass\"]\n\nPoint_dd8 = State(pair='TP', fluid='water', temperature=Temp_dd8, pressure=pressure_dryer)\nPoint_dd8.StateCalc()\nState_dd8 = Point_dd8.__dict__\nhfg8_dryer = State_e24[\"enthalpy\"]\ncp8_dryer = State_dd8[\"cpmass\"]\n\ncp14_dryer = cp8_dryer\n\nQ2_dryer, m_w_2_dryer = evaporator_fct(mass_dd4, mass_dd4-mass_dd5, mass_dd5, h4_dryer, h9_dryer, h5_dryer, cp4_dryer, 40, hfg8_dryer)\n#print(Q2_dryer)\n\nPoint_dd10 = State(pair='TP', fluid='water', temperature=Temp_dd10, pressure=pressure_dryer)\nPoint_dd10.StateCalc()\nState_dd10 = Point_dd10.__dict__\nhfg10_dryer = State_dd10[\"enthalpy\"]\n\nPoint_dd11 = State(pair='TP', fluid='water', temperature=Temp_dd11, pressure=pressure_dryer)\nPoint_dd11.StateCalc()\nState_dd11 = Point_dd11.__dict__\nh11_dryer = State_dd11[\"enthalpy\"]\n\nQ3_dryer, m_w_3_dryer = evaporator_fct(mass_dd1, mass_dd1-mass_dd4 + mass_dd4-mass_dd5, mass_dd4, h1_dryer, h11_dryer, h4_dryer, cp1_dryer, 15, hfg10_dryer)\n#print(Q3_dryer)\n\ndata_param = {'Position': ['1', '4', '5', '8', '9', '10', '11'],\n            'Mass flow (kg/s)': [mass_dd1, mass_dd4, mass_dd5, mass_dd8, mass_dd9, mass_dd10, mass_dd11],\n            'Temperature (K)': [Temp_dd1, Temp_dd4, Temp_dd5, Temp_dd8, Temp_dd9, Temp_dd10, Temp_dd11],\n            'Pressure (Pa)': [pressure_dd1, pressure_dd4, pressure_dd5, pressure_dryer, pressure_dryer, pressure_dryer, pressure_dryer]}\n\ndfp = pd.DataFrame(data_param)\ndfp = dfp.set_index('Position')\ndfp = dfp.round(4)\nHTML(dfp.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Mass flow (kg/s)</th>\n      <th>Temperature (K)</th>\n      <th>Pressure (Pa)</th>\n    </tr>\n    <tr>\n      <th>Position</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1.3200</td>\n      <td>277.15</td>\n      <td>20000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.7343</td>\n      <td>333.15</td>\n      <td>20000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.6875</td>\n      <td>333.15</td>\n      <td>20000</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0.0006</td>\n      <td>363.15</td>\n      <td>70529</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>0.0474</td>\n      <td>323.15</td>\n      <td>70529</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>0.0474</td>\n      <td>333.15</td>\n      <td>70529</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>0.6331</td>\n      <td>318.15</td>\n      <td>70529</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n\n```{.python .cell-code}\ndata_q = {'Dryer': ['Dryer 1', 'Dryer 2'],\n        'Heat demand (W)': [Q3_dryer, Q2_dryer]}\n\ndfq = pd.DataFrame(data_q)\ndfq = dfq.set_index('Dryer')\ndfq = dfq.round(2)\nHTML(dfq.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Heat demand (W)</th>\n    </tr>\n    <tr>\n      <th>Dryer</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Dryer 1</th>\n      <td>267875.02</td>\n    </tr>\n    <tr>\n      <th>Dryer 2</th>\n      <td>67081.68</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n### Heating demand of each HEX\n\nIn this section the following equation is used:\n\n\\begin{align}\n    Q = m \\cdot cp \\cdot (T_{1} - T_{2})\n\\end{align}\n\nThe cp corresponding to the milk mixtures were calculated in the precedent section.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndata_cp = {'Position': ['5', '9', '14'],\n        'cp (J/kg.K)': [ cp5_dryer, cp9_dryer, cp14_dryer]}\n\ndfcp = pd.DataFrame(data_cp)\ndfcp = dfcp.set_index('Position')\ndfcp = dfcp.round(2)\nHTML(dfcp.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cp (J/kg.K)</th>\n    </tr>\n    <tr>\n      <th>Position</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>2225.45</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>4181.41</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>4205.27</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n\n```{.python .cell-code}\nQHEX1_dryer = mass_dd8*cp8_dryer*(Temp_dd8-Temp_dd11)\nQHEX2_dryer = mass_dd9*cp9_dryer*(Temp_dd10-Temp_dd9)\nQHEX3_dryer = mass_dd5*cp5_dryer*(10)\n\ndata_QHEX = {'HEX': ['1', '2', '3'],\n        'Q (W)': [ QHEX1_dryer, QHEX2_dryer, QHEX3_dryer]}\n\ndfqhex = pd.DataFrame(data_QHEX)\ndfqhex = dfqhex.set_index('HEX')\ndfqhex = dfqhex.round(2)\nHTML(dfqhex.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Q (W)</th>\n    </tr>\n    <tr>\n      <th>HEX</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>112.16</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1982.70</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>15299.94</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n### Water demand to cool down the milk powder\n\nIt is assumed that the water used to cool down the milk powder is saturated. As such, the following formula can be used:\n\n\\begin{align}\n    Q = m_{water} \\cdot L_{water}\n\\end{align}\n\n\n::: {.cell}\n\n```{.python .cell-code}\nLwater = 2264.705\nmass_water = QHEX3_dryer / Lwater\n\ndata_water = {'HEX': ['3'],\n        'Mass flow (kg/s)': [ mass_water]}\n\ndfw = pd.DataFrame(data_water)\ndfw = dfw.set_index('HEX')\ndfw = dfw.round(2)\nHTML(dfw.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Mass flow (kg/s)</th>\n    </tr>\n    <tr>\n      <th>HEX</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>6.76</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n### Steam demand to heat up the air\n\nThe steam demand can be computed in the same way as the water demand by inverting the sign of the latent heat parameter. The steam is assumed to be saturated.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nLwaterEvap = 2264.705\nmass_steam1 = QHEX1_dryer / LwaterEvap\nmass_steam2 = QHEX2_dryer / LwaterEvap\n\ndata_steam = {'HEX': ['1', '2'],\n        'Mass flow (kg/s)': [ mass_steam1, mass_steam2]}\n\ndfs = pd.DataFrame(data_steam)\ndfs = dfs.set_index('HEX')\ndfs = dfs.round(2)\nHTML(dfs.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Mass flow (kg/s)</th>\n    </tr>\n    <tr>\n      <th>HEX</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0.05</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.88</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n### Water exiting the system\n\nThe amount of water exiting the system at dd13 is simply the difference of mass between dd11 and dd8:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nwater_exiting = mass_dd11 - mass_dd8\n\ndata_water_exiting = {'Position': ['13'],\n        'Mass flow (kg/s)': [ water_exiting]}\n\ndfwe = pd.DataFrame(data_water_exiting)\ndfwe = dfwe.set_index('Position')\ndfwe = dfwe.round(2)\nHTML(dfwe.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Mass flow (kg/s)</th>\n    </tr>\n    <tr>\n      <th>Position</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>13</th>\n      <td>0.63</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n### Summary for the Drum Dryers section\n\nThis table is a summary of the characteristics of each point of this section:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmass_dd6 = mass_dd5\nmass_dd7 = mass_dd6\nmass_dd12 = mass_dd11\nmass_dd13 = water_exiting\nmass_dd14 = mass_dd8\n\nTemp_dd6 = 323.15\nTemp_dd7 = Temp_dd6\nTemp_dd12 = Temp_dd11\nTemp_dd13 = 318.15\nTemp_dd14 = Temp_dd13\n\ndryer_summary = {'Position': ['1', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14'],\n            'Mass Flow (kg/s)': [mass_dd1, mass_dd4, mass_dd5, mass_dd6, mass_dd7, mass_dd8, mass_dd9, mass_dd10, mass_dd11, mass_dd12, mass_dd13, mass_dd14],\n            'Temperature (K)': [Temp_dd1, Temp_dd4, Temp_dd5, Temp_dd6, Temp_dd7, Temp_dd8, Temp_dd9, Temp_dd10, Temp_dd11, Temp_dd12, Temp_dd13, Temp_dd14]}\n\ndfsd = pd.DataFrame(dryer_summary)\ndfsd = dfsd.set_index('Position')\ndfsd = dfsd.round(4)\nHTML(dfsd.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Mass Flow (kg/s)</th>\n      <th>Temperature (K)</th>\n    </tr>\n    <tr>\n      <th>Position</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1.3200</td>\n      <td>277.15</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.7343</td>\n      <td>333.15</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.6875</td>\n      <td>333.15</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0.6875</td>\n      <td>323.15</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.6875</td>\n      <td>323.15</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0.0006</td>\n      <td>363.15</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>0.0474</td>\n      <td>323.15</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>0.0474</td>\n      <td>333.15</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>0.6331</td>\n      <td>318.15</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>0.6331</td>\n      <td>318.15</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>0.6325</td>\n      <td>318.15</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0.0006</td>\n      <td>318.15</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n## Cleaning in Place\n\n![Cleaning in Place](Figures/CIP.svg)\n\nAssumptions: \n\n- For safety purposes the glass needs to contact with water which is at least at 65Â°C. Each glass bottle weights 370 g and has 500 mL of capacity. \n\nFor this part of the process, the following data are used:\n\n- Mass Flows\n   $\\dot{m}_2 = 4\\,kg/s$\n- Specific Heats\n  - $c_{p,water} = 4.184\\,kJ/kgK$ (Specific heat of liquid water)\n  - $c_{p,glass} = 0.840\\,kJ/kgK$ (Specific heat of glass: @noauthor_table_nodate)\n  - $h_{fg, steam} = 2257\\,kJ/kg$ (Latent heat of steam at $100^\\circ C$)\n- Temperatures\n  - $T_1 = 25Â°C = 298\\,K$ \n  - $T_2 = 60Â°C = 333\\,K$\n  - $T_3 = T_{10} = 80Â°C = 353\\,K$\n  - $T_4 = T_5 = T_6 = T_{12} = 75Â°C = 348\\,K$\n  - $T_7 = 30Â°C = 303\\,K$\n  - $T_8 = 25Â°C = 298\\,K$\n  - $T_{11} = 40Â°C = 313\\,K$\n  - $T_{steam} = 100Â°C = 373\\,K$ (Steam pressure is assumed at 1 bar)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncp_water=4.184\ncp_glass=0.84\nhfg_cipsteam = 2257\n\nm_cip2=4\n\nt_cip1=298\nt_cip2=333\nt_cip3=353\nt_cip4=348\nt_cip5 = t_cip4\nt_cip6 = t_cip4\nt_cip7=303\nt_cip8=298\nt_cip11=313\nt_cip10 = t_cip3\nt_cip12 = t_cip4\nt_cipsteam = 373\n```\n:::\n\n\n### Mixer\n\nThe first component is an adiabatic mixer (enthalpy stays constant over the mixing). There are three different flows assumed to be water flow (according to pressure and temperature flows). Two in flows and on out flow. We can obtain the mass and energy balance at the mixer as follows:\n$$\n\\dot{m}_{CIP,1}cp_{water}T_{CIP,1}+\\dot{m}_{CIP,5}cp_{water}T_{CIP,5}=\\dot{m}_{CIP,2}cp_{water}T_{CIP,2}\n$${#eq-mixer_m1}\n$$\n\\dot{m}_{CIP,1}+\\dot{m}_{CIP,5}=\\dot{m}_{CIP,2}\n$${#eq-mixer_m2}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm_cip1 = m_cip2*(t_cip2-t_cip5)/(t_cip1-t_cip5) \nm_cip5 = m_cip2-m_cip1\n```\n:::\n\nHence, $m_{CIP,1}$ is equal to 1.2 $kg/s$ and $m_{CIP,5}$ is equal to 2.8 $kg/s$.\n\n### Heater\n\nThe next step is to compute balances of the upper HX (between Steam and point 2 and 3). At this HX, there is mixed water at $60^\\circ C$ which is heated to $80^\\circ C$. The steam used to heat up the water is assumed to be at 1 bar (costs saving reason). Again we have the following equations to compute the heat exchanged and the mass flow of steam (NB: mass flow of water is constant over the HX).\n$$\nQ_{CIPHX,steam}=\\dot{m}_{CIP,2}Cp_{water}(T_{CIP,3}-T_{CIP,2})\n$${#eq-CIPHXsteam1}\n\n$$\nQ_{CIPHX,steam}=\\dot{m}_{steam}h_{fg,steam}\n$${#eq-CIPHXsteam2}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nq_cipsteam = m_cip2*cp_water*(t_cip3-t_cip2)\nm_cipsteam = q_cipsteam/hfg_cipsteam\n\n# Splitting between CIP-3 and CIP-10 \np = 0.5 # assumed for ease of calculation\nm_cip3 = m_cip2*p\nm_cip10 = m_cip2*(1-p)\n```\n:::\n\nThere is 334.72 $kW$ heat exchanged thanks to a 0.1483031 $kg/s$ steam flow. \n\n### Showers\n\nIt has been assume for ease of calculation that both showers received the same exact mass flow of hot water. Thus, $\\dot{m}_{3} = \\dot{m}_{4} = \\dot{m}_{10} = \\dot{m}_{12}= \\dot{m}_{shower}=\\frac{\\dot{m}_2}{2}$  Furthermore, it is assumed that there is no heat loss through radiation. It is also assumed the mass of the bottle will stay constant the entire process (from part 8 to part 11) and thus: $\\dot{m}_8 = \\dot{m}_9 = \\dot{m}_{11} = \\dot{m}_{glass}$. \n\nThe heat balance for the first shower is as followed:\n$$ \\dot{m}_{glass}c_{p,glass}(T_9-T_8)=\\dot{m}_{shower}c_{p,water}(T_{3}-T_4)$$\nThen for shower 2:\n$$ \\dot{m}_{glass}c_{p,glass}(T_{11}-T_9)=\\dot{m}_{shower}c_{p,water}(T_{10}-T_{12})$$\n\n::: {.cell}\n\n```{.r .cell-code}\nQ_shower=m_cip3*cp_water*(t_cip3-t_cip4) #same w/ m_cip4\nt_cip9=(t_cip11+t_cip8)/2\nm_cipglass = Q_shower/(cp_glass*(t_cip9-t_cip8))\nm_cip8 = m_cipglass\nm_cip9 = m_cipglass\nm_cip11 = m_cipglass\n```\n:::\n\nThus, there is 41.84 $kW$ of heat used at each shower and bottle flow rate is 6.6412698 $kg/s$.\n\n### Splitter\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm_cip4 = m_cip3\nm_cip6 = 2*m_cip4-m_cip5\nm_cip12 = m_cip4\n```\n:::\n\nNo heat exchanged. Only mass flows such that $$ \\dot{m}_{4}+\\dot{m}_{12}=\\dot{m}_{2}=\\dot{m}_{5}+\\dot{m}_{6}$$\nThis gives $\\dot{m}_6$ is equal to 1.2 $kg/s$.\n\n### Cooler\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt_cwater_in = 283\nt_cwater_out = 298\nm_cip7 = m_cip6\nq_cipwater = m_cip6*(t_cip6-t_cip7)*cp_water\nm_cipwater = q_cipwater/((t_cwater_out-t_cwater_in)*cp_water)\n```\n:::\n\n\nThe final steps of this cleaning process is with the of a HX as a cooler. hot water will be cooled down to $30^\\circ C$. \nAs showed above with calculations for the HX_Steam there is thus  225.94 $kW$ transferred thanks to a 3.6 $kg/s$ cooling water flow (which is itself going from $10^\\circ C$ to $25^\\circ C$).\n\n### Summary for the Cleaning in Place section\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-649c5a9f81ce6ff92924\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-649c5a9f81ce6ff92924\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],[1.2,4,2,2,2.8,1.2,1.2,6.641269841269842,6.641269841269842,2,6.641269841269842,2],[298,333,353,348,348,348,303,298,305.5,353,313,348]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Points<\\/th>\\n      <th>Mass.Flow..kg.s.<\\/th>\\n      <th>Temperature...C.<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[2,3]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-32a4efc68f708b759324\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-32a4efc68f708b759324\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\"],[\"Steam\",\"Shower 1\",\"Shower 2\",\"Cooler\"],[334.72,41.84,41.84,225.936]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Points<\\/th>\\n      <th>Heat..kW.<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":2},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n## Cold Storage & Hot Water\n\nHere are reported calculation of air mass flow required to remove 500kW of heat from a cold storage and the heat required to heat 1kg/s of water from 15Â°C to 55Â°C.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom pyxosmose.state import State\n\nwater_in = State(pair='TP',fluid='Water',temperature=288,pressure=100000)\nwater_in.StateCalc()\nwater_out = State(pair='TP',fluid='Water',temperature=328,pressure=100000)\nwater_out.StateCalc()\n\nh_in=water_in.enthalpy \nm_water=1\nh_out=water_out.enthalpy \nQ_hot=m_water*(h_out-h_in)\n#print Q_hot rounded at 2 digits\nprint('The heat required to heat 1kg/s of water from 15Â°C to 55Â°C is', round(Q_hot,2), 'W.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe heat required to heat 1kg/s of water from 15Â°C to 55Â°C is 167253.23 W.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nT_in=273\nT_out=268\nQ_fridge=500000\nCp_air=1000\nm_air=Q_fridge/(Cp_air*(T_in-T_out))\nprint('The air mass flow required to remove 500kW of heat from a cold storage is', m_air, 'kg/s.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe air mass flow required to remove 500kW of heat from a cold storage is 100.0 kg/s.\n```\n:::\n:::\n\n\n## WasteWater and Sludge Production \n\n![Wastewater](Figures/Wastewater.svg)\n\nFor this process we just have to focus on computing liquid and dry matter mass flows for each of the 4 flows ($dw_{tot}=dw_{dry}+dw_{liq}$). The discharge will only contains liquid water whereas the sludge is a mixture of 13.3wt% fry matter and 86.7wt% water (@shiDairyProcessingSludge2021). From this paper, the following equations enables to deduce the waste water produced (WP) as well as the sludge produced (SP):\n\n$$\nWP = WRM \\times RM\n$${#eq-WP}\n\n$$\nSP = SW \\times WP\n$${#eq-SP}\n\n$$\nSW = \\frac{\\frac{ES}{RMa}}{WRM}\n$${#eq-SW}\n\nWhere $WRM$ is the wastewater to raw milk ratio (-) and $RM$ is the Raw Milk processing volume ($m^3/s$), $SW$  is the sludge to wastewater ratio ($kg/m^3$), $ES$ is the estimated annual sludge produced ($kg$), $RMa$ is the annual milk production ($m^3$), $WP$ is the wastewater produced ($m^3/s$) and $SP$ is the amount of sludge produced ($kg/s$).\n\nFrom the data given we have that $RM=8kg/s$ and Asherruzzaman gives us that $WRM=2.71\\pm 0.9$ in average. \nThus the produced waste water is $0.021 m^3/s$ given a milk density of $1035kg/m^3$.\n\nThen from 2017 data in Asherruzzaman we have that $ES=110000t$, $RMa=7163000m^3$ and thus $SW=\\frac{\\frac{110000000}{7163000}}{2.71}=5.59kg/m^3$. Thus the produced sludge is $SP = 5.59 \\times 0.021 = 0.1174\\text{kg/s}$.\n\nThere is also the assumption that dw3 is only sludge and dw4 only water ($dw_{tot2}=dw_{tot3}+dw_{tot4}$).\nIn dw3, the quantity of dry matter is again assume to be 13.3wt% and thus the quantity of water is 86.7wt%.\nThe total mass entering the system is WP and because of mass balance, the dry quantity exiting at dw3 must be the same that at dw2 and dw1 (because there is no dry matter in dw4).\nFinally, we assume that WP density is around that of water (1000kg/m3).\nThus, we have the following table to sum up the results:\n\n| Stream | $\\dot{m}_{dry}\\,(kg/s)$ | $\\dot{m}_{liquid}\\,(kg/s)$ |$\\dot{m}_{total}$  |\n|--------|:-----------------------:|:-------------------------:|:-----------------:|\n| dw1    | 0.0156  | 20.9844 |21|\n| dw2    |0.0156 |20.9844  |21|\n| dw3    |0.01561  |0.1018 |0.1174|\n| dw4    |0  |20.8826  |20.8826|\nTable:Discharge water and sludge production streams mass composition\n\n\n## Rivella Production\n\n![Rivella](Figures/Rivella.svg)\n\nHaving a better understanding of dairy process, it is now possible to evaluate the energy and mass balance of Rivella production to be able to compare later its costs with the digester.\nThe process is described in the following figure:\n\nThe process will be divided in 3 main parts:\n\n1. The concentration of the whey \n2. The production of Rivella Green \n3. The production of Rivella Red\n\n### The concentration of the whey\n\nAll the whey is assumed to come from the evaporator stage with the following characteristics:\n\n* 14.46 % of dry matter, \n* 85.54 % of water, \n* T = 4Â°C, \n* p = 1 bar,\n* mass flow rate of 1.52 kg/s.\n\nAt the end of the concentration process the whey will have the following characteristics:\n\n* 50 % of dry matter, \n* 50 % of water, \n* T = 100Â°C, \n* p = 1 bar,\n* mass flow rate to be determined.\n\nWe assume, the following: in the fermentation we have heating from 4 to 25Â°C, the mixer is isothermal and the evaporator is adiabatic.\nAlso the bacterias are added at T = 25Â°C and without disturbing the flow rate of the whey (m1 = m3, m4 = 0 $m/ s$) and the aromas are added at T = 25Â°C with 2g aromas/100g of whey.\nBacteria and aromas have the same heat capacity as water ($c_p=4184\\,J/kgK$).\nThe pressure stays constant at 1 bar.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom codes_01_energy_bill.coolprop_functions import mixture\nfrom pyxosmose.state import State\n\n#Fixed Parameters\nm1=1.52 #kg.s-1\nm2=0 #kg.s-1\nm3=1.52 #kg.s-1\nm4=0.02*m3 #kg.s-1\nm5=m3+m4 #kg.s-1\n#to get m6 we assume that R6 is only water and that the flow is a mixture of fat and water\n#m6=1*mw6+0*mf6 so m6=mw6\n#mw7=0.5m7=0.5*(m5-m6)\n#mw6=mw5-mw7=0.8554*m5-0.5*(m5-m6)\n#m6=[0.8554*m5-0.5*m5]/0.5\nm6=(0.8554*m5-0.5*m5)/0.5 #kg.s-1\nm7=m5-m6 #kg.s-1\n\nT1=277 #K\nT2=298 #K\nT3=T2 #K\nT4=T2 #K\nT5=T2 #K\nT6=373 #K\nT7=T6 #K\n\nTsteam_out = 373 #K\n\np=1 #bar\n\nR1 = mixture(T=T1, P=p, frac_water=0.8554, frac_fat=0.1446) # this is a dictionary!!\ncp1=R1[\"cpmass\"]\nh1=R1[\"enthalpy\"]\n\n#Fermentation \nQferm = m1*cp1*(T2-T1) #J/s\n\n#Evaporator\nTsteam=373 #K\nSteam = State(pair='TP', fluid='water', temperature=Tsteam, pressure=p)\nSteam.StateCalc()\nState_Steam = Steam.__dict__ # Whole dictionary with properties\nhfg=State_Steam[\"enthalpy\"]\n\nh5=h1\ncp5=cp1\n\nR6 = mixture(T=T6, P=p, frac_water=1, frac_fat=0) # this is a dictionary!!\nh6=R6[\"enthalpy\"]\n\nR7 = mixture(T=T7, P=p, frac_water=0.5, frac_fat=0.5) # this is a dictionary!!\nh7=R7[\"enthalpy\"]\ncp7=R7[\"cpmass\"]\n\nQevap = m5*cp5*(T7-T5) - m5*h5 + m6*h6 + m7*h7 #J/s\nmsteam = Qevap/hfg #kg/s\nprint('Qevap =', round(Qevap,2), 'W')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nQevap = 579418.18 W\n```\n:::\n:::\n\n\n### The production of Rivella Green \n\n30% of the concentrated whey is used for the Rivella Green production\nThe composition of the Rivella Green is the following: \n\n* 30% whey,\n* 50% water,\n* 20% sugar.\n\nTea is added at T = 50Â°C, without disturbing the flow rate of the Rivella Green (m8 = m10, m9 = 0 m/s) \nThe sugar and water are added are added at T = 25Â°C (will thus cool the fluid and reduce the requirement for a steep change through HX2) and thus the mixer 3 is not isothermal anymore.\nCO2 is added without change of temperature and pressure (isothermal mixer) and without changing the mass flow (the content of gas in each bottle is not known).\nThe Rivella Green exits at T = 10Â°C.\nThe pressure stays constant at 1 bar during the entire production.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#Fixed Parameters\nm8=0.3*m7 #kg.s-1\nm10=m8 #kg.s-1\nm9=0 #kg.s-1\n\nTA=298 #K ref temperature\nT8=323 #K\nT9=323 #K\nT10=T8\nT11=298\nT12=T11\nT16=283 #K\nT14=T16\nT15=T16\n\n#HX1: heater\nQHX1=m7*cp7*(T7-T8) #J/s\n\n#Mixer 3\n#We first have to determine the different flows of this non-isothermal mixer\n#we will use the composition of Rivella Green and assume water comes from both R10 (50% of the conc whey) and R11\n#m13=m10+m11+m12\n#m11=0.5*m13-0.5*m10\n#m12=0.2*m13\n\nm13=(0.5*m10)/0.3 #kg.s-1\nm14=m13\nm16=m14\nm11=0.5*m13-0.5*m10\nm12=0.2*m13\n\nR10 = mixture(T=T10, P=p, frac_water=0.5, frac_fat=0.5) # this is a dictionary!!\ncp10=R10[\"cpmass\"]\n\nR11 = mixture(T=T11, P=p, frac_water=1, frac_fat=0) # this is a dictionary!!\ncp11=R11[\"cpmass\"]\nh11=R11[\"enthalpy\"]\n\ncp12=1224 #J/kgK\n\ncp13 = 0.3*cp10 + 0.5*cp11 + 0.2*cp12\n\n#From the heat balance of non-isothermal mixer we can then determine the temperature of the Rivella Green T13\n#m13*cp13*(T13-TA)=m10*cp10*(T10-TA)+m11*cp11*(T11-TA)+m12*cp12*(T12-TA)\n\nT13=((m10*cp10*(T10-TA)+m11*cp11*(T11-TA)+m12*cp12*(T12-TA))/(m13*cp13))+TA\n\n#HX2: cooler1\nQHX2=m13*cp13*(T13-T14) #J/s\n\nprint(' QHX1 =', round(QHX1,2), 'W', '\\n', 'QHXgreen =', round(QHX2,2), 'W')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n QHX1 = 40112.41 W \n QHXgreen = 12711.81 W\n```\n:::\n:::\n\n\n### The production of Rivella Red \n\n70% of the concentrated whey is used for the Rivella Red production.\nThe composition of the Rivella Red is the following: \n\n* 30% whey,\n* 35% water,\n* 35% sugar.\n\nThe sugar and water are added are added at T = 25Â°C (will thus cool the fluid and reduce the requirement for a steep change through HX2) and thus the mixer 3 is not isothermal anymore.\nCO2 is added without change of temperature and pressure (isothermal mixer) and without changing the mass flow (because the content of gas in each bottle is not known).\nThe Rivella Red exits as Rivella Green at T = 10Â°C.\nThe pressure stays constant at 1 bar during the entire production.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#Fixed Parameters\nm17=0.7*m7 #kg.s-1\n\nT17=T8 #K\nT18=T11\nT19=T11\nT23=T16 #K\nT22=T23\nT21=T23\n\n#Mixer 4\n#We first have to determine the different flows of this non-isothermal mixer\n#we will use the composition of Rivella Green and assume water comes from both R17 (50% of the conc whey) and R18\n#m20=m17+m18+m19\n#m18=0.35*m20-0.5*m17\n#m19=0.35*m20\nm20=(0.5*m17)/0.3 #kg.s-1\nm21=m20\nm23=m21\nm18=0.35*m20-0.5*m17\nm19=0.35*m20\n\nR17 = mixture(T=T17, P=p, frac_water=0.5, frac_fat=0.5) # this is a dictionary!!\ncp17=R17[\"cpmass\"]\nh17=R17[\"enthalpy\"]\n\nR18 = mixture(T=T18, P=p, frac_water=1, frac_fat=0) # this is a dictionary!!\ncp18=R18[\"cpmass\"]\nh18=R18[\"enthalpy\"]\n\ncp19=1224 #J/kgK\n\ncp20 = 0.3*cp17 + 0.35*cp18 + 0.35*cp19\n\n#From the heat balance of non-isothermal mixer we can then determine the temperature of the Rivella Green T13\n#m20*cp20*(T20-TA)=m17*cp17*(T17-TA)+m18*cp18*(T18-TA)+m19*cp19*(T19-TA)\n\nT20=((m17*cp17*(T17-TA)+m18*cp18*(T18-TA)+m19*cp19*(T19-TA))/(m20*cp20))+TA\n#HX2: cooler1\nQHX3=-m20*cp20*(T21-T20) #J/s\n\nprint('QHXred =', round(QHX3,2), 'W')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nQHXred = 28907.2 W\n```\n:::\n:::\n\n\n### Summary for the Rivella production section\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#Put everything in a dataframe\nfrom IPython.display import HTML\nimport pandas as pd\nimport numpy as np\n\n#Compute remaining enthalpies and heat capacities\n\ncp2=4184 #J/kgK\n\nh3=h1\ncp3=cp1\n\ncp4=4184 #J/kgK\n\nR6 = State(pair='TP', fluid='water', temperature=T6, pressure=p)\nR6.StateCalc()\nState_R6 = R6.__dict__ # Whole dictionary with properties\nh6=State_R6[\"enthalpy\"]\ncp6=State_R6[\"cpmass\"]\n\nR8 = mixture(T=T8, P=p, frac_water=0.5, frac_fat=0.5) \nh8=R8[\"enthalpy\"]\ncp8=R8[\"cpmass\"]\n\nh10=h8\ncp10=cp8\n\nh12=0 #CHECKKKKKKKKKKK HOW TO GET ENTHALPY SUGAR \n#m13*h13=m10*h10+m11*h11+m12*h12\nh13=((m10*h10+m11*h11+m12*h12)/m13)\n\n#m13(h13-h14)=m13*cp13*(T13-T14)\nh14=h13-m13*cp13*(T13-T14)\ncp14=cp13 #assume no change of cp with cooling for Rivella Green\n\nh16=h14\ncp16=cp13\n\nh19=h16 #CHECKKKKKKKKKKK HOW TO GET ENTHALPY SUGAR\n\n#m20*h20=m17*h17+m18*h18+m19*h19\nh20=((m17*h17+m18*h18+m19*h19)/m20)\n\n#m20(h20-h21)=m20*cp20*(T20-T21)\nh21=h20-m20*cp20*(T20-T21)\ncp21=cp20 #assume no change of cp with cooling for Rivella Red\n\nh23=h21\ncp23=cp20\n\n#Create a dataframe with all the parameters\n\nRivella = pd.DataFrame(columns=['Point', 'Temperature (K)', 'Pressure (bar)', 'Mass flow rate (kg/s)', 'Heat capacity (J/kgK)', 'Enthalpy (J/kg)'])\nRivella['Point']=['1', '2', '3', '4', '5', '6', '7', '8', '9', '10','11','12','13','14','15','16','17','18','19','20','21','22','23']\nRivella['Temperature (K)']=[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23]\nRivella['Pressure (bar)']=[p,p,p,p,p,p,p,p,p,p,p,p,p,p,p,p,p,p,p,p,p,p,p]\nRivella['Mass flow rate (kg/s)']=[m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,'',m16,m17,m18,m19,m20,m21,'',m23]\nRivella['Heat capacity (J/kgK)']=[cp1,cp2,cp3,cp4,cp5,cp6,cp7,cp8,'',cp10,cp11,cp12,cp13,cp14,'',cp16,cp17,cp18,cp19,cp20,cp21,'',cp23]\nRivella['Enthalpy (J/kg)']=[h1,'',h3,'',h5,h6,h7,h8,'',h10,h11,'h12',h13,h14,'',h16,h17,h18,h19,h20,h21,'',h23]\nRivella = Rivella.set_index('Point')\nRivella = Rivella.round(2)\nHTML(Rivella.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Temperature (K)</th>\n      <th>Pressure (bar)</th>\n      <th>Mass flow rate (kg/s)</th>\n      <th>Heat capacity (J/kgK)</th>\n      <th>Enthalpy (J/kg)</th>\n    </tr>\n    <tr>\n      <th>Point</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>277.00</td>\n      <td>1</td>\n      <td>1.52</td>\n      <td>1896.854714</td>\n      <td>2023742.226974</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>298.00</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4184</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>298.00</td>\n      <td>1</td>\n      <td>1.52</td>\n      <td>1896.854714</td>\n      <td>2023742.226974</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>298.00</td>\n      <td>1</td>\n      <td>0.0304</td>\n      <td>4184</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>298.00</td>\n      <td>1</td>\n      <td>1.5504</td>\n      <td>1896.854714</td>\n      <td>2023742.226974</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>373.00</td>\n      <td>1</td>\n      <td>1.102024</td>\n      <td>1889.734714</td>\n      <td>2688396.124217</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>373.00</td>\n      <td>1</td>\n      <td>0.448376</td>\n      <td>1789.232083</td>\n      <td>1190483.719342</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>323.00</td>\n      <td>1</td>\n      <td>0.134513</td>\n      <td>2002.408006</td>\n      <td>923714.318925</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>323.00</td>\n      <td>1</td>\n      <td>0</td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>323.00</td>\n      <td>1</td>\n      <td>0.134513</td>\n      <td>2002.408006</td>\n      <td>923714.318925</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>298.00</td>\n      <td>1</td>\n      <td>0.044838</td>\n      <td>1864.353548</td>\n      <td>2547701.452782</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>298.00</td>\n      <td>1</td>\n      <td>0.044838</td>\n      <td>1224</td>\n      <td>h12</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>314.90</td>\n      <td>1</td>\n      <td>0.224188</td>\n      <td>1777.699176</td>\n      <td>1063768.881911</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>283.00</td>\n      <td>1</td>\n      <td>0.224188</td>\n      <td>1777.699176</td>\n      <td>1051057.070948</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>283.00</td>\n      <td>1</td>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>283.00</td>\n      <td>1</td>\n      <td>0.224188</td>\n      <td>1777.699176</td>\n      <td>1051057.070948</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>323.00</td>\n      <td>1</td>\n      <td>0.313863</td>\n      <td>2002.408006</td>\n      <td>923714.318925</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>298.00</td>\n      <td>1</td>\n      <td>0.026155</td>\n      <td>1864.353548</td>\n      <td>2547701.452782</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>298.00</td>\n      <td>1</td>\n      <td>0.183087</td>\n      <td>1224</td>\n      <td>1051057.070948</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>315.86</td>\n      <td>1</td>\n      <td>0.523105</td>\n      <td>1681.646144</td>\n      <td>1049483.638826</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>283.00</td>\n      <td>1</td>\n      <td>0.523105</td>\n      <td>1681.646144</td>\n      <td>1020576.433841</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>283.00</td>\n      <td>1</td>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>283.00</td>\n      <td>1</td>\n      <td>0.523105</td>\n      <td>1681.646144</td>\n      <td>1020576.433841</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n\n```{.python .cell-code}\n#print a data frame with the heating value of the 3 hex\nHX = pd.DataFrame(columns=['HX', 'Heat exchanged (W)'])\nHX['HX']=['Evap', 'HX1', 'HX green', 'HX red']\nHX['Heat exchanged (W)']=[Qevap, QHX1,QHX2,QHX3]\nHX = HX.set_index('HX')\nHX = HX.round(2)\nHTML(HX.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Heat exchanged (W)</th>\n    </tr>\n    <tr>\n      <th>HX</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Evap</th>\n      <td>579418.18</td>\n    </tr>\n    <tr>\n      <th>HX1</th>\n      <td>40112.41</td>\n    </tr>\n    <tr>\n      <th>HX green</th>\n      <td>12711.81</td>\n    </tr>\n    <tr>\n      <th>HX red</th>\n      <td>28907.20</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n## Digester\n\n![Digester](Figures/Digester.svg)\n\nThe digester module aims to use sludge, consider as trash in milk production, to produce biogas and then make profits of it. In this project, all the whey and only whey is used for rivella production and all the sludge and only sludge is used for biogas production. This module is composed of a digestor to produce biogas, a rotary filter to eliminate some water, and a steam dryer to obtain as output dryed digestate. In order to compute the mass flow and energy balance of the digester module, the computation are split in three parts: the digestor, the rotary filter and the steam dryer. \n\n### Digestor\n\nTo compute the biogas production, the following equation is used:\n\n$$\n\\text{Biogas}(t) = \\sum_{i=1}^{n} \\text{Flow}(i) \\cdot \\text{BMP}(i) \\cdot \\text{TS}(i) \\cdot \\text{VS}(i) \\cdot (1 - e^{-k_i t})\n$${#eq-biogas}\n\nFrom litterature @holligerMethaneProductionFullScale2017, in table 2, data for waste sludge are the following:\n\n- $\\text{TS}_\\text{sludge}$ = 0.037 \n- $\\text{VS}_\\text{sludge}$ = 0.742\n- $\\text{BMP}_\\text{sludge}$ = 0.407 $m^3_{CH4}/kg_{VS}$\n\nConsidering 90 % conversion achieved for the given residence time and only sludge is used, the @eq-biogas can be rewrite as: \n\n$$\n\\text{Biogas}(t) = \\text{Flow}_\\text{sludge} \\cdot \\text{BMP}_\\text{sludge} \\cdot \\text{TS}_\\text{sludge} \\cdot \\text{VS}_\\text{sludge} \\cdot 0.90\n$${#eq-biogas_simplified}\n\nKnown data:\n\n- $d_\\text{1,dry}$ = $d_\\text{w3,dry}$ = 0.01561 kg/s\n- $d_\\text{1,liquid}$ = $d_\\text{w3,liquid}$ = 0.1018 kg/S\n- $CH4_\\text{in biogas}$ = 0.55 kg_CH4/kg_biogas (55% CH4 in biogas)\n- $U_\\text{digester}$ = 2.5 W/m2/Â°C\n- $T_\\text{digester}$ = 55Â°C\n- $T_\\text{in}$ = 20Â°C\n- Ratio H/D = 0.6\n- Minimum biogas expansion volume: 15%\n\nAssumptions:\n\n- p = 100000 Pa = 1 bar\n- $\\rho_\\text{biogas}$ = 1.15 kg/m3\n- $cp_\\text{flow}$ = 4180 J/kg/Â°C\n- $\\rho_\\text{CH4}$ = 0.657 kg/m3\n- 20 days of residence time\n- No water in biogas d3\n\n#### Mass Flow\n\nWith those informations, the mass flow balance can be computed:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\nimport pandas as pd\nfrom codes_01_energy_bill.coolprop_functions import mixture\nfrom pyxosmose.state import State\n\np=100000 #Pa\nTS_sludge = 0.037\nVS_sludge = 0.742\nBMP_sludge = 0.407 # m3_CH4/kg_VS\nd1_dry = 0.01561\nd1_liquid = 0.1018\nd1 = d1_dry + d1_liquid\nconversion_factor = 0.90\nCH4_density = 0.657 # kg/m3\nCH4_in_biogas = 0.55 # kg_CH4/kg_biogas (55% CH4 in biogas)\nbiogas_density = 1.15 # kg/m3\nbiogas_expansion = 0.15\nU_digester = 2.5 # W/m2/Â°C\nT_digester = 55+273 # K\nT_in = 20+273 # K\ncp_flow = 4180 # J/kg/Â°C\n\nd3 = d1 * BMP_sludge * TS_sludge * VS_sludge * conversion_factor * CH4_density / CH4_in_biogas # kg/s\nd2 = d1 - d3\n\nd2_liquid = d1_liquid # Assumption : no water in biogas d3\nd2_dry = d2 - d2_liquid\n\n# print d1, d2, d3 in a dataframe\ndata = {'Point': ['1', '2', '3'],\n        'Dry Mass flow (kg/s)': [d1_dry, d2_dry, d3],\n        'Liquid Mass flow (kg/s)': [d1_liquid, d2_liquid, 0],\n        'Total Mass flow (kg/s)': [d1, d2, d3]}\ndf = pd.DataFrame(data)\ndf = df.set_index('Point')\ndf = df.round(4)\nHTML(df.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Dry Mass flow (kg/s)</th>\n      <th>Liquid Mass flow (kg/s)</th>\n      <th>Total Mass flow (kg/s)</th>\n    </tr>\n    <tr>\n      <th>Point</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0.0156</td>\n      <td>0.1018</td>\n      <td>0.1174</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.0142</td>\n      <td>0.1018</td>\n      <td>0.1160</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.0014</td>\n      <td>0.0000</td>\n      <td>0.0014</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n#### Digestor Geometry\n\n$$\nV_\\text{biogas} = \\frac{d_3 \\cdot \\text{time}}{\\rho_\\text{biogas}}\n$${#eq-Vbiogas}\n\n$$\nV_\\text{digester} = V_\\text{biogas} \\cdot (1 + \\text{biogas expansion})\n$${#eq-Vdigester}\n\n$$\nD = \\left( \\frac{4 \\cdot V_\\text{digester}}{0.6 \\cdot \\pi} \\right)^{1/3}\n$${#eq-D}\n\n$$\nH = 0.6 \\cdot D\n$${#eq-H}\n\n$$\nA = \\pi \\cdot D \\cdot H + 2 \\cdot \\pi \\left( \\frac{D}{2} \\right)^2\n$${#eq-A}\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Compute the Volume\ntime = 20 * 24 * 3600 # 20 days in seconds\nV_biogas= d3 * time / biogas_density # m3\n\n# Compute the surface area\nV_digester = V_biogas * (1 + biogas_expansion) # m3\n\nD = (4 * V_digester / (0.6 * np.pi))**(1/3) \nH = 0.6 * D\nA = np.pi * D * H + 2 * np.pi * (D/2)**2 # cylindrical digester area\n\n# print in a dataframe the volume, the height, the diameter and the area of the digester\ndata = {'Point': ['Digester'],\n        'Volume (m3)': [V_digester],\n        'Diameter (m)': [D],\n        'Height (m)': [H],\n        'Area (m2)': [A]}\ndf = pd.DataFrame(data)\ndf = df.set_index('Point')\ndf = df.round(2)\nHTML(df.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Volume (m3)</th>\n      <th>Diameter (m)</th>\n      <th>Height (m)</th>\n      <th>Area (m2)</th>\n    </tr>\n    <tr>\n      <th>Point</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Digester</th>\n      <td>2437.22</td>\n      <td>17.29</td>\n      <td>10.38</td>\n      <td>1033.5</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n\nKnowing the surface area of the digester and the Heat transfer coefficient for well-insulated digester $U_\\text{digester}$, the heat loss can be computed:\n\n$$\nQ_\\text{digester} = U_\\text{digester} \\cdot A \\cdot (T_\\text{digester} - T_\\text{in})\n$${#eq-Qdigester}\n\n$$\nQ_\\text{flow} = cp_\\text{flow} \\cdot d_1 \\cdot (T_\\text{digester} - T_\\text{in})\n$${#eq-Qflow}\n\n$$\nQ_\\text{tot} = Q_\\text{digester} + Q_\\text{flow}\n$${#eq-Qtot}\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Compute the heat loss\nQ_digester = U_digester * A * (T_digester - T_in) # W\nQ_flow = cp_flow * d1 * (T_digester - T_in) # W\nQ_tot = Q_digester + Q_flow\n\n# print in a dataframe the 3 losses\ndata = {'Point': ['Digestor', 'Flow', 'Total'],\n        'Heat Loss (W)': [Q_digester, Q_flow, Q_tot]}\ndf = pd.DataFrame(data)\ndf = df.set_index('Point')\ndf = df.round(2)\nHTML(df.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Heat Loss (W)</th>\n    </tr>\n    <tr>\n      <th>Point</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Digestor</th>\n      <td>90431.39</td>\n    </tr>\n    <tr>\n      <th>Flow</th>\n      <td>17177.08</td>\n    </tr>\n    <tr>\n      <th>Total</th>\n      <td>107608.48</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n### Rotary filter\n\nThe rotary filter does not consume any heat. It is considered as a mechanical device only. The mass flow is computed as follow:\n\n- only water is removed: $d_{5,\\text{dry}} = d_{2,\\text{dry}}$\n- d5 is composed of 50% wt. H2O (w.b.): $d_{5,\\text{liquid}} = d_{5,\\text{dry}}$\n- $d_5 = d_{5,\\text{dry}} + d_{5,\\text{liquid}}$\n- d4 is fully liquid: $d_4 = d_{2,\\text{liquid}} - d_{5,\\text{liquid}}$\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#Rotary Filter\nd5_dry = d2_dry\nd5_liquid = d5_dry\nd5 = d5_dry + d5_liquid\nd4 = d2_liquid - d5_liquid\n\n# print in a data frame the mass flow of dry and liquid for point 4 and 5 and the total mass flow for point 4 and 5\ndata = {'Point': ['4', '5'],\n        'Dry Mass flow (kg/s)': [0, d5_dry],\n        'Liquid Mass flow (kg/s)': [d4, d5_liquid],\n        'Total Mass flow (kg/s)': [d4, d5]}\ndf = pd.DataFrame(data)\ndf = df.set_index('Point')\ndf = df.round(4)\nHTML(df.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Dry Mass flow (kg/s)</th>\n      <th>Liquid Mass flow (kg/s)</th>\n      <th>Total Mass flow (kg/s)</th>\n    </tr>\n    <tr>\n      <th>Point</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>0.0000</td>\n      <td>0.0876</td>\n      <td>0.0876</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.0142</td>\n      <td>0.0142</td>\n      <td>0.0284</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n### Steam dryer\n\nThe steam dryer target is to reduced the water composition of the digestate from 50% to 5%. It is assumed that $h_\\text{steam}$ = 2250000 J/kg at T = 100Â°C.\n\nThe energy required to evaporate the water is computed as follow:\n$$\nQ_\\text{sd} = d_5 \\cdot (0.5 - 0.05) \\cdot h_\\text{steam}\n$${#eq-Qsd}\n\nAssumptions:\n\n- $T_7$ = 150Â°C\n- $T_8$ = 130Â°C\n\nKnowing this energy, the mass flow of the steam is computed as follow:\n\n- 90% of the water in d5 is removed: $d_6 = d_5 - 0.9 \\cdot d_{5,\\text{liquid}}$\n- $d_7 = d_8 = \\frac{Q_{sd}}{cp7 * (T_7 - T_8)}$\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Steam dryer\nh_steam = 2250000 # J/kg source wikipedia at T = 100Â°C\nQ_sd = d5 * (0.5-0.05) * h_steam # W from 50% to 5% water\nprint('Q_sd = ', Q_sd, 'W')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nQ_sd =  28754.13727822047 W\n```\n:::\n\n```{.python .cell-code}\nd6 = d5 - 0.9 * d5_liquid # 90% of the water in d5 is removed\n\nT7 = 150 + 273 # Â°C  --> is an assumption\nT8 = 130 + 273 # Â°C  --> is an assumption\n\npoint7 = State(pair='TP', fluid='water', temperature=T7, pressure=p)\npoint7.StateCalc()\npoint7 = point7.__dict__ # Whole dictionary with properties\nh7=point7[\"enthalpy\"]\ncp7=point7[\"cpmass\"]\nd7 = Q_sd / (cp7 * (T7 - T8)) # kg/s\nd8 = d7 + d5*0.9\n\n# print in a dataframe the mass flow of dry and liquid for point 6, 7 and 8 and the total mass flow for point 6, 7 and 8\ndata = {'Point': ['6', '7', '8'],\n        'Dry Mass flow (kg/s)': [d6*0.05, 0, 0],\n        'Liquid Mass flow (kg/s)': [d6*0.95, d7, d8],\n        'Total Mass flow (kg/s)': [d6, d7, d8]}\ndf = pd.DataFrame(data)\ndf = df.set_index('Point')\ndf = df.round(4)\nHTML(df.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Dry Mass flow (kg/s)</th>\n      <th>Liquid Mass flow (kg/s)</th>\n      <th>Total Mass flow (kg/s)</th>\n    </tr>\n    <tr>\n      <th>Point</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6</th>\n      <td>0.0008</td>\n      <td>0.0148</td>\n      <td>0.0156</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.0000</td>\n      <td>0.7244</td>\n      <td>0.7244</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0.0000</td>\n      <td>0.7499</td>\n      <td>0.7499</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n### Summary for the digester section\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#Create a dataframe with all the parameters\n\nT1= T_in\nT2= T_digester\nT3= T2\nT4= T2\nT5= 373\nT6= T5\n\ndata = {'Point': ['1', '2', '3', '4', '5', '6', '7', '8'],\n        'Temperature (K)': [T1, T2, T3, T4, T5, T6, T7, T8],\n        'Pressure (bar)': [p, p, p, p, p, p, p, p],\n        'Mass flow rate (kg/s)': [d1, d2, d3, d4, d5, d6, d7, d8]}\ndf = pd.DataFrame(data)\ndf = df.set_index('Point')\ndf = df.round(4)\nHTML(df.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Temperature (K)</th>\n      <th>Pressure (bar)</th>\n      <th>Mass flow rate (kg/s)</th>\n    </tr>\n    <tr>\n      <th>Point</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>293</td>\n      <td>100000</td>\n      <td>0.1174</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>328</td>\n      <td>100000</td>\n      <td>0.1160</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>328</td>\n      <td>100000</td>\n      <td>0.0014</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>328</td>\n      <td>100000</td>\n      <td>0.0876</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>373</td>\n      <td>100000</td>\n      <td>0.0284</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>373</td>\n      <td>100000</td>\n      <td>0.0156</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>423</td>\n      <td>100000</td>\n      <td>0.7244</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>403</td>\n      <td>100000</td>\n      <td>0.7499</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n\n```{.python .cell-code}\n#print dataframe with Q_tot (named as Q_digestor in the table) and Q_sd\ndata = {'Point': ['Digestor', 'Steam Dryer'],\n        'Q (W)': [Q_tot, Q_sd]}\ndf = pd.DataFrame(data)\ndf = df.set_index('Point')\ndf = df.round(2)\nHTML(df.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Q (W)</th>\n    </tr>\n    <tr>\n      <th>Point</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Digestor</th>\n      <td>107608.48</td>\n    </tr>\n    <tr>\n      <th>Steam Dryer</th>\n      <td>28754.14</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "02.00-process_description_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\r\n<link href=\"site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/datatables-binding-0.29/datatables.js\"></script>\r\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\r\n<link href=\"site_libs/dt-core-1.13.4/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\r\n<link href=\"site_libs/dt-core-1.13.4/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/dt-core-1.13.4/js/jquery.dataTables.min.js\"></script>\r\n<link href=\"site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}