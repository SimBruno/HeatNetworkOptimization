{
  "hash": "5795d561995fa899efe3454886a9aefe",
  "result": {
    "markdown": "::: {.cell}\n\n```{.python .cell-code}\n#Load csv files (dfevap, dfhx, dfrecap)\nimport pandas as pd\nimport numpy as np\n#Load csv files\ndfevap = pd.read_csv('dfevap.csv', sep = ',')\ndfhx = pd.read_csv('dfhx.csv', sep = ',')\ndfrecap = pd.read_csv('dfrecap.csv', sep = ',')\n```\n:::\n\n::: {.cell}\n\n:::\n\n# Exergy analysis and Energy bill\n\n## Exergy analysis\n\nTo evaluate the losses and inefficiencies in the dairy production, an exergy analysis is performed. The exergy analysis includes calculating heat losses for each component experiencing heat transfer, covering both pasteurization and evaporation processes. The ambient temperature is set at $T_a = 25Â°C + 273K = 293K$.\n\n### Pasteurization\n\n#### Refrigeration\n\n$$\nL_{milk-refr} = \\dot{m}_{in,m}c_{p,whm}[(T_{in} - T_{mix,o})-T_0\\ln(\\frac{T_1}{T_2})] \\\\\nL_{gw-refr}  = \\dot{m}_{gw,refr}c_{p,gw}[(T_{in,gw} - T_{out,gw})-T_0\\ln(\\frac{T_{in,gw}}{T_{out,gw}})] \\\\\nL_{refr} = L_{milk-refr} + L_{gw-refr}\n$$\n\n#### Past 1, Past 2, Past 5\n\n$$\nL_{past1,1}  = \\dot{m}_{in,m}c_{p,whm}[(T_{mix,o} - T_{past,cent})-T_0\\ln(\\frac{T_{mix,o}}{T_{past,cent}})] \\\\\nL_{past1,2}  = \\dot{m}_{out,m}c_{p,rm}[(T_{past,c} - T_{past,d})-T_0\\ln(\\frac{T_{past,c}}{T_{past,d}})] \\\\\nL_{past1} = L_{past1,1} + L_{past1,2}\n$$\n\n#### Past 3, Past 6\n\n$$\nL_{past3,1}  = \\dot{m}_{out,m}c_{p,rm}[(T_{past,a} - T_{past,b})-T_0\\ln(\\frac{T_{past,a}}{T_{past,b}})] \\\\\nL_{past3,2}  = \\dot{m}_{steam,3}[(h_{in,steam}-h_{out,steam})-T_0(s_{in,steam}-s_{out,steam})] \\\\\nL_{past3}  = L_{past3,1} + L_{past3,2}\n$$ \n\n#### Mixer\n\n$$\nL_{mixer,1}  = \\dot{m}_{cr,o}c_{p,cr}[(T_{crpast,a} - T_{crpast,x})-T_0\\ln(\\frac{T_{crpast,a}}{T_{crpast,x}})] \\\\\nL_{mixer,2} = \\dot{m}_{th}c_{p,alginate}[(T_{th} - T_{crpast,x})-T_0\\ln(\\frac{T_{th}}{T_{crpast,x}})] \\\\\nL_{mixer} = L_{mixer,1} + L_{mixer,2} \n$$\n\n\n#### Summary of Pasteurization Exergy Results\n\nEnergy_flow = 'kJ/s'\n\nVariables_Names = ['Refrigeration','Past1','Past2','Past3','Past4','Past5','Past6','Past7']\nVariables_Values = np.divide([Q_refrigeration,Q_past1,Q_past2,Q_past3,Q_past4,Q_past5,Q_past6,Q_past7],1000)\nVariables_Units =  Energy_flow \ndf_pasteurization_heat_flow = pd.DataFrame(data = {'Heat Flow': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})\n\n### Evaporation \n\n#### Heat Exchanger\n\n$$\\dot{L}_{HX}=\\dot{m}_{water}(h_{fg}-T_{a}s_{fg})-Q_{HX}(1-\\frac{T_{a}}{T_{c,lm}})$$\n\n#### Heat Evaporator\n\n$$\\dot{L}_{evaporator}=\\dot{m}_{milk}(h_{milk,in}-h_{milk,out})-\\dot{m}_{milk}T_{a}(s_{milk,in}-s_{milk,out})-\\dot{m}_{water}Cp_{water}[T_{out}-$$\n\n#### Splitter\nThere are no exergy losses in the spliiters since they are isenthalpic\n\n\n#### Total\n\n$$\\dot{L}_{evaporation}=\\Sigma\\dot{L}_{HX}+\\Sigma\\dot{L}_{evaporator}+\\Sigma\\dot{L}_{splitter}$$\n\n\n#### Results Exergy Analysis Evaporation\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\n#Heat exchangers\n```\n:::\n\n\n\nFurthermore, we highly encourage the use of a Sankey diagram to succinctly summarize your findings. We have provided an example of how to create an interactive Sankey diagram in R using the Plotly library. You can access the necessary function in the file `./sankey_ipese.R`. The following code chunk demonstrates how to utilize this function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"./sankey_ipese.R\") # introduce the sankey function from the source file\ndf = read.csv('atom_balance.csv',sep = '\\t') # replace the atom_balance.csv with your exergy analysis results\nsankey_ipese(df = df, unit = 'kmol/h', title = 'Example of an interactive Sankey diagram') # replace the unit and title here\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-d51ee5711ee3a7be9478\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d51ee5711ee3a7be9478\">{\"x\":{\"visdat\":{\"843c7647ef\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"843c7647ef\",\"attrs\":{\"843c7647ef\":{\"domain\":{\"x\":[0,1],\"y\":[0,0]},\"orientation\":\"h\",\"valueformat\":\".0f\",\"valuesuffix\":\"kmol/h\",\"node\":{\"label\":[\"crude : 81.95 kmol/h\",\"natural gas : 1.99 kmol/h\",\"water_SMR : 1.95 kmol/h\",\"air : 2.84 kmol/h\",\"refinery_carbon : 29.36 kmol/h\",\"refinery_hydrogen : 55.56 kmol/h\",\"refinery_nitrogen : 0.06 kmol/h\",\"refinery_oxygen : 3.58 kmol/h\",\"refinery_sulfur : 0.19 kmol/h\",\"naphtha : 15.29 kmol/h\",\"LPG : 3.97 kmol/h\",\"coke : 0.27 kmol/h\",\"diesel : 38.3 kmol/h\",\"gasoline : 15.7 kmol/h\",\"heavyfuel : 6.68 kmol/h\",\"kerosene : 0.32 kmol/h\",\"CO2_SMR : 1.11 kmol/h\",\"CO2_combustion : 3.55 kmol/h\",\"H2S : 0.51 kmol/h\",\"NH3 : 0.2 kmol/h\",\"water_boiler : 2.84 kmol/h\"],\"pad\":15,\"thickness\":2,\"color\":\"#DCDCDC\",\"line\":{\"color\":\"black\",\"width\":0.5}},\"link\":{\"source\":[0,1,0,1,2,0,0,2,3,0,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,7,7,8,8,8],\"target\":[4,4,5,5,5,6,7,7,7,8,9,10,11,12,13,14,15,16,17,9,10,11,12,13,14,15,18,19,20,11,14,19,16,17,11,14,18],\"value\":[28.949999999999999,0.40000000000000002,52.670000000000002,1.5900000000000001,1.3,0.059999999999999998,0.089999999999999997,0.65000000000000002,2.8399999999999999,0.17999999999999999,5.2400000000000002,1.1100000000000001,0.17000000000000001,13.58,5.3799999999999999,2.6899999999999999,0.11,0.37,0.70999999999999996,10.050000000000001,2.8599999999999999,0.089999999999999997,24.719999999999999,10.32,3.9700000000000002,0.20999999999999999,0.34000000000000002,0.14999999999999999,2.8399999999999999,0,0.01,0.050000000000000003,0.73999999999999999,2.8399999999999999,0.01,0.01,0.17000000000000001],\"label\":[\"carbon\",\"carbon\",\"hydrogen\",\"hydrogen\",\"hydrogen\",\"nitrogen\",\"oxygen\",\"oxygen\",\"oxygen\",\"sulfur\",\"carbon\",\"carbon\",\"carbon\",\"carbon\",\"carbon\",\"carbon\",\"carbon\",\"carbon\",\"carbon\",\"hydrogen\",\"hydrogen\",\"hydrogen\",\"hydrogen\",\"hydrogen\",\"hydrogen\",\"hydrogen\",\"hydrogen\",\"hydrogen\",\"hydrogen\",\"nitrogen\",\"nitrogen\",\"nitrogen\",\"oxygen\",\"oxygen\",\"sulfur\",\"sulfur\",\"sulfur\"],\"color\":[\"#B1DDF0\",\"#B1DDF0\",\"#D5E8D4\",\"#D5E8D4\",\"#D5E8D4\",\"#F8CECC\",\"#EEEEEE\",\"#EEEEEE\",\"#EEEEEE\",\"#FFFF88\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#D5E8D4\",\"#D5E8D4\",\"#D5E8D4\",\"#D5E8D4\",\"#D5E8D4\",\"#D5E8D4\",\"#D5E8D4\",\"#D5E8D4\",\"#D5E8D4\",\"#D5E8D4\",\"#F8CECC\",\"#F8CECC\",\"#F8CECC\",\"#EEEEEE\",\"#EEEEEE\",\"#FFFF88\",\"#FFFF88\",\"#FFFF88\"]},\"textfont\":{\"size\":12,\"color\":\"black\"},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"sankey\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Example of an interactive Sankey diagram\",\"font\":{\"size\":10},\"xaxis\":{\"showgrid\":false,\"zeroline\":false},\"yaxis\":{\"showgrid\":false,\"zeroline\":false},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"domain\":{\"x\":[0,1],\"y\":0},\"orientation\":\"h\",\"valueformat\":\".0f\",\"valuesuffix\":\"kmol/h\",\"node\":{\"label\":[\"crude : 81.95 kmol/h\",\"natural gas : 1.99 kmol/h\",\"water_SMR : 1.95 kmol/h\",\"air : 2.84 kmol/h\",\"refinery_carbon : 29.36 kmol/h\",\"refinery_hydrogen : 55.56 kmol/h\",\"refinery_nitrogen : 0.06 kmol/h\",\"refinery_oxygen : 3.58 kmol/h\",\"refinery_sulfur : 0.19 kmol/h\",\"naphtha : 15.29 kmol/h\",\"LPG : 3.97 kmol/h\",\"coke : 0.27 kmol/h\",\"diesel : 38.3 kmol/h\",\"gasoline : 15.7 kmol/h\",\"heavyfuel : 6.68 kmol/h\",\"kerosene : 0.32 kmol/h\",\"CO2_SMR : 1.11 kmol/h\",\"CO2_combustion : 3.55 kmol/h\",\"H2S : 0.51 kmol/h\",\"NH3 : 0.2 kmol/h\",\"water_boiler : 2.84 kmol/h\"],\"pad\":15,\"thickness\":2,\"color\":\"#DCDCDC\",\"line\":{\"color\":\"black\",\"width\":0.5}},\"link\":{\"source\":[0,1,0,1,2,0,0,2,3,0,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,7,7,8,8,8],\"target\":[4,4,5,5,5,6,7,7,7,8,9,10,11,12,13,14,15,16,17,9,10,11,12,13,14,15,18,19,20,11,14,19,16,17,11,14,18],\"value\":[28.949999999999999,0.40000000000000002,52.670000000000002,1.5900000000000001,1.3,0.059999999999999998,0.089999999999999997,0.65000000000000002,2.8399999999999999,0.17999999999999999,5.2400000000000002,1.1100000000000001,0.17000000000000001,13.58,5.3799999999999999,2.6899999999999999,0.11,0.37,0.70999999999999996,10.050000000000001,2.8599999999999999,0.089999999999999997,24.719999999999999,10.32,3.9700000000000002,0.20999999999999999,0.34000000000000002,0.14999999999999999,2.8399999999999999,0,0.01,0.050000000000000003,0.73999999999999999,2.8399999999999999,0.01,0.01,0.17000000000000001],\"label\":[\"carbon\",\"carbon\",\"hydrogen\",\"hydrogen\",\"hydrogen\",\"nitrogen\",\"oxygen\",\"oxygen\",\"oxygen\",\"sulfur\",\"carbon\",\"carbon\",\"carbon\",\"carbon\",\"carbon\",\"carbon\",\"carbon\",\"carbon\",\"carbon\",\"hydrogen\",\"hydrogen\",\"hydrogen\",\"hydrogen\",\"hydrogen\",\"hydrogen\",\"hydrogen\",\"hydrogen\",\"hydrogen\",\"hydrogen\",\"nitrogen\",\"nitrogen\",\"nitrogen\",\"oxygen\",\"oxygen\",\"sulfur\",\"sulfur\",\"sulfur\"],\"color\":[\"#B1DDF0\",\"#B1DDF0\",\"#D5E8D4\",\"#D5E8D4\",\"#D5E8D4\",\"#F8CECC\",\"#EEEEEE\",\"#EEEEEE\",\"#EEEEEE\",\"#FFFF88\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#D5E8D4\",\"#D5E8D4\",\"#D5E8D4\",\"#D5E8D4\",\"#D5E8D4\",\"#D5E8D4\",\"#D5E8D4\",\"#D5E8D4\",\"#D5E8D4\",\"#D5E8D4\",\"#F8CECC\",\"#F8CECC\",\"#F8CECC\",\"#EEEEEE\",\"#EEEEEE\",\"#FFFF88\",\"#FFFF88\",\"#FFFF88\"]},\"textfont\":{\"size\":12,\"color\":\"black\"},\"type\":\"sankey\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n## Energy bill\n\n> **Task Instructions**\n>\n>In this section, your objective is to transform the energy demand you previously calculated into utility consumption. This transformation involves the following energy vectors:\n>\n>- Natural gas\n>- Electricity\n>- Water\n>\n>To execute this conversion, you must explicitly state the assumptions you make during the process. For example, if you are aware of the refrigeration duty within the factory and understand that the refrigeration system operates on electricity, you will pre-determine the coefficient of performance (COP) for your refrigeration cycle. This assumption will enable you to calculate the actual electricity consumption for your processes.\n>\n>You can refer to the \"Brewery example\" in the Suivival Guide for comprehensive guidance and relevant information to facilitate this conversion process.\n>\n>Once you have established the energy utility demand within the dairy factory, you can proceed to calculate the energy bill. This calculation will be based on assumptions regarding energy prices in different countries or regions.\n\nFirst, the price of electricity (@noauthor_electricity_nodate) and natural gas (@noauthor_natural_nodate) in France and Germany has to be determined. \n\n\n::: {.cell}\n\n```{.python .cell-code}\n#print dataframe with the price of electricity and natural gas in France and Germany\nimport pandas as pd\nimport numpy as np\nfrom IPython.display import display, HTML\n\nelec_fr = 0.12 # â¬/kWh\nelec_ger = 0.21 # â¬/kWh\ngas_fr = 0.08 # â¬/kWh\ngas_gr = 0.08 # â¬/kWh\n\nprice = pd.DataFrame({'France (â¬/kWh)':[elec_fr, gas_fr], 'Germany (â¬/kWh)':[elec_ger, gas_gr]}, index = ['Electricity', 'Natural gas'])\nprice = price.round(3)\nHTML(price.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>France (â¬/kWh)</th>\n      <th>Germany (â¬/kWh)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Electricity</th>\n      <td>0.12</td>\n      <td>0.21</td>\n    </tr>\n    <tr>\n      <th>Natural gas</th>\n      <td>0.08</td>\n      <td>0.08</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\nNow, let list all the assumptions used to computed the energy bill:\n\n- The factory is running 95% of the time (8322 hours per year)\n- COP of the refrigeration system is 3.5\n- All water is used in closed loop. The cost is not taken into account in OPEX but will be in CAPEX.\n\n|                     |            Heating            |           Cooling           |\n|:-------------------:|:-----------------------------:|:---------------------------:|\n|    Pasteurization   |        Qpast_3, Qpast_6       | Qpast_ref, Qpast_4, Qpast_5 |\n|     Evaporation     |           Qevap_st1           |           Qevap_5           |\n|        Dryer        |       Qdry_hx1, Qdry_hx2      |          Qdry_cool          |\n|       Cleaning      |          Qclean_heat          |         Qclean_cool         |\n| Storage & hot water |           Qhot_water          |          Q_storage          |\n|       Rivella       |         Qrivella_heat         |                             |\n|       Digester      | Qdigester_dq, Qdigester_steam |                             |\n\nThe electricity consumption for cooling is computed as follow:\n\n$$\nElec(kW)= Q(kW) / COP\n$${#eq-cool_elec}\n\nThe OPEX cost is computed as follow:\n\n$$\nOPEX(Mâ¬/y)= Q(kW) \\cdot t_{\\text{op}} (h/y) \\cdot price(â¬/kWh) \\cdot 10^{-6} (Mâ¬/â¬)\n$${#eq-opex}\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntop = 24*0.95*365 #h/year\n\n#Pasterization\nQpast_ref = 60416 #W    \nQpast_4 = 3863424 #W  #A changer \nQpast_5 = 16344 #W    #A changer\nQpast_3 = 285.76 #W   #A changer\nQpast_6 = 16643 #W    #A changer\n\nQpast_cool = Qpast_ref + Qpast_4 + Qpast_5\nQpast_heat = Qpast_3 + Qpast_6 \n\n#Evap\nQevap_5 = 55703.14  #W\nQevap_st1 = 98038.87 #W\nQevap_cool = Qevap_5\nQevap_heat = Qevap_st1\n\n#Dryer\nQdry_cool = 15299.94 #W\nQdry_hx1 =  112.16 #W\nQdry_hx2 =  1967.71#W\nQdry_cool = Qdry_cool\nQdry_heat = Qdry_hx1 + Qdry_hx2 \n\n#Cleaning\nQclean_cool = 225940 #W\nQclean_heat = 334710 #W\n\n#Storage & hot water\nQ_storage = 500000  #W\nQhot_water = 167253.2 #W\n\n#Rivella\nQrivella_heat =  579418.2 #W\n\n#Digester\nQdigester_dq1 = 28754.1 #W\nQdigester_steam = 107608.5 #W\nQdigester_heat = Qdigester_dq1 + Qdigester_steam\n\n#Cool cost\nCOP = 3.5 # assumption\nQcool_tot = (Qpast_cool + Qevap_cool + Qdry_cool + Qclean_cool + Q_storage)/COP\nOPEXcool_fr = Qcool_tot*0.001 * elec_fr * top\nOPEXcool_ger = Qcool_tot*0.001 * elec_ger *top\n\n#Heat cost\nQheat_tot = Qpast_heat + Qevap_heat + Qdry_heat + Qclean_heat + Qhot_water + Qrivella_heat + Qdigester_heat\nOPEXheat_fr = Qheat_tot*0.001 * gas_fr * top\nOPEXheat_ger = Qheat_tot*0.001 * gas_gr * top\n\n#print in a dataframe the OPEX line: cooling, heating and total and column: France, Germany\nOPEX = pd.DataFrame({'France (Mâ¬/y)':[OPEXcool_fr/1e6, OPEXheat_fr/1e6, OPEXcool_fr/1e6 + OPEXheat_fr/1e6], 'Germany (Mâ¬/y)':[OPEXcool_ger/1e6, OPEXheat_ger/1e6, OPEXcool_ger/1e6 + OPEXheat_ger/1e6]}, index = ['Cooling', 'Heating', 'Total'])\nOPEX = OPEX.round(3)\nHTML(OPEX.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>France (Mâ¬/y)</th>\n      <th>Germany (Mâ¬/y)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Cooling</th>\n      <td>1.352</td>\n      <td>2.365</td>\n    </tr>\n    <tr>\n      <th>Heating</th>\n      <td>0.889</td>\n      <td>0.889</td>\n    </tr>\n    <tr>\n      <th>Total</th>\n      <td>2.240</td>\n      <td>3.254</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n",
    "supporting": [
      "03.00-energy_bill_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\r\n<script src=\"site_libs/plotly-binding-4.10.2/plotly.js\"></script>\r\n<script src=\"site_libs/typedarray-0.1/typedarray.min.js\"></script>\r\n<script src=\"site_libs/jquery-3.5.1/jquery.min.js\"></script>\r\n<link href=\"site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\r\n<link href=\"site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}