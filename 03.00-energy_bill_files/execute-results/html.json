{
  "hash": "303c22a0280ae5688781479c08e5e9c4",
  "result": {
    "markdown": "::: {.cell}\n\n:::\n\n# Exergy analysis and Energy bill\n\n## Exergy analysis\n\nTo evaluate the losses and inefficiencies in the dairy production, an exergy analysis is performed. An exergy loss is the difference between the exergy entering a unit and the exergy leaving the unit. This exergy analysis includes calculating the losses for each component experiencing heat transfer, covering both pasteurization and evaporation processes. The ambient temperature is set at $T_a = 25Â°C + 273K = 293K$.\n\n### Pasteurization\n\nThe first process to be analysed is pasteurization. Heat transfers occur in the components Refrigeration, Past 1, Past 2, Past 3, Past 4, Past 5, Past 6, Past 7 as well as in the Mixer. Applied to a stream entering and leaving a subsystem at different temperatures, the exergy loss can be calculated using the following general equation:\n\n\n$$\nL = \\dot{m}C_{p}\\left((T_{in} - T_{out}) - T_a \\ln\\left(\\frac{T_{in}}{T_{out}}\\right)\\right)\n$$\n\nThe following sections present the exact equations used for the exergy calculation of each component. \n\n#### Refrigeration\n\nIn the heat exchanger dedicated to refrigeration, exergy is dissipated through the milk and glycolic water streams.\n$$\nL_{milk\\_ref} = \\dot{m}_{f\\_milk}c_{p_{f\\_milk}}\\left((T_{f\\_milk} - T_{mixure\\_out}) - T_a \\ln\\left(\\frac{T_{f\\_milk}}{T_{mixure\\_out}}\\right)\\right)\n$$\n$$\nL_{gly\\_ref} = \\dot{m}_{gly\\_ref}c_{p_{glywater}}\\left((T_{in\\_gly} - T_{out\\_gly}) - T_a \\ln\\left(\\frac{T_{in\\_gly}}{T_{out\\_gly}}\\right)\\right)\n$$\n$$\nL_{ref} = L_{milk\\_ref} + L_{gly\\_ref}\n$$\n\n#### Past 1\n\nIn the heat exchanger dedicated to Past 1, exergy is dissipated through the fresh milk and milk streams.\n$$\nL_{past1\\_1} = \\dot{m}_{f\\_milk}c_{p_{f\\_milk}}\\left((T_{mixure\\_out} - T_{past\\_cent}) - T_a \\ln\\left(\\frac{T_{mixure\\_out}}{T_{past\\_cent}}\\right)\\right)\n$$\n$$\nL_{past1\\_2} = \\dot{m}_{milk}c_{p_{raw\\_milk}}\\left((T_{past\\_c} - T_{past\\_d}) - T_a \\ln\\left(\\frac{T_{past\\_c}}{T_{past\\_d}}\\right)\\right)\n$$\n$$\nL_{past1} = L_{past1\\_1} + L_{past1\\_2}\n$$\n\n#### Past 2\n\nIn the heat exchanger dedicated to Past 2, exergy is dissipated through two milk streams.\n$$\nL_{past2\\_1} = \\dot{m}_{milk}c_{p_{raw\\_milk}}\\left((T_{milk\\_0} - T_{past\\_a}) - T_a \\ln\\left(\\frac{T_{milk\\_0}}{T_{past\\_a}}\\right)\\right)\n$$\n$$\nL_{past2\\_2} = \\dot{m}_{milk}c_{p_{raw\\_milk}}\\left((T_{past\\_b} - T_{past\\_c}) - T_a \\ln\\left(\\frac{T_{past\\_b}}{T_{past\\_c}}\\right)\\right)\n$$\n$$\nL_{past2} = L_{past2\\_1} + L_{past2\\_2}\n$$\n\n#### Past 3\n\nIn the heat exchanger dedicated to Past 3, exergy is dissipated through the milk and steam streams. \n$$\nL_{past3\\_1} = \\dot{m}_{milk}c_{p_{raw\\_milk}}\\left((T_{past\\_a} - T_{past\\_b}) - T_a \\ln\\left(\\frac{T_{past\\_a}}{T_{past\\_b}}\\right)\\right)\n$$\n\n$$\nL_{past3\\_2} = \\dot{m}_{steam\\_past3}c_{p_{steam}}(\\Delta h_3 - T_a \\Delta s_3)\n$$\n$$\nL_{past3} = L_{past3\\_1} + L_{past3\\_2}\n$$\n\n#### Past 4\n\nIn the heat exchanger dedicated to Past 4, exergy is dissipated through the fresh milk and glycolic water streams.\n$$\nL_{past4\\_1} = \\dot{m}_{milk}c_{p_{raw\\_milk}}\\left((T_{past\\_d} - T_{milk}) - T_a \\ln\\left(\\frac{T_{past\\_d}}{T_{milk}}\\right)\\right)\n$$\n$$\nL_{gly\\_past4} = \\dot{m}_{gly\\_past4}c_{p_{glywater}}\\left((T_{past\\_d} - T_{milk}) - T_a \\ln\\left(\\frac{T_{in\\_gly}}{T_{out\\_gly}}\\right)\\right)\n$$\n$$\nL_{past4} = L_{past4\\_1} + L_{gly\\_past4}\n$$\n\n#### Past 5\n\nIn the heat exchanger dedicated to Past 5, exergy is dissipated through two cream streams.\n$$\nL_{past5\\_1} = \\dot{m}_{int}c_{p_{cream}}\\left((T_{cream} - T_{crpast\\_a}) - T_a \\ln\\left(\\frac{T_{cream}}{T_{crpast\\_a}}\\right)\\right)\n$$\n$$\nL_{past5\\_2} = \\dot{m}_{cream}c_{p_{cream}}\\left((T_{crpast\\_b} - T_{crpast\\_c}) - T_a \\ln\\left(\\frac{T_{crpast\\_b}}{T_{crpast\\_c}}\\right)\\right)\n$$\n$$\nL_{past5} = L_{past5\\_1} + L_{past5\\_2}\n$$\n\n#### Past 6\n\nIn the heat exchanger dedicated to Past 6, exergy is dissipated through the cream and steam streams.\n$$\nL_{past6\\_1} = \\dot{m}_{cream}c_{p_{cream\\_mixed}}\\left((T_{crpast\\_x} - T_{crpast\\_b}) - T_a \\ln\\left(\\frac{T_{crpast\\_x}}{T_{crpast\\_b}}\\right)\\right)\n$$\n$$\nL_{past6\\_2} = \\dot{m}_{steam\\_past6}c_{p_{steam}} (\\Delta h_6 - T_a \\Delta s_6)\n$$\n$$\nL_{past6} = L_{past6\\_1} + L_{past6\\_2}\n$$\n\n#### Past 7\n\nIn the heat exchanger dedicated to Past 7, exergy is dissipated through the cream and glycolic water streams.\n\n$$\nL_{past7\\_1} = \\dot{m}_{cream}c_{p_{cream}}\\left((T_{crpast\\_c} - T_{cream}) - T_a \\ln\\left(\\frac{T_{crpast\\_c}}{T_{cream}}\\right)\\right)\n$$\n$$\nL_{gy\\_past7} = \\dot{m}_{gly\\_past7}c_{p_{glywater}}\\left((T_{crpast\\_c} - T_{cream}) - T_a \\ln\\left(\\frac{T_{crpast\\_c}}{T_{cream}}\\right)\\right)\n$$\n$$\nL_{past7} = L_{past7\\_1} + L_{gy\\_past7}\n$$\n\n#### Mixer\n\nIn the heat exchanger dedicated to the mixer, exergy is dissipated through the cream and thickner streams.\n$$\nL_{mixer\\_1} = \\dot{m}_{cream}c_{p_{cream}}\\left((T_{crpast\\_a} - T_{crpast\\_x}) - T_a \\ln\\left(\\frac{T_{crpast\\_a}}{T_{crpast\\_x}}\\right)\\right)\n$$\n$$\nL_{mixer\\_2} = \\dot{m}_{thick}c_{p_{alboline}}\\left((T_{thick} - T_{crpast\\_x}) - T_a \\ln\\left(\\frac{T_{thick}}{T_{crpast\\_x}}\\right)\\right)\n$$\n$$\nL_{mixer} = L_{mixer\\_1} + L_{mixer\\_2}\n$$\n\n#### Total\n\nThe amount of exergy that is lost in the pasteurization process is calculated by adding all the exergy losses of the heat exchangers. \n$$\nL_{tot\\_past} = L_{ref} + L_{past1} + L_{past2} + L_{past3} + L_{past4} + L_{past5} + L_{past6} + L_{past7} + L_{mixer}\n$$\n\n#### Summary of Pasteurization Exergy Results\n\nThe following Table presents a summary of all the calulated exergy losses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#path <- file.path('./venv/Scripts/python.exe')\n#library(reticulate)\n#use_python(path)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n#import math\nimport pandas as pd\nimport numpy as np\nfrom IPython.display import display, HTML\n\ndf = pd.read_csv('pasteurization_process.csv',sep = ';')\n\nfor i in range(0,len(df.index)):\n    globals()[df.iloc[i][1]] = df.iloc[i][2]\n\nDelta_T_Gly=5\nTa=298\n\n#Refrigeration\nL_milk_ref=m_fmilk*Cp_fmilk*((T_fmilk-T_mixure_out)-T_a*np.log(T_fmilk/T_mixure_out))\n\nL_gy_ref=m_gly_ref*Cp_glywater*((Delta_T_Gly)-T_a*np.log(T_fmilk/T_mixure_out))#glywater temperature\n\nL_ref=L_milk_ref+L_gy_ref\n\n\n#Past 1\n\nL_past1_1=m_fmilk*Cp_fmilk*((T_mixure_out-T_past_cent)-T_a*np.log(T_mixure_out/T_past_cent))\nL_past1_2=m_milk*Cp_raw_milk*((T_past_c-T_past_d)-T_a*np.log(T_past_c/T_past_d) )\n\nL_past1=L_past1_1+L_past1_2\n\n#Past 2\n\nL_past2_1=m_milk*Cp_raw_milk*((T_past_a-T_milk_0)-T_a*np.log(T_past_a/T_milk_0))  \nL_past2_2=m_milk*Cp_raw_milk*((T_past_c-T_past_b)-T_a*np.log(T_past_c/T_past_b)) \n\nL_past2_1=m_milk*Cp_raw_milk*((T_milk_0-T_past_a)-T_a*np.log(T_milk_0/T_past_a))  \nL_past2_2=m_milk*Cp_raw_milk*((T_past_b-T_past_c)-T_a*np.log(T_past_b/T_past_c)) \n\nL_past2=L_past2_1+L_past2_2\n\n\n#Past 3\n\nL_past3_1=m_milk*Cp_raw_milk*((T_past_b-T_past_a)-T_a*np.log(T_past_b/T_past_a))\n\nL_past3_2=m_steam_past3*(delta_h_steam-T_a*delta_s_steam)\n\n\nL_past3=L_past3_1#L_past3_2-\n\n\n#Past 4\n\nL_past4_1=m_milk*Cp_raw_milk*((T_milk-T_past_d)-T_a*np.log(T_milk/T_past_d))\n\nL_gy_past4=m_gly_past4*Cp_glywater*((T_milk-T_past_d)-T_a*np.log(T_milk/T_past_d))#glywater temperature\n\nL_past4=L_past4_1+L_gy_past4\n\n\n#Past 5\nL_past5_1=m_int*Cp_cream*((T_crpast_a-T_cream)-T_a*np.log(T_crpast_a/T_cream))\nL_past5_2=m_cream*Cp_cream*((T_crpast_c-T_crpast_b)-T_a*np.log(T_crpast_c/T_crpast_b))\n\nL_past5=L_past5_1+L_past5_2\n\n\n#Past 6\nL_past6_1=m_cream*Cp_cream_mixed*((T_crpast_x-T_crpast_b)-T_a*np.log(T_crpast_x/T_crpast_b))\nL_past6_2=m_steam_past6*(delta_h_steam-Ta*delta_s_steam)\n\n\nL_past6=L_past6_1+L_past6_2\n\n\n#Past 7\n\nL_past7_1=m_cream*Cp_cream*((T_crpast_c-T_cream)-T_a*np.log(T_crpast_c/T_cream))\n\nL_gy_past7=m_gly_past7*Cp_glywater*((T_crpast_c-T_cream)-T_a*np.log(T_crpast_c/T_cream))#glywater temperature\n\nL_past7=L_past7_1+L_gy_past7\n\n\n#Mixer\n\nL_mixer_1=m_cream*Cp_cream*((T_crpast_a-T_crpast_x)-T_a*np.log(T_crpast_a/T_crpast_x))\nL_mixer_2=m_thick*Cp_alboline*((T_crpast_x-T_thick)-T_a*np.log(T_crpast_x/T_thick))\n\nL_mixer=L_mixer_1+L_mixer_2\n\n\n#Total exergy pasteurisation section\n\nL_tot_past= L_ref+L_past1+L_past2+L_past3+L_past4+L_past5+L_past6+L_past7+L_mixer\n\n#Calculations for Sankey Diagram\n\nL_steam_in=m_steam_past3*(2880000-480*7.343)\n\n\nL_steam_out=m_steam_past3*(461000-383*1.418)\nL_steam_in2=m_steam_past3*(2257-373*7.355)\n\nL_fresh_milk=m_fmilk*Cp_fmilk*((T_mixure_out-T_past_cent)-T_a*np.log(T_mixure_out/T_past_cent))\n\n\nC Dataframe for Exergy Loss Pasteurization\n\nExergy_losses  = 'kW'\n\nVariables_Names = ['L_Refrigeration','L_Past1','L_Past2','L_Past3','L_Past4','L_Past5','L_Past6','L_Past7','L_mixer','L_tot_past']\nVariables_Values = np.divide([L_ref,L_past1,L_past2,L_past3,L_past4,L_past5,L_past6,L_past7,L_mixer,L_tot_past],1000)\nVariables_Units =  Exergy_losses\ndf = pd.DataFrame(data = {'Exergy loss': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})\ndisplay(df)\nHTML(df.to_html(index=False))\n```\n:::\n\n\nDo visually represent the exergy flows in the system, a Sankey diagram is plotted. It shows the exergy in-flows and out-flows with respect to the factory. I can be noticed that the largest in-flow contribution comes from the steam. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"./sankey_ipese.R\") # introduce the sankey function from the source file\ndf = read.csv('Sankey_Pasteurization.csv',sep = '\\t') # replace the atom_balance.csv with your exergy analysis results\nsankey_ipese(df = df, unit = 'kW', title = 'Sankey diagram Pasteurization') # replace the unit and title here\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-d4f6724faef3dc4ce961\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d4f6724faef3dc4ce961\">{\"x\":{\"visdat\":{\"8f01f51b40\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"8f01f51b40\",\"attrs\":{\"8f01f51b40\":{\"domain\":{\"x\":[0,1],\"y\":[0,0]},\"orientation\":\"h\",\"valueformat\":\".0f\",\"valuesuffix\":\"kW\",\"node\":{\"label\":[\"gly_in : NA kW\",\"fresh_milk : 34 kW\",\"steam_in : 465 kW\",\"thickner : 1.59 kW\",\"factory : NA kW\",\"factory    13 : NA kW\",\"milk : 34 kW\",\"cream : 4 kW\",\"past1_loss : 44.1 kW\",\"past2_loss : 3.7 kW\",\"past3_loss : 37.5 kW\",\"past4_loss : 32.9 kW\",\"past5_loss : 1.64 kW\",\"past6_loss : 115.5 kW\",\"past7_loss : 77.7 kW\",\"refr_loss : 38.8 kW\",\"mixer_loss : 2.12 kW\",\"steam_out : 120 kW\",\"gly_out : 14 kW\"],\"pad\":15,\"thickness\":2,\"color\":\"#DCDCDC\",\"line\":{\"color\":\"black\",\"width\":0.5}},\"link\":{\"source\":[0,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4],\"target\":[5,4,4,4,6,7,8,9,10,11,12,13,14,15,16,17,18],\"value\":[null,34,465,1.5900000000000001,12,4,44.100000000000001,3.7000000000000002,37.5,32.899999999999999,1.6399999999999999,115.5,77.700000000000003,38.799999999999997,2.1200000000000001,120,14],\"label\":[\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\"],\"color\":[\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\"]},\"textfont\":{\"size\":12,\"color\":\"black\"},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"sankey\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Sankey diagram Pasteurization\",\"font\":{\"size\":10},\"xaxis\":{\"showgrid\":false,\"zeroline\":false},\"yaxis\":{\"showgrid\":false,\"zeroline\":false},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"domain\":{\"x\":[0,1],\"y\":0},\"orientation\":\"h\",\"valueformat\":\".0f\",\"valuesuffix\":\"kW\",\"node\":{\"label\":[\"gly_in : NA kW\",\"fresh_milk : 34 kW\",\"steam_in : 465 kW\",\"thickner : 1.59 kW\",\"factory : NA kW\",\"factory    13 : NA kW\",\"milk : 34 kW\",\"cream : 4 kW\",\"past1_loss : 44.1 kW\",\"past2_loss : 3.7 kW\",\"past3_loss : 37.5 kW\",\"past4_loss : 32.9 kW\",\"past5_loss : 1.64 kW\",\"past6_loss : 115.5 kW\",\"past7_loss : 77.7 kW\",\"refr_loss : 38.8 kW\",\"mixer_loss : 2.12 kW\",\"steam_out : 120 kW\",\"gly_out : 14 kW\"],\"pad\":15,\"thickness\":2,\"color\":\"#DCDCDC\",\"line\":{\"color\":\"black\",\"width\":0.5}},\"link\":{\"source\":[0,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4],\"target\":[5,4,4,4,6,7,8,9,10,11,12,13,14,15,16,17,18],\"value\":[null,34,465,1.5900000000000001,12,4,44.100000000000001,3.7000000000000002,37.5,32.899999999999999,1.6399999999999999,115.5,77.700000000000003,38.799999999999997,2.1200000000000001,120,14],\"label\":[\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\",\"exergy\"],\"color\":[\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\",\"#B1DDF0\"]},\"textfont\":{\"size\":12,\"color\":\"black\"},\"type\":\"sankey\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n### Evaporation \n\nThe second process to be analysed is evaporation. Heat transfers occur in the heat exchangers, heat evaporators and splitters. Since the splitters are isenthalpic no exergy is lost. The exergy losses for the heat exchangers and the heat evaporators can be calculated with the following general equation: \n\n$$\nL= m((h_{in} - h_{out})-T_a(s_{in} - s_{out}))\n$$\n\n#### Heat Exchanger\n\nThere are four heat exchangers in the system: P1, P2, P3 and P4. The exergy that is lost for each of the heat exchangers can be calculated with the following equations:\n$$\nL_{heat1} = m_{11}(h_{11} - T_a s_{11}) - m_{12}(h_{12} - T_a s_{12}) + m_1(h_1 - T_a s_1) - m_2(h_2 - T_a s_2)\n$$\n$$\nL_{heat2} = m_2(h_2 - T_a s_2) - m_3(h_3 - T_a s_3) + m_{16}(h_{16} - T_a s_{16})\n$$\n$$\nL_{heat3} = m_3(h_3 - T_a s_3) - m_4(h_4 - T_a s_4) + m_{20}(h_{20} - T_a s_{20})\n$$\n$$\nL_{heat4} = m_4(h_4 - T_a s_4) - m_5(h_5 - T_a s_5) + m_{19}(h_{19} - T_a s_{19})\n$$\n\n\n#### Heat Evaporator\n\nThere are three heat evaporators in the system: EVAP 1, EVAP 2 and EVAP 3. The exergy that is lost for each of the heat evaporators can be calculated with the following equations:\n$$\nL_{eva1} = -m_6(h_6 - T_a s_6) + m_7(h_7 - T_a s_7) + m_{14}(h_{14} - T_a s_{14}) - m_{21}(h_{21} - T_a s_{21})\n$$\n$$\nL_{eva2} = -m_8(h_8 - T_a s_8) - m_{17}(h_{17} - T_a s_{17}) + m_{15}(h_{15} - T_a s_{15}) + m_9(h_9 - T_a s_9)\n$$\n$$\nL_{eva3} = -m_{10}(h_{10} - T_a s_{10}) + m_{18}(h_{18} - T_a s_{18}) + m_{16}(h_{16} - T_a s_{16}) + m_{11}(h_{11} - T_a s_{11})\n$$\n\n#### Total\nThe amount of exergy that is lost in the evaporation process is calculated by adding all the exergy losses of the heat exchangers. \n$$\n\\dot{L}_{evaporation}=\\Sigma\\dot{L}_{HX}+\\Sigma\\dot{L}_{evaporator}+\\Sigma\\dot{L}_{splitter}\n$$\n\n\n#### Summary of Evaporation Exergy Results\n\nThe following Table presents a summary of all the calulated exergy losses.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#Exergy Evaporation\n\n#import math\nimport pandas as pd\nimport numpy as np\nfrom IPython.display import display, HTML\n\ndfrecap = pd.read_csv('dfrecap.csv', sep = ',')\n\nfor i in range(0,len(dfrecap.index)):\n    globals()['m'+str(i+1)] = dfrecap['Mass flow (kg/s)'].iloc[i]\n    globals()['h'+str(i+1)] = dfrecap['Enthalpy (J/mol)'].iloc[i]\n    globals()['s'+str(i+1)] = dfrecap['Entropy (J/K)'].iloc[i]\n\n\n#Exergy for heat exchangers\n\nTa=298\n\nL_heat1 = m11*(h11-Ta*s11)-m12*(h12-Ta*s12)+m1*(h1-Ta*s1)-m2*(h2-Ta*s2)\n\nL_heat2= -m2*(h2-Ta*s2)+m3*(h3-Ta*s3)-m16*(h16-Ta*s16)\n\n\nL_heat3=-m3*(h3-Ta*s3)+m4*(h4-Ta*s4)-m20*(h20-Ta*s20)\n\n\nL_heat4=-m4*(h4-Ta*s4)+m5*(h5-Ta*s5)+m15*(h15-Ta*s15)\n\n\n#Exergy for evaporators\n\nL_eva1=-m6*(h6-Ta*s6)+m7*(h7-Ta*s7)+m14*(h14-Ta*s14)-m21*(h21-Ta*s21)\n\n\nL_eva2=-m8*(h8-Ta*s8)-m17*(h17-Ta*s17)+m15*(h15-Ta*s15)+m9*(h9-Ta*s9)\n\n\nL_eva3=-m10*(h10-Ta*s10)+m18*(h18-Ta*s18)+m16*(h16-Ta*s16)+m11*(h11-Ta*s11)\n\n\n#Total exergy evaporation section\n\nL_tot_eva= L_heat1+L_heat2+L_heat3+L_heat4+L_eva1+L_eva2+L_eva3\n\n\n# Dataframe for Exergy Loss Evaporation\n\nExergy_losses  = 'kW'\n\nVariables_Names = ['L_heat1','L_heat2','L_heat3','L_heat4','L_eva1','L_eva2','L_eva3','L_tot_eva']\nVariables_Values = np.divide([L_heat1,L_heat2,L_heat3,L_heat4,L_eva1,L_eva2,L_eva3,L_tot_eva],1000)\nVariables_Units =  Exergy_losses\ndf_2 = pd.DataFrame(data = {'Exergy loss': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})\n\ndisplay(df_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Exergy loss       Value Unit\n0     L_heat1   22.243366   kW\n1     L_heat2    8.717715   kW\n2     L_heat3   20.190390   kW\n3     L_heat4   18.281782   kW\n4      L_eva1   62.342137   kW\n5      L_eva2   97.896598   kW\n6      L_eva3    4.586517   kW\n7   L_tot_eva  234.258506   kW\n```\n:::\n\n```{.python .cell-code}\ndisplay(HTML(df_2.to_html(index=False)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<IPython.core.display.HTML object>\n```\n:::\n:::\n\n\n### Suggested modifications\n\nFrom the previous calculations, one can see that the total exergy lost to the environment from the pasteurization and evaporation processes is more than 1700 kW. This value indicates that the inefficiencies in both processes are very large. For the pasteurization process, the exergy loss is especially significant in Past 3, as steam enters and leaves the system. In the evaporation part, the exergy loss is particularly high in Evaporator 1 and Evaporator 2.\n\nTo decrease the overall exergy losses in the system, different strategies can be implemented. Since the exergy efficiencies are so large the best option is to improve the general energy efficiency by upgrading to more energy-efficient equipment and using insulation.\n\n\n\n\n\n## Energy bill\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#print dataframe with the price of electricity and natural gas in France and Germany\nimport pandas as pd\nimport numpy as np\nfrom IPython.display import display, HTML\n\nelec_fr = 0.12 # â¬/kWh\nelec_ger = 0.21 # â¬/kWh\ngas_fr = 0.08 # â¬/kWh\ngas_gr = 0.08 # â¬/kWh\n\nprice = pd.DataFrame({'France (â¬/kWh)':[elec_fr, gas_fr], 'Germany (â¬/kWh)':[elec_ger, gas_gr]}, index = ['Electricity', 'Natural gas'])\nprice = price.round(3)\nHTML(price.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>France (â¬/kWh)</th>\n      <th>Germany (â¬/kWh)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Electricity</th>\n      <td>0.12</td>\n      <td>0.21</td>\n    </tr>\n    <tr>\n      <th>Natural gas</th>\n      <td>0.08</td>\n      <td>0.08</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\nNow, let list all the assumptions used to computed the energy bill:\n\n- The factory is running 95% of the time (8322 hours per year)\n- COP of the refrigeration system is 3.5\n- All water is used in closed loop. The cost is not taken into account in OPEX but will be in CAPEX.\n\n|                     |            Heating            |           Cooling           |\n|:-------------------:|:-----------------------------:|:---------------------------:|\n|    Pasteurization   |        Qpast_3, Qpast_6       | Qpast_ref, Qpast_4, Qpast_7 |\n|     Evaporation     |           Qevap_st1           |           Qevap_5           |\n|        Dryer        |       Qdry_hx1, Qdry_hx2      |          Qdry_cool          |\n|       Cleaning      |          Qclean_heat          |         Qclean_cool         |\n| Storage & hot water |           Qhot_water          |          Q_storage          |\n|       Rivella       |         Qrivella_heat         |                             |\n|       Digester      | Qdigester_dq, Qdigester_steam |                             |\n\nThe electricity consumption for cooling is computed as follow:\n\n$$\nElec(kW)= Q(kW) / COP\n$${#eq-cool_elec}\n\nThe OPEX cost is computed as follow:\n\n$$\nOPEX(Mâ¬/y)= Q(kW) \\cdot t_{\\text{op}} (h/y) \\cdot price(â¬/kWh) \\cdot 10^{-6} (Mâ¬/â¬)\n$${#eq-opex}\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntop = 24*0.95*365 #h/year\n\n#Pasterization\nQpast_ref = 60416 #W    \nQpast_4 = 194370 #W  \nQpast_7 = 127000 #W    \nQpast_3 = 285760 #W   \nQpast_6 = 35610 #W    \n\nQpast_cool = Qpast_ref + Qpast_4 + Qpast_7\nQpast_heat = Qpast_3 + Qpast_6 \n\n#Evap\nQevap_5 = 55703.14  #W\nQevap_st1 = 98038.87 #W\nQevap_cool = Qevap_5\nQevap_heat = Qevap_st1\n\n#Dryer\nQdry_cool = 15299.94 #W\nQdry_hx1 =  112.16 #W\nQdry_hx2 =  1967.71#W\nQdry_cool = Qdry_cool\nQdry_heat = Qdry_hx1 + Qdry_hx2 \n\n#Cleaning\nQclean_cool = 225940 #W\nQclean_heat = 334710 #W\n\n#Storage & hot water\nQ_storage = 500000  #W\nQhot_water = 167253.2 #W\n\n#Rivella\nQrivella_heat =  579418.2 #W\n\n#Digester\nQdigester_dq1 = 28754.1 #W\nQdigester_steam = 107608.5 #W\nQdigester_heat = Qdigester_dq1 + Qdigester_steam\n\n#Cool cost\nCOP = 3.5 # assumption\nQcool_tot = (Qpast_cool + Qevap_cool + Qdry_cool + Qclean_cool + Q_storage)/COP\nOPEXcool_fr = Qcool_tot*0.001 * elec_fr * top\nOPEXcool_ger = Qcool_tot*0.001 * elec_ger *top\n\n \n\n#Heat cost\nQheat_tot = Qpast_heat + Qevap_heat + Qdry_heat + Qclean_heat + Qhot_water + Qrivella_heat + Qdigester_heat\nOPEXheat_fr = Qheat_tot*0.001 * gas_fr * top\nOPEXheat_ger = Qheat_tot*0.001 * gas_gr * top\n\n#print in a dataframe the OPEX line: cooling, heating and total and column: France, Germany\nOPEX = pd.DataFrame({'France (Mâ¬/y)':[OPEXcool_fr/1e6, OPEXheat_fr/1e6, OPEXcool_fr/1e6 + OPEXheat_fr/1e6], 'Germany (Mâ¬/y)':[OPEXcool_ger/1e6, OPEXheat_ger/1e6, OPEXcool_ger/1e6 + OPEXheat_ger/1e6]}, index = ['Cooling', 'Heating', 'Total'])\nOPEX = OPEX.round(3)\nHTML(OPEX.to_html())\n```\n\n::: {.cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>France (Mâ¬/y)</th>\n      <th>Germany (Mâ¬/y)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Cooling</th>\n      <td>0.336</td>\n      <td>0.589</td>\n    </tr>\n    <tr>\n      <th>Heating</th>\n      <td>1.091</td>\n      <td>1.091</td>\n    </tr>\n    <tr>\n      <th>Total</th>\n      <td>1.428</td>\n      <td>1.680</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n\n```{.python .cell-code}\n\n\n\n#TASK4 Comparison\n#OPEX_past_5_fr = Qpast_6*0.001 * gas_fr * top + (Qpast_7/COP)*0.001 * elec_fr * top\n#OPEX_past_5_ger = Qpast_6*0.001 * gas_gr * top + (Qpast_7/COP)*0.001 * elec_ger * top\n#print('OPEX_past_5_fr', OPEX_past_5_fr)\n#print('OPEX_past_5_ger', OPEX_past_5_ger)\n\n#OPEX_past1_5_fr = (Qpast_6+Qpast_3)*0.001 * gas_fr * top + ((Qpast_7+Qpast_4)/COP)*0.001 * elec_fr * top\n#OPEX_past1_5_ger = (Qpast_6+Qpast_3)*0.001 * gas_gr * top + ((Qpast_7+Qpast_4)/COP)*0.001 * elec_ger * top\n#print('OPEX_past1_5_fr', OPEX_past1_5_fr)\n#print('OPEX_past1_5_ger', OPEX_past1_5_ger)\n\n#OPEX_CIP_fr = (Qclean_heat)*0.001 * gas_fr * top + ((Qclean_cool)/COP)*0.001 * elec_fr * top\n#OPEX_CIP_ger = (Qclean_heat)*0.001 * gas_gr * top + ((Qclean_cool)/COP)*0.001 * elec_ger * top\n#print('OPEX_CIP_fr', OPEX_CIP_fr)\n#print('OPEX_CIP_ger', OPEX_CIP_ger)\n\n#OPEX_past_6_fr = Qpast_6*0.001 * gas_fr * top \n#OPEX_past_6_ger = Qpast_6*0.001 * gas_gr * top\n#print('OPEX_past_6_fr', OPEX_past_6_fr)\n#print('OPEX_past_6_ger', OPEX_past_6_ger)\n\n#TASK7 Comparison\n#OPEXcool_fr_task7 = (Qpast_7+Qclean_cool)*0.001 * elec_fr * top\n#OPEXheat_fr_task7 = (Qpast_3 + Qpast_6+Qclean_heat)*0.001 * gas_fr * top\n\n#print('OPEXcool_fr_task7', OPEXcool_fr_task7)\n#print('OPEXheat_fr_task7', OPEXheat_fr_task7)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\r\n<script src=\"site_libs/plotly-binding-4.10.2/plotly.js\"></script>\r\n<script src=\"site_libs/typedarray-0.1/typedarray.min.js\"></script>\r\n<script src=\"site_libs/jquery-3.5.1/jquery.min.js\"></script>\r\n<link href=\"site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\r\n<link href=\"site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}