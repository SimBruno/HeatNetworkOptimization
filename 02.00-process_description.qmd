# Process description and analysis

To provide practical solutions to our industrial partner, the dairy factory, our first task is to show that we truly grasp the problem. To a business manager, industrial processes may seem mysterious and complex, like "black boxes." However, as engineers, we need to dig into the details, using mathematics and physics to analyze and design these industrial processes.

In this section, your task is to compute the thermodynamic properties of all the streams within each section of the dairy factory. The data collected here will be instrumental in calculating exergy efficiency and energy bills in the following section. To facilitate your work, we have provided an illustrative example for the Pasteurization section below:

## Pasteurisation section

![Pasteurisation](Figures/pasteurisation.svg)

In this section will be presented the mass and energy balances for each chemical operation of the milk pasteurisation. This pasterisation aims to produce cream and milk from fresh milk with the intergation of a thickener at some point. 
TEST
### Mass Flows 

Because of the mass flow conservation, we have:

\begin{cases}
\dot m_{Mixure~Out} = \dot m_{Past{\}Cent} = \dot m{Fresh~Milk} = 8~kg/s \\

\dot m_{Milk{\}0} = \dot m{Past{\}a} = \dot m{Past{\}b} = \dot m{Past{\}c} =  \dot m{Past{\}d} = \dot m{Milk} = 7.52~kg/s \\

\dot m_{cream{\}0} = \dot m{crpast{\}a} = \dot m{Past{\}cent} - \dot m{Milk{\}0} =  \dot m{Fresh~Milk} - \dot m_{Milk} = 8 - 7.52 = 0.48~kg/s ~~ (centrifuge) \\

\dot m_{crpast{\}x} = \dot m{crpast{\}b} = \dot m{crpast{\}c} = \dot m{Cream} =  0.55~kg/s \\

\dot m_{thickener} = 0.07~kg/s \\

\end{cases}

Consequently, all mass flows are defined.

### Heat Capacity

Are already provided the following heat capacity data:

- $c_{p,Raw~Milk} = 3.8 kJ/(kgK)$ (milk after centrifuge)

- $c_{p,Cream~ac} = 3.4 kJ/(kgK)$ (cream after centrifuge)

From Litterature [add reference] we chose:

- $c_{p,thickener} = c_{p,albaline} = 0.07 kJ/(kgK)$


Assuming that the mixer provides an ideal mix, we have:

\begin{align}
    c_{p,cream} &= \frac{\dot m_{cream{\}0}}{\dot m{Cream}}.c_{p,Cream~ac} + \frac{\dot m_{thickener} }{\dot m_{Cream}}.c_{p,thickener} \\
    \\
    c_{p,cream} &= \frac{0.48}{0.55}.3400 + \frac{0.07}{0.55}.4175 
\end{align}

Finally:

- $c_{p,cream} = 3.5~kJ/(kgK)$

### Equations of operations 

#### Refrigeration

$\dot Q_{refrigeration} = \dot m_{Fresh~Milk} . c_{p,Fresh~Milk} . (T_{Fresh~Milk} - T_{Mixure{\_}out})$

#### PAST1

$\dot Q_{past1} = \dot m_{Fresh~Milk} . c_{p,Fresh~Milk} . (T_{Past{\_}cent} - T_{Mixure{\_}out}) = \dot m_{Milk} . c_{p,Raw~Milk} . (T_{Past{\_}d} - T_{Past{\_}c})$


```{python compute_pasteurisation, echo = F, eval = T}

import pandas as pd
import numpy as np
from IPython.display import display, HTML

# Mass flows(kg/s)

m_fmilk = 8
m_milk = 7.52
m_cream = 0.55
m_int = m_fmilk - m_milk
m_thick = 0.07

# Heat capacities (J/(kg.K))

Cp_alboline = 70
Cp_raw_milk = 3800
Cp_fmilk =  3780
Cp_cream = 3400
Cp_glywater = 3900 #(Beer pasteurization exercise)
Cp_steam = 1996 #(Internet)
Cp_cream_mixed = (m_int/m_cream)*Cp_cream + (m_thick/m_cream)*Cp_alboline
# Cp_fmilk, computed later

# Temperatures (K)

T_a=25+273
T_fmilk = 6+273.15
T_mixure_out = 4+273.15
T_past_cent = 60+273.15
T_milk_0 = T_past_cent
T_cream_0 = T_past_cent
# T_past_a, computed later
T_past_b = 75+273.15
# T_past_c, computed later
# T_past_d, computed later
T_milk = 4+273.15
# T_crpast_a, computed later
T_thick = 4+273.15
# T_crpast_x, computed later
T_crpast_b = 75+273.15
# T_crpast_c, computed later
T_cream = 4+273.15

# Thermodynamical equations
#Cp_fmilk = (m_milk/m_fmilk) * Cp_raw_milk * (5/(T_past_cent-T_mixure_out))
Q_refrigeration = m_fmilk * Cp_fmilk * ( T_fmilk - T_mixure_out )
Q_past1 = m_fmilk * Cp_fmilk * ( T_past_cent - T_mixure_out )
T_past_c = 5 + T_past_b
T_past_a = T_past_c - T_past_b + T_milk_0
T_past_d = (( m_fmilk / m_milk ) * ( Cp_fmilk / Cp_raw_milk ) * (T_past_cent - T_mixure_out)) + T_past_c
Q_past2 = m_milk * Cp_raw_milk * 5
Q_past3 = m_milk * Cp_raw_milk * ( T_past_b - T_past_a)
Q_past4 = m_milk * Cp_raw_milk * ( T_past_d - T_milk)
T_crpast_a = (( m_cream / m_int ) * ( Cp_cream_mixed / Cp_cream ) * 5) + T_cream_0
T_crpast_c = (( m_int / m_cream ) * ( Cp_cream / Cp_cream_mixed ) * (T_crpast_a - T_cream_0)) + T_crpast_b
Q_past5 =  m_cream * Cp_cream_mixed * 5
T_crpast_x = ((Cp_alboline*m_thick)*T_thick + (Cp_cream*m_int)*T_crpast_a) / ((Cp_alboline*m_thick)+(Cp_cream*m_int))
Q_past6 = m_cream * Cp_cream_mixed * ( T_crpast_b - T_crpast_x )
Q_past7 = m_cream * Cp_cream_mixed * ( - (T_cream - T_crpast_c))

# Computation for steam and glywater

m_gly_ref = Q_refrigeration / ( Cp_glywater * 5 )
m_steam_past3 = Q_past3 / ( Cp_steam * 5 )
m_gly_past4 = Q_past4 / ( Cp_glywater * 5 )
m_steam_past6 = Q_past6 / ( Cp_steam * 5 )
m_gly_past7 = Q_past7 / ( Cp_glywater * 5 )


#LATER not required immediatly

Variables_Names = ['Q_{refrigeration}','Q_{past1}']
Variables_Values = [Q_refrigeration,Q_past1]
Variables_Units =  ['J/s','J/s']
df_pasteurization = pd.DataFrame(data = {'Name of Variable': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})

HTML(df_pasteurization.to_html())
```



#### Results
 




#### Results Exergy Analysis Pasteurization

```{python compute_pasteurisation_exergy, echo = F, eval = T}

# Refrigeration

#L_milk_refr=m_fmilk*Cp_fmilk*(T_fmilk-T_mixure_out)-T_a*log10(T_fmilk/T_mixure_out)
#Lgw_refr
#L_ref=L_milk_refr+L_gw_refr

# Past 1
#L_past1_1=m_fmilk*Cp_fmilk*(T_mixure_out-T_past_cent)-T_a*log10(T_mixure_out/T_past_cent)

#L_past1_2=m_milk*Cp_raw_milk*(T_pastc-T_pastd)-T_a*log10(T_pastc/T_pastd)

#L_past1=L_past1_1+L_past1_2
# Past 3
#L_past3_1=m_milk*Cp_raw_milk*(T_pasta-T_pastb)-T_a*log10(T_pasta/T_pastb)

#L_past3_2=

#L_past3=L_past3_1+L_past3_2

```


#### TO CONTINUE
```{python coolprop, echo = T, eval = T}
from CoolProp.CoolProp import PropsSI
rho = PropsSI('D', 'T', 298.15, 'P', 101325, 'Nitrogen')
```




```{r render-table, echo = T}
# a way to pass the value from python to r is to through json file
library(reticulate)
x = 42
```


## Evaporation section

![Evaporation](Figures/Evaporation.svg)

The evaporator section receives milk from pasteurisation. This milk can be seen as a mixture of water and fat. The aim of this section is to increase the fat proportion from $11.7\% wt.$ to $50\% wt.$ by evaporating water. It is composed of heat-exchanger (HEX), 3 evaporators, 2 splitters and a processing module. 

In order to compute the mass and energy balance at each point, the following method is used:

1. Compute the target mixture at the input and output of each evaporator, and the mass flow associated.

1. Compute the heating demand of each evaporator and the mass flow of steam needed.

1. Derive the mass flow of steam going from the evaporator, through the splitter, to the heat exchanger.

1. Compute the heating capacity of each HEX and find the possible temperature steps according to the HEX requirements.

1. Compute the Glycolic water needed to cool down the milk and the waste water from HEX.

1. Derive the amount of whey that can be extracted from the processing module.

### Mixture at each Evaporator

The mass flow $m_1$ is a given data and the mass flows $m_{14}$, $m_{15}$ and $m_{16}$ are parameters that can be manually changed in order to get a reasonable system. Knowing those 4 mass flows and the target mixture, the fat content at each point can be computed by substracting water mass flows.

Given data:

- $m_1$ = 5.0 kg/s

- At point 11, Fat content = $50\%wt.$ and Water content = $50\%wt.$

Assumptions:

- $m_{14}$ = 1.6 kg/s

- $m_{15}$ = 1.28 kg/s

- $m_{16}$ = 0.8 kg/s

```{python fatincreasedef, echo = T, eval = T}

import pandas as pd
import numpy as np
from IPython.display import display, HTML

m1=5.0
m6=m1
m14=1.6
m15=1.28
m16=0.8

def fat_increase(m_int1, m_int2, m_int3, m_in = 5.0, p_fat_out3 = 0.50):
    m_out = m_in - m_int1 - m_int2 - m_int3
    if m_out < 0:
        print("ERROR: The mass of the output is negative.")
    # OUT 3
    p_water_out3 = 1 - p_fat_out3
    m_water_out3 = m_out * p_water_out3
    m_fat = m_out * p_fat_out3
    # OUT 2
    m_water_out2 = m_water_out3 + m_int3
    m_tot_2 = m_water_out2 + m_fat
    p_fat_out2 = m_fat / m_tot_2
    p_water_out2 = 1 - p_fat_out2
    # OUT 1
    m_water_out1 = m_water_out2 + m_int2
    m_tot_1 = m_water_out1 + m_fat
    p_fat_out1 = m_fat / m_tot_1
    p_water_out1 = 1 - p_fat_out1
    # OUT 0
    m_water_out0 = m_water_out1 + m_int1
    m_tot_0 = m_water_out0 + m_fat
    p_fat_out0 = m_fat / m_tot_0
    p_water_out0 = 1 - p_fat_out0
    if p_water_out0 > 0.883:
        print("WARNING: The water content in the final product is too high.")
    return m_out, p_fat_out0, p_fat_out1, p_fat_out2, p_fat_out3, p_water_out0, p_water_out1, p_water_out2, p_water_out3

m11, p_fat_out0, p_fat_out1, p_fat_out2, p_fat_out3, p_water_out0, p_water_out1, p_water_out2, p_water_out3 = fat_increase(m_int1=m14, m_int2=m15, m_int3=m16, m_in = m6, p_fat_out3 = 0.5)

data = {'Point': ['6', '7&8', '9&10', '11'],
        'Fat content (%)': [p_fat_out0*100, p_fat_out1*100, p_fat_out2*100, p_fat_out3*100],
        'Water content (%)': [p_water_out0*100, p_water_out1*100, p_water_out2*100, p_water_out3*100]}
df = pd.DataFrame(data)
df = df.set_index('Point')
df = df.round(2)
#print(df)
HTML(df.to_html())
```

### Heating Demand and Steam Flow of Evaporators

Knowing the mass flow of each evaporator, the heating demand can be computed. The heating demand is the amount of heat needed to evaporate the water in the milk and is given by the following equation. 

\begin{align}
    Q_{\text{evap}} &= m_{\text{in}} \cdot c_{p_{\text{in}}} \cdot \Delta T - m_{\text{in}} \cdot h_{\text{in}} + m_{\text{out1}} \cdot h_{\text{out1}} + m_{\text{out2}} \cdot h_{\text{out2}}
\end{align}

Then, knowing the heat requirement, it is possible to derive the mass flow of steam that is needed to evaporate the water, assuming a pressure value.

\begin{align}
    m_{\text{w}} &= \frac{Q_{\text{evap}}}{h_{\text{fg}}}
\end{align}

All the enthalpy, heat capacity and latent heat of vaporization are computed using the CoolProp library. The pressure of the steam is assumed.

Given/Known data:

- All the mixture mass flows, pressures and temperatures (either given or computed on previous section)

Assumptions:

- Steam at point 22 is assumed to be 1 bar, at 373 K (saturated steam)

- Perfect evaporator

```{python evap, echo = T, eval = T}
#Evaporator 1
from codes_01_energy_bill.coolprop_functions import mixture
from pyxosmose.state import State
def evaporator_fct(m_in,m_out1,m_out2,h_in,h_out1,h_out2,cp_in,deltaT,hfg):
    Q_evap = m_in*cp_in*deltaT - m_in*h_in + m_out1*h_out1 + m_out2*h_out2
    m_w = (Q_evap)/(hfg)
    #print('Qevap:',Q_evap)
    #print('mw:',m_w)
    return Q_evap, m_w
#Fixed Parameters 
p6=31000
p7=p6
p14=p6
p24=100000

T6=343
T7=T6
T14=343
T24=373 #can be changed if needed to reduce cost instead of having a high pressure

#Dependent Parameters
State_e6=mixture(T=T6, P=p6, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!
#print(State_e6)
h6=State_e6["enthalpy"]
cp6=State_e6["cpmass"]

State_e7=mixture(T=T7, P=p7, frac_water=p_water_out1, frac_fat=p_fat_out1) # this is a dictionary!!
#print(State_e7)
h7=State_e7["enthalpy"]

Point_e14 = State(pair='TP', fluid='water', temperature=T14, pressure=p14)
# Then calculate the state using the State class method StateCalc
Point_e14.StateCalc()
# And print the dictionary for revision
State_e14 = Point_e14.__dict__ # Whole dictionary with properties
h14=State_e14["enthalpy"]
#print(h14)

Point_e24 = State(pair='TP', fluid='water', temperature=T24, pressure=p24)
# Then calculate the state using the State class method StateCalc
Point_e24.StateCalc()
# And print the dictionary for revision
State_e24 = Point_e24.__dict__ # Whole dictionary with properties
hfg1=State_e24["enthalpy"]
#print(hfg1)

#Evap 1 calculation of heat 
m7=m6-m14
deltaT=5

Q_evap1, m_w1 = evaporator_fct(m6,m14,m7,h6,h14,h7,cp6,deltaT,hfg1)

#print(Q_evap1)
#print(m_w1)

#Evaporator 2

from codes_01_energy_bill.coolprop_functions import mixture

p8=25000
p9=p8
p15=25000
p17=p14

T8=338
T9=T8
T15=338
T17=T14

State_e8=mixture(T=T8, P=p8, frac_water=p_water_out2, frac_fat=p_fat_out2) # this is a dictionary!!
#print(State_e8)
h8=State_e8["enthalpy"]
cp8=State_e8["cpmass"]

State_e9=mixture(T=T9, P=p9, frac_water=p_water_out2, frac_fat=p_fat_out2) # this is a dictionary!!
#print(State_e9)
h9=State_e9["enthalpy"]

Point_e15 = State(pair='TP', fluid='water', temperature=T15, pressure=p15)
# Then calculate the state using the State class method StateCalc
Point_e15.StateCalc()
# And print the dictionary for revision
State_e15 = Point_e15.__dict__ # Whole dictionary with properties
h15=State_e15["enthalpy"]
#print(h15)

Point_e17 = State(pair='TP', fluid='water', temperature=T17, pressure=p17)
# Then calculate the state using the State class method StateCalc
Point_e17.StateCalc()
# And print the dictionary for revision
State_e17 = Point_e17.__dict__ # Whole dictionary with properties
hfg2=State_e17["enthalpy"]
#print(hfg2)

m8=m7
m9=m8-m15
deltaT=5

Q_evap2, m_w2 = evaporator_fct(m8,m15,m9,h8,h15,h9,cp8,deltaT,hfg2)

#print(Q_evap2)
#print(m_w2)

#Evaporator 3

from codes_01_energy_bill.coolprop_functions import mixture

p10=20000
p11=p10
p15=25000
p18=p15
p16=20000

T10=333
T11=T10
T15=338
T18=T15
T16=333

State_e10=mixture(T=T10, P=p10, frac_water=p_water_out2, frac_fat=p_fat_out2) # this is a dictionary!!
#print(State_e10)
h10=State_e10["enthalpy"]
cp10=State_e10["cpmass"]

State_e11=mixture(T=T11, P=p11, frac_water=p_water_out3, frac_fat=p_fat_out3) # this is a dictionary!!
#print(State_e11)
h11=State_e11["enthalpy"]

Point_e16 = State(pair='TP', fluid='water', temperature=T16, pressure=p16)
# Then calculate the state using the State class method StateCalc
Point_e16.StateCalc()
# And print the dictionary for revision
State_e16 = Point_e16.__dict__ # Whole dictionary with properties
h16=State_e16["enthalpy"]
#print(h16)

Point_e18 = State(pair='TP', fluid='water', temperature=T18, pressure=p18)
# Then calculate the state using the State class method StateCalc
Point_e18.StateCalc()
# And print the dictionary for revision
State_e18 = Point_e18.__dict__ # Whole dictionary with properties
hfg3=State_e18["enthalpy"]
#print(hfg3)

m10=m9
m11=m10-m16
deltaT=5

Q_evap3, m_w3 = evaporator_fct(m10,m16,m11,h10,h16,h11,cp10,deltaT,hfg3)

m17=m_w2
m18=m_w3
m24=m_w1

#print(Q_evap3)
#print(m_w3)
# print mass flow, temperature, preasure for the points 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18 in a dataframe

data = {'Point': ['6', '7', '8', '9', '10', '11', '14', '15', '16', '17', '18', '24'],
        'Mass flow (kg/s)': [m6, m7, m8, m9, m10, m11, m14, m15, m16, m17, m18, m24],
        'Temperature (K)': [T6, T7, T8, T9, T10, T11, T14, T15, T16, T17, T18, T24],
        'Pressure (Pa)': [p6, p7, p8, p9, p10, p11, p14, p15, p16, p17, p18, p24]}
df = pd.DataFrame(data)
df = df.set_index('Point')
df = df.round(4)
HTML(df.to_html())

#print in a data frame the heat demand of each evaporator
data = {'Evaporator': ['1', '2', '3'],
        'Heat demand (W)': [Q_evap1, Q_evap2, Q_evap3]}
df = pd.DataFrame(data)
df = df.set_index('Evaporator')
df = df.round(4)
HTML(df.to_html())
```

### Steam Flow to HEX

From previous sections, $m_{14}$, $m_{15}$, $m_{16}$, $m_{17}$, and $m_{18}$ are known. The mass flow of steam going through the HEX4, HEX3 can be computed using the following equation, corresponding to the ideal splitter:

\begin{align}
    m_{\text{steam,HEX}} &= m_{\text{in}} - m_{\text{steam,evap}}
\end{align}

The steam mass flow through HEX2 and HEX1 are known ; $m_{16}$ and $m_{11}$ respectively.

Known data:

- $m_{14}$, $m_{15}$, $m_{16}$, $m_{17}$, and $m_{18}$

Assumptions:

- Perfect splitter


```{python mass, echo = T, eval = T}
m19=m14-m_w2
m20=m15-m_w3
#print(' mHEX4 = m19 = ', m19, '\n', 'mHEX3 = m20 = ', m20, '\n', 'mHEX2 = m16 = ', m16, '\n', 'mHEX1 = m11 = ', m11, '\n',)
print(f'mHEX4 = m19 = {m19:.3f} (kg/s)\n'
      f'mHEX3 = m20 = {m20:.3f} (kg/s)\n'
      f'mHEX2 = m16 = {m16:.3f} (kg/s)\n'
      f'mHEX1 = m11 = {m11:.3f} (kg/s)\n')
```

### HEX Heat Demand and Temperature Steps

Before doing any calculation, it is noticeable that $m_{19}$, i.e. the hot flow through HEX4, is very small. The heating capacity is therefore too small to ensure the required heating. In order to reduce the cost of the system, it is preferable to remove HEX4. 
To compute the temperature steps and the heating capacity, the following method is used:

- Assume some temperature steps between the 3 HEX.

- Compute the heating capacity of each HEX, by being aware that $T_{\text{hot,out}} \geq T_{\text{cold,in}}$ condition is satisfied.

- Adapt the temperature steps with the heating capacity of each HEX, to satisfy the previous condition.

The following function is used to know the heating capacity of each HEX:

```
def HeatExchanger(mcold, cpcold, Tcoldin, Tcoldout, Thotin, cphot, mhot, hhot):
    Q = mcold * cpcold * (Tcoldout - Tcoldin)
    Qcond = mhot * abs(hhot)
    if Qcond < Q:
        #print("Cold stream is completely condensed")
        Thotout = (-Q + mhot * abs(hhot)) / (mhot * cphot) + Thotin
    else:
        #print("Cold stream is not completely condensed")
        Thotout = Thotin
    return Q, Thotout
```


```{python HX, echo = T, eval = T}

def HeatExchanger(mcold, cpcold, Tcoldin, Tcoldout, Thotin, cphot, mhot, hhot):
    Q = mcold*cpcold*(Tcoldout-Tcoldin)
    Qcond = mhot*abs(hhot)
    if Qcond<Q:
        #print("Cold stream is completely condensed")
        Thotout = (-Q+mhot*abs(hhot))/(mhot*cphot) + Thotin
    else:
        #print("Cold stream is not completely condensed")
        Thotout = Thotin
    #print('Q_cond:', Qcond, 'W')
    #print('Q_HEX:', Q, 'W')
    #print('T_cold_in:', Tcoldin, 'K')
    #print('T_cold_out:', Tcoldout, 'K')
    #print('T_hot_in:', Thotin, 'K')
    #print('T_hot_out:', Thotout, 'K')
    return Q, Thotout

# Heat Exchanger 4
# Calculation can be done but the module is not used

T4=338
T5=T4
T19=T14
p4=100000
State_e4=mixture(T=T4, P=p4, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!
cp4=State_e4["cpmass"]
m5=m1
m19=m14-m_w2
p19=p6
Point_e19 = State(pair='TP', fluid='water', temperature=T19, pressure=p19)
# Then calculate the state using the State class method StateCalc
Point_e19.StateCalc()
# And print the dictionary for revision
State_e19 = Point_e19.__dict__ # Whole dictionary with properties
h19=State_e19["enthalpy"]
cp19=State_e19["cpmass"]

Q4, Thot4 = HeatExchanger(m5, cp4, T4, T5, T19, cp19, m19, h19)

#Heat Exchanger 3
T3=317.5
T20=T15
m4=m1
m20=m15-m_w3
p20=p8
p3=p4
State_e3=mixture(T=T3, P=p3, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!
cp3=State_e3["cpmass"]

Point_e20 = State(pair='TP', fluid='water', temperature=T20, pressure=p20)
# Then calculate the state using the State class method StateCalc
Point_e20.StateCalc()
# And print the dictionary for revision
State_e20 = Point_e20.__dict__ # Whole dictionary with properties
h20=State_e20["enthalpy"]
cp20=State_e20["cpmass"]

Q3, Thot3 = HeatExchanger(m4, cp3, T3, T4, T20, cp20, m20, h20)

#Heat Exchanger 2
T2=302
m3=m1
p2=p4
State_e2=mixture(T=T2, P=p2, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!
cp2=State_e2["cpmass"]
cp16=State_e16["cpmass"]

Q2, Thot2 = HeatExchanger(m3, cp2, T2, T3, T16, cp16, m16, h16)

#Heat Exchanger 1
T1=277
p1=p4
State_e1=mixture(T=T1, P=p1, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!
cp1=State_e1["cpmass"]
cp11=State_e11["cpmass"]
h11=State_e11["enthalpy"]

# mcold, cpcold, Tcoldin, Tcoldout, Thotin, cphot, mhot, hhot
Q1, Thot1 = HeatExchanger(m1, cp1, T1, T2, T11, cp11, m11, h11)

#HeatExchanger(mcold, cpcold, Tcoldin, Tcoldout, Thotin, cphot, mhot, hhot)
#Q4, Thot4 = HeatExchanger(m5, cp4, T4, T5, T19, cp19, m19, h19)
#Q3, Thot3 = HeatExchanger(m4, cp3, T3, T4, T20, cp20, m20, h20)
#Q2, Thot2 = HeatExchanger(m3, cp2, T2, T3, T16, cp16, m16, h16)
#Q1, Thot1 = HeatExchanger(m1, cp1, T1, T2, T11, cp11, m11, h11)

data = {'HEX': ['1', '2', '3', '4'],
        'Steam Flow (kg/s)' : [m11, m16, m20, m19],
        'T cold in (K)': [T1, T2, T3, T4],
        'T cold out (K)': [T2, T3, T4, T5],
        'T hot in (K)': [T11, T16, T20, T19],
        'T hot out (K)': [Thot1, Thot2, Thot3, Thot4],
        'Heat (W)': [Q1, Q2, Q3, Q4]}
df = pd.DataFrame(data)
df = df.set_index('HEX')
df = df.round(2)
HTML(df.to_html())
```

### Cooling Demand

HEX5 ensures that the milk is cooled down from $T_{\text{hot,out,HEX1}}$ = 290.38 K to 277 K. The cooling demand is computed using the following equation:

\begin{align}
    Q_{\text{glycol}} = m_{12} \cdot cp_{12} \cdot (T_{12} - T_{13})
\end{align}

\begin{align}
    m_{\text{glycol}} = \frac{Q_{\text{glycol}}}{cp_{{\text{glycol}}} \cdot (T_{\text{out,glycol}} - T_{\text{in,glycol}})}
\end{align}

Given/Known data:

- $m_{12}$, $T_{12}$, $T_{13}$

Assumptions:

- $T_{\text{in,glycol}}$ = 270 K
- $T_{\text{out,glycol}}$ = 277 K
- $cp_{\text{glycol}}$ = 2294 kJ/kg.K


```{python HXGlycolic, echo = T, eval = T}
#Heat Exchanger Glycolic water

p12=p11
T12=Thot1
T13=277
m12=m11
#print(p12,p_water_out3,p_fat_out3)
State_e12 = mixture(T=T12, P=p12, frac_water=p_water_out3, frac_fat=p_fat_out3)
cp12=State_e12["cpmass"]
#print('cp12', cp12)


Tinglycol=270
Toutglycol=277
cpglycol=2294

Qglycol = m12*cp12*(T12-T13)
mglycol = m12*(cp12/cpglycol)*(T12-T13)/(Toutglycol-Tinglycol)

print(f'Q_glycol = {Qglycol:.3f} (W)\n'
      f'm_glycol = {mglycol:.3f} (kg/s)')

```

### Whey Extraction

Finally, in order to match the target fat content, it is possible to extract whey from the system. The mass flow of whey is computed using the following equation:

**Processing**:

Flow In:
\begin{align*}
    m_{\text{pasteur}} &= 7.52 \text{ (kg/s)}\\
    p_{\text{water\_pasteur}} &= 0.883 \\
    p_{\text{fat\_pasteur}} &= 1 - p_{\text{water\_pasteur}}
\end{align*}

Flow to HEX:

\begin{align*}
    m_1 &= 5.0 \text{ (kg/s)}\\
    p_{\text{water\_out1}} &= 0.868 \\
    p_{\text{fat\_out1}} &= 1 - p_{\text{water\_out1}}
\end{align*}

Flow to Filter:
\begin{align*}
    m_{\text{water\_21}} &= m_{\text{pasteur}} \cdot p_{\text{water\_pasteur}} - p_{\text{water\_out1}} \cdot m_1 \\
    m_{\text{fat\_21}} &= m_{\text{pasteur}} \cdot p_{\text{fat\_pasteur}} - p_{\text{fat\_out1}} \cdot m_1 \\
    m_{21} &= m_{\text{pasteur}} - m_1 \\
    p_{\text{water\_21}} &= \frac{m_{\text{water\_21}}}{m_{21}} \\
    p_{\text{fat\_21}} &= \frac{m_{\text{fat\_21}}}{m_{21}}
\end{align*}

**Filter:**

Wastewater flow:

\begin{align*}
    m_{23} &= 1 \text{ (kg/s)}\\
    p_{\text{water\_23}} &= 1 \\
    p_{\text{fat\_23}} &= 0
\end{align*}

Whey flow:
\begin{align*}
    m_{\text{water\_22}} &= m_{\text{water\_21}} - m_{23} \cdot p_{\text{water\_23}} \\
    m_{\text{fat\_22}} &= m_{\text{fat\_21}} - m_{23} \cdot p_{\text{fat\_23}} \\
    m_{22} &= m_{21} - m_{23} \\
    p_{\text{water\_22}} &= \frac{m_{\text{water\_22}}}{m_{22}} \\
    p_{\text{fat\_22}} &= \frac{m_{\text{fat\_22}}}{m_{22}}
\end{align*}


```{python Processing, echo = T, eval = T}

# Processing
# Flow In
m_pasteur = 7.52
p_water_pasteur = 0.883
p_fat_pasteur = 1 - p_water_pasteur

# Flow Out
m_water_21 = m_pasteur * p_water_pasteur - p_water_out0 * m1
m_fat_21 = m_pasteur * p_fat_pasteur - p_fat_out0 * m1

m_21 = m_pasteur - m1
p_water_21 = m_water_21 / m_21
p_fat_21 = m_fat_21 / m_21

# Filter
m_23 = 1
p_water_23 = 1
p_fat_23 = 0

# Flow out Whey
m_water_22 = m_water_21 - m_23 * p_water_23
m_fat_22 = m_fat_21 - m_23 * p_fat_23

m_22 = m_21 - m_23
p_water_22 = m_water_22 / m_22
p_fat_22 = m_fat_22 / m_22

# Print in a data frame the percent and mass flow of fat and water for point pasteur, 21, 22 and 23
data = {'Point': ['Pasteur', '21', '22', '23'],
        'Fat content (%)': [p_fat_pasteur*100, p_fat_21*100, p_fat_22*100, p_fat_23*100],
        'Water content (%)': [p_water_pasteur*100, p_water_21*100, p_water_22*100, p_water_23*100],
        'Mass flow (kg/s)': [m_pasteur, m_21, m_22, m_23]}
dfwhey = pd.DataFrame(data)
dfwhey = dfwhey.set_index('Point')
dfwhey = dfwhey.round(2)
#print(dfwhey)
HTML(dfwhey.to_html())
```

### Summary for the evaporator section


```{python recap, echo = T, eval = T}
#Entropy

#Computing remaining states
p5=p4
State_e5 = mixture(T=T5, P=p5, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!

p13=p12
State_e13 = mixture(T=T13, P=p13, frac_water=p_water_out3, frac_fat=p_fat_out3) # this is a dictionary!!

T21=277
p21=p1
State_e21 = mixture(T=T21, P=p21, frac_water=p_water_21, frac_fat=p_fat_21) # this is a dictionary!!

T22=T21
p22=p21
State_e22 = mixture(T=T22, P=p22, frac_water=p_water_22, frac_fat=p_fat_22) # this is a dictionary!!

T23=T21
p23=p21
State_e23 = mixture(T=T23, P=p23, frac_water=p_water_23, frac_fat=p_fat_23) # this is a dictionary!!

#Exctraction of entropy
s1=State_e1["entropy"]
s2=State_e2["entropy"]
s3=State_e3["entropy"]
s4=State_e4["entropy"]
s5=State_e5["entropy"]
s6=State_e6["entropy"]
s7=State_e7["entropy"]
s8=State_e8["entropy"]
s9=State_e9["entropy"]
s10=State_e10["entropy"]
s11=State_e11["entropy"]
s12=State_e12["entropy"]
s13=State_e13["entropy"]
s14=State_e14["entropy"]
s15=State_e15["entropy"]
s16=State_e16["entropy"]
s17=State_e17["entropy"]
s18=State_e18["entropy"]
s19=State_e19["entropy"]
s20=State_e20["entropy"]
s21=State_e21["entropy"]
s22=State_e22["entropy"]
s23=State_e23["entropy"]

h1=State_e1["enthalpy"]
h2=State_e2["enthalpy"]
h3=State_e3["enthalpy"]
h4=State_e4["enthalpy"]
h5=State_e5["enthalpy"]
h6=State_e6["enthalpy"]
h7=State_e7["enthalpy"]
h8=State_e8["enthalpy"]
h9=State_e9["enthalpy"]
h10=State_e10["enthalpy"]
h11=State_e11["enthalpy"]
h12=State_e12["enthalpy"]
h13=State_e13["enthalpy"]
h14=State_e14["enthalpy"]
h15=State_e15["enthalpy"]
h16=State_e16["enthalpy"]
h17=State_e17["enthalpy"]
h18=State_e18["enthalpy"]
h19=State_e19["enthalpy"]
h20=State_e20["enthalpy"]
h21=State_e21["enthalpy"]
h22=State_e22["enthalpy"]
h23=State_e23["enthalpy"]

m2=m1
m13=m12
m17=m_w2
m18=m_w3
m21 = m_21
m22 = m_22
m23 = m_23


#Recap
#Print in a dataframe: Temperature, Pressure, Mass flow, Enthalpy, Entropy for each point (i.e. 1 to 23)

datarecap = {'Point': ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10','11', '12', '13', '14', '15', '16', '17', '18', '19', '20','21', '22', '23'],
        'Temperature': [T1, T2, T3, T4, T5, T6, T7, T8, T9, T10,T11, T12, T13, T14, T15, T16, T17, T18, T19, T20,T21, T22, T23],
        'Pressure': [p1, p2, p3, p4, p5, p6, p7, p8, p9, p10,p11, p12, p13, p14, p15, p16, p17, p18, p19, p20,p21, p22, p23],
        'Mass flow': [m1, m2, m3, m4, m5, m6, m7, m8, m9, m10,m11, m12, m13, m14, m15, m16, m17, m18, m19, m20,m21, m22, m23],
        'Enthalpy': [h1, h2, h3, h4, h5, h6, h7, h8, h9, h10,h11, h12, h13, h14, h15, h16, h17, h18, h19, h20,h21, h22, h23],
        'Entropy': [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10,s11, s12, s13, s14, s15, s16, s17, s18, s19, s20,s21, s22, s23]}
dfrecap = pd.DataFrame(datarecap)
dfrecap = dfrecap.set_index('Point')
dfrecap = dfrecap.round(2)
HTML(dfrecap.to_html())

#Print in a dataframe: Q for each heat exchanger and evaporator
dataevap = {'Evaporator': ['1', '2', '3'],
        'Q': [Q_evap1, Q_evap2, Q_evap3]}
dfevap = pd.DataFrame(dataevap)
dfevap = dfevap.set_index('Evaporator')
dfevap = dfevap.round(2)
HTML(dfevap.to_html())

#Print in a dataframe: Q for each heat exchanger and evaporator
datahx = {'Heat_Exchanger': ['1', '2', '3', '4', 'Glycolic'],
        'Q': [Q1, Q2, Q3, Q4, Qglycol]}
dfhx = pd.DataFrame(datahx)
dfhx = dfhx.set_index('Heat_Exchanger')
dfhx = dfhx.round(2)
HTML(dfhx.to_html())
```

```{python exportation, echo = T, eval = T}
#Load the dataframe in a csv file

dfrecap.to_csv('dfrecap.csv')
dfevap.to_csv('dfevap.csv')
dfhx.to_csv('dfhx.csv')
```



## Process 3

process 3



