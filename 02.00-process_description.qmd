# Process description and analysis

To provide practical solutions to our industrial partner, the dairy factory, our first task is to show that we truly grasp the problem. To a business manager, industrial processes may seem mysterious and complex, like "black boxes." However, as engineers, we need to dig into the details, using mathematics and physics to analyze and design these industrial processes.

In this section, your task is to compute the thermodynamic properties of all the streams within each section of the dairy factory. The data collected here will be instrumental in calculating exergy efficiency and energy bills in the following section. To facilitate your work, we have provided an illustrative example for the Pasteurization section below:

## Pasteurisation section

In your analysis, it is essential to incorporate the following elements:

- Description of the Pasteurisation section

    - Provide an overview of the Pasteurization section, including its functionality, overall mass balance, and key processes.
    - Briefly introduce the flows within this process, highlighting their significance in the overall operation.
    - Clearly state any important assumptions made during your analysis.

- Calculation of the state of each stream (= define temperature, pressure, enthalpy, mass flow, etc...)
    
    - Theoretical basis or your calculation.
    - Utilize the methods illustrated in the example provided in the **Survival Guide** to calculate the thermodynamic properties of each stream. You can employ tools like `Python` and `CoolProp` for this purpose.
    - You do not need to include the detailed calculation process in the final report. It's advisable to create separate files for each section (e.g., qmd files) to perform the calculations.
    - Summarize all your results in a comprehensive table for easy reference.

- Summarzing all the energy/heat streams in the section. 

By following these guidelines, you can ensure a thorough and well-structured analysis of the Pasteurization section and other sections of the dairy factory.

> Please keep in mind that you have the option to include `R` and `Python` code chunks in your report. Be sure to reference the examples provided in the Survival Guide.

```{python coolprop, echo = T, eval = T}
from CoolProp.CoolProp import PropsSI
rho = PropsSI('D', 'T', 298.15, 'P', 101325, 'Nitrogen')
```


```{python state-function, echo = T, eval = T}
from pyxosmose.state import State
# First, define the thermodynamic point,
Point1 = State(pair='TP', fluid='water', temperature=338, pressure=25000)
# Then calculate the state using the State class method StateCalc
Point1.StateCalc()
# And print the dictionary for revision
State1 = Point1.__dict__ # Whole dictionary with properties
h1 = Point1.enthalpy # Point.enthalpy is equivalent to State1["enthalpy"]
print(State1)
```

```{r render-table, echo = T}
# a way to pass the value from python to r is to through json file
library(reticulate)
x = 42
```


## Evaporation section

```{python state-function, echo = T, eval = T}

import pandas as pd
import numpy as np

m1=5.0
m6=m1
m14=1.6
m15=1.28
m16=0.8



def fat_increase(m_int1, m_int2, m_int3, m_in = 5.0, p_fat_out3 = 0.50):
    m_out = m_in - m_int1 - m_int2 - m_int3
    if m_out < 0:
        print("ERROR: The mass of the output is negative.")
    # OUT 3
    p_water_out3 = 1 - p_fat_out3
    m_water_out3 = m_out * p_water_out3
    m_fat = m_out * p_fat_out3
    # OUT 2
    m_water_out2 = m_water_out3 + m_int3
    m_tot_2 = m_water_out2 + m_fat
    p_fat_out2 = m_fat / m_tot_2
    p_water_out2 = 1 - p_fat_out2
    # OUT 1
    m_water_out1 = m_water_out2 + m_int2
    m_tot_1 = m_water_out1 + m_fat
    p_fat_out1 = m_fat / m_tot_1
    p_water_out1 = 1 - p_fat_out1
    # OUT 0
    m_water_out0 = m_water_out1 + m_int1
    m_tot_0 = m_water_out0 + m_fat
    p_fat_out0 = m_fat / m_tot_0
    p_water_out0 = 1 - p_fat_out0
    if p_water_out0 > 0.883:
        print("WARNING: The water content in the final product is too high.")
    return m_out, p_fat_out0, p_fat_out1, p_fat_out2, p_fat_out3, p_water_out0, p_water_out1, p_water_out2, p_water_out3

m11, p_fat_out0, p_fat_out1, p_fat_out2, p_fat_out3, p_water_out0, p_water_out1, p_water_out2, p_water_out3 = fat_increase(m_int1=m14, m_int2=m15, m_int3=m16, m_in = m6, p_fat_out3 = 0.50)


```

```{python state-function, echo = T, eval = T}

data = {'Point': ['6', '7&8', '9&10', '11'],
        'Fat content (%)': [p_fat_out0*100, p_fat_out1*100, p_fat_out2*100, p_fat_out3*100],
        'Water content (%)': [p_water_out0*100, p_water_out1*100, p_water_out2*100, p_water_out3*100]}
df = pd.DataFrame(data)
df = df.set_index('Point')
df = df.round(2)
print(df)
```

```{python state-function, echo = T, eval = T}
#Evaporator 1
from codes_01_energy_bill.coolprop_functions import mixture
from pyxosmose.state import State
def evaporator_fct(m_in,m_out1,m_out2,h_in,h_out1,h_out2,cp_in,deltaT,hfg):
    Q_evap = m_in*cp_in*deltaT - m_in*h_in + m_out1*h_out1 + m_out2*h_out2
    m_w = (Q_evap)/(hfg)
    return Q_evap, m_w
#Fixed Parameters 
p6=31000
p7=p6
p14=p6
p24=100000

T6=343
T7=T6
T14=343
T24=373 #can be changed if needed to reduce cost instead of having a high pressure

#Dependent Parameters
State_e6=mixture(T=T6, P=p6, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!
print(State_e6)
h6=State_e6["enthalpy"]
cp6=State_e6["cpmass"]


State_e7=mixture(T=T7, P=p7, frac_water=p_water_out1, frac_fat=p_fat_out1) # this is a dictionary!!
print(State_e7)
h7=State_e7["enthalpy"]

Point_e14 = State(pair='TP', fluid='water', temperature=T14, pressure=p14)
# Then calculate the state using the State class method StateCalc
Point_e14.StateCalc()
# And print the dictionary for revision
State_e14 = Point_e14.__dict__ # Whole dictionary with properties
h14=State_e14["enthalpy"]
print(h14)


Point_e24 = State(pair='TP', fluid='water', temperature=T24, pressure=p24)
# Then calculate the state using the State class method StateCalc
Point_e24.StateCalc()
# And print the dictionary for revision
State_e24 = Point_e24.__dict__ # Whole dictionary with properties
hfg1=State_e24["enthalpy"]
print(hfg1)


#Evap 1 calculation of heat 
m7=m6-m14
deltaT=5

Q_evap1, m_w1 = evaporator_fct(m6,m14,m7,h6,h14,h7,cp6,deltaT,hfg1)

print(Q_evap1)
print(m_w1)
```

```{python state-function, echo = T, eval = T}
#Evaporator 2

from codes_01_energy_bill.coolprop_functions import mixture

p8=25000
p9=p8
p10=20000
p11=p10
p15=25000
p17=p14

T8=338
T9=T8
T10=333
T11=T10
T15=338
T17=T14

State_e8=mixture(T=T8, P=p8, frac_water=p_water_out2, frac_fat=p_fat_out2) # this is a dictionary!!
print(State_e8)
h8=State_e8["enthalpy"]
cp8=State_e8["cpmass"]

State_e9=mixture(T=T9, P=p9, frac_water=p_water_out2, frac_fat=p_fat_out2) # this is a dictionary!!
print(State_e9)
h9=State_e9["enthalpy"]

Point_e15 = State(pair='TP', fluid='water', temperature=T15, pressure=p15)
# Then calculate the state using the State class method StateCalc
Point_e15.StateCalc()
# And print the dictionary for revision
State_e15 = Point_e15.__dict__ # Whole dictionary with properties
h15=State_e15["enthalpy"]
print(h15)

Point_e17 = State(pair='TP', fluid='water', temperature=T17, pressure=p17)
# Then calculate the state using the State class method StateCalc
Point_e17.StateCalc()
# And print the dictionary for revision
State_e17 = Point_e17.__dict__ # Whole dictionary with properties
hfg2=State_e17["enthalpy"]
print(hfg2)

m8=m7
m9=m8-m15
deltaT=5

Q_evap2, m_w2 = evaporator_fct(m8,m15,m9,h8,h15,h9,cp8,deltaT,hfg2)

print(Q_evap2)
print(m_w2)
```

```{python state-function, echo = T, eval = T}

#Evaporator 3
State_e10=mixture(T=T10, P=p10, frac_water=p_water_out2, frac_fat=p_fat_out2) # this is a dictionary!!
print(State_e10)
h11=State_e10["enthalpy"]

State_e11=mixture(T=T11, P=p11, frac_water=p_water_out3, frac_fat=p_fat_out3) # this is a dictionary!!
print(State_e11)
h11=State_e11["enthalpy"]
```

```{python state-function, echo = T, eval = T}
from pyxosmose.state import State
# First, define the thermodynamic point,
Point1 = State(pair='TP', fluid='water', temperature=338, pressure=25000)
# Then calculate the state using the State class method StateCalc
Point1.StateCalc()
# And print the dictionary for revision
State1 = Point1.__dict__ # Whole dictionary with properties
h1 = Point1.enthalpy # Point.enthalpy is equivalent to State1["enthalpy"]
print(State1)

Point_e15 = State(pair='TP', fluid='water', temperature=338, pressure=25000)
# Then calculate the state using the State class method StateCalc
Point_e15.StateCalc()
# And print the dictionary for revision
State_e15 = Point_e15.__dict__ # Whole dictionary with properties
h_e15 = Point_e15.enthalpy # Point.enthalpy is equivalent to State1["enthalpy"]
print(State_e15)

#e24
p24=200000
T24=343
Point_e24 = State(pair='TP', fluid='water', temperature=T24, pressure=p24)
# Then calculate the state using the State class method StateCalc
Point_e24.StateCalc()
# And print the dictionary for revision
State_e24 = Point_e24.__dict__ # Whole dictionary with properties
print(State_e24)

#e17
p17=31000
T17=338
Point_e17 = State(pair='TP', fluid='water', temperature=T17, pressure=p17)
# Then calculate the state using the State class method StateCalc
Point_e17.StateCalc()
# And print the dictionary for revision
State_e17 = Point_e17.__dict__ # Whole dictionary with properties
h_e17 = Point_e17.enthalpy # Point.enthalpy is equivalent to State1["enthalpy"]
print(State_e17)

#e18
p18=25000
T18=333
Point_e18 = State(pair='TP', fluid='water', temperature=T18, pressure=p18)
# Then calculate the state using the State class method StateCalc
Point_e18.StateCalc()
# And print the dictionary for revision
State_e18 = Point_e18.__dict__ # Whole dictionary with properties
print(State_e18)
```

```{python state-function, echo = T, eval = T}
hfg1=State_e24["enthalpy"]
hfg2=State_e17["enthalpy"]
hfg3=State_e18["enthalpy"]
```

```{python state-function, echo = T, eval = T}

m2=m1
m3=m1
m4=m1
m5=m1
m7=m14-m6
m8=m7
m9=m15-m8
m10=m9
m11=m11
m12=m11
m13=m11
#m17=m_w2
#m18=m_w3
#m19=m14-m17
#m20=m15-m18

m23=1.0
#m24=m_w1
```



```{python state-function, echo = T, eval = T}
deltaT=5
def evaporator_fct(m_in,m_out1,m_out2,h_in,h_out1,h_out2,cp_in,deltaT,hfg):
    Q_evap = -m_in*cp_in*deltaT - m_in*h_in + m_out1*h_out1 + m_out2*h_out2
    m_w = (Q_evap)/(hfg)
    return Q_evap, m_w
Q_evap1, m_w1 = evaporator_fct(m6,m14,m7,h6,h14,h7,cp6,deltaT,hfg1)
#Q_evap2, m_w2 = evaporator_fct(m8,m15,m9,h8,h15,h9,cp8,deltaT,hfg2)
#Q_evap3, m_w3 = evaporator_fct(m10,m16,m11,h10,h16,h11,cp10,deltaT,hfg3)

print(Q_evap1)
print(m_w1)
#print(Q_evap2)
#print(m_w2)
#print(Q_evap3)
#print(m_w3)
```

```{python state-function, echo = T, eval = T}
```

```{python state-function, echo = T, eval = T}


```

```{python state-function, echo = T, eval = T}
```

```{python state-function, echo = T, eval = T}
```

```{python state-function, echo = T, eval = T}


```


## Process 3

...

