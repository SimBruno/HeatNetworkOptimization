# Process description and analysis

To provide practical solutions to our industrial partner, the dairy factory, our first task is to show that we truly grasp the problem. To a business manager, industrial processes may seem mysterious and complex, like "black boxes." However, as engineers, we need to dig into the details, using mathematics and physics to analyze and design these industrial processes.

In this section, your task is to compute the thermodynamic properties of all the streams within each section of the dairy factory. The data collected here will be instrumental in calculating exergy efficiency and energy bills in the following section. To facilitate your work, we have provided an illustrative example for the Pasteurization section below:

## Pasteurisation section

In your analysis, it is essential to incorporate the following elements:

- Description of the Pasteurisation section

    - Provide an overview of the Pasteurization section, including its functionality, overall mass balance, and key processes.
    - Briefly introduce the flows within this process, highlighting their significance in the overall operation.
    - Clearly state any important assumptions made during your analysis.

- Calculation of the state of each stream (= define temperature, pressure, enthalpy, mass flow, etc...)
    
    - Theoretical basis or your calculation.
    - Utilize the methods illustrated in the example provided in the **Survival Guide** to calculate the thermodynamic properties of each stream. You can employ tools like `Python` and `CoolProp` for this purpose.
    - You do not need to include the detailed calculation process in the final report. It's advisable to create separate files for each section (e.g., qmd files) to perform the calculations.
    - Summarize all your results in a comprehensive table for easy reference.

- Summarzing all the energy/heat streams in the section. 

By following these guidelines, you can ensure a thorough and well-structured analysis of the Pasteurization section and other sections of the dairy factory.

> Please keep in mind that you have the option to include `R` and `Python` code chunks in your report. Be sure to reference the examples provided in the Survival Guide.

```{python coolprop, echo = T, eval = T}
from CoolProp.CoolProp import PropsSI
rho = PropsSI('D', 'T', 298.15, 'P', 101325, 'Nitrogen')
```

```{python state-function, echo = T, eval = T}
from codes_01_energy_bill.coolprop_functions import mixture

State2=mixture(T=343, P=25000, frac_water=0.7889, frac_fat=0.2111) # this is a dictionary!!
print(State2)
```

```{python state-function, echo = T, eval = T}
from pyxosmose.state import State
# First, define the thermodynamic point,
Point1 = State(pair='TP', fluid='water', temperature=338, pressure=25000)
# Then calculate the state using the State class method StateCalc
Point1.StateCalc()
# And print the dictionary for revision
State1 = Point1.__dict__ # Whole dictionary with properties
h1 = Point1.enthalpy # Point.enthalpy is equivalent to State1["enthalpy"]
print(State1)
```

```{r render-table, echo = T}
# a way to pass the value from python to r is to through json file
library(reticulate)
x = 42
```


## Evaporation section


```{python state-function, echo = T, eval = T}
from codes_01_energy_bill.coolprop_functions import mixture

State_e8=mixture(T=343, P=25000, frac_water=0.7889, frac_fat=0.2111) # this is a dictionary!!
print(State_e8)
State_e9=mixture(T=343, P=25000, frac_water=0.7889, frac_fat=0.2111) # this is a dictionary!!
print(State_e9)

```

```{python state-function, echo = T, eval = T}
from pyxosmose.state import State
# First, define the thermodynamic point,
Point1 = State(pair='TP', fluid='water', temperature=338, pressure=25000)
# Then calculate the state using the State class method StateCalc
Point1.StateCalc()
# And print the dictionary for revision
State1 = Point1.__dict__ # Whole dictionary with properties
h1 = Point1.enthalpy # Point.enthalpy is equivalent to State1["enthalpy"]
print(State1)

Point_e15 = State(pair='TP', fluid='water', temperature=338, pressure=25000)
# Then calculate the state using the State class method StateCalc
Point_e15.StateCalc()
# And print the dictionary for revision
State_e15 = Point_e15.__dict__ # Whole dictionary with properties
h_e15 = Point_e15.enthalpy # Point.enthalpy is equivalent to State1["enthalpy"]
print(State_e15)

Point_e17 = State(pair='TP', fluid='water', temperature=338, pressure=25000)
# Then calculate the state using the State class method StateCalc
Point_e17.StateCalc()
# And print the dictionary for revision
State_e17 = Point_e17.__dict__ # Whole dictionary with properties
h_e17 = Point_e17.enthalpy # Point.enthalpy is equivalent to State1["enthalpy"]
print(State_e17)
```

```{python state-function, echo = T, eval = T}

m8=3.6
m15=1.28
m9=2.32
deltaT=5
cp8=State_e8.cpmass
h8=State_e8.enthalpy
h15=Point_e15.enthalpy
h9=State_e9.enthalpy

Q_evap2 = -m8*cp8*deltaT - m8*h8 +m15*h15+m9h9

```


## Process 3

...

