# Process description and analysis

> **Task Instructions**
>
>To provide practical solutions to our industrial partner, the dairy factory, our first task is to show that we truly grasp the problem. To a business manager, industrial processes may seem mysterious and complex, like "black boxes." However, as engineers, we need to dig into the details, using mathematics and physics to analyze and design these industrial processes.
>
>In this section, your task is to compute the thermodynamic properties of all the streams within each section of the dairy factory. The data collected here will be instrumental in calculating exergy efficiency and energy bills in the following section. To facilitate your work, we have provided an illustrative example for the Pasteurization section below:

## Pasteurisation

![Pasteurisation](Figures/pasteurisation.svg)

In this section will be presented the mass and energy balances for each chemical operation of the milk pasteurisation. This pasterisation aims to produce cream and milk from fresh milk with the intergation of a thickener at some point. 


### Mass Flows 

Because of the mass flow conservation, we have:


$$
\begin{cases}
    \dot m_{Mixure~out} = \dot m_{Past{\_}Cent}=\dot m_{Fresh~Milk}=8~kg/s \\
    \dot m_{Milk{\_}0} = \dot m_{Past{\_}a} = \dot m_{Past{\_}b} = \dot m_{Past{\_}c} =  \dot m_{Past{\_}d} = \dot m_{Milk} = 7.52~kg/s \\
    \dot m_{cream{\_}0} = \dot m_{crpast{\_}a} = \dot m_{Past{\_}cent} - \dot m_{Milk{\_}0} =  \dot m_{Fresh~Milk} - \dot m_{Milk} = 8 - 7.52 = 0.48~kg/s \\
    \dot m_{crpast{\_}x} = \dot m_{crpast{\_}b} = \dot m_{crpast{\_}c} = \dot m_{Cream} =  0.55~kg/s \\
    \dot m_{thickener} = 0.07~kg/s 
\end{cases}
$$


Consequently, all mass flows are defined.

### Heat Capacities

The following heat capacities are already provided :

- $c_{p,Raw~Milk} = 3.8 kJ/(kgK)$ (milk after centrifuge)

- $c_{p,Cream~ac} = 3.4 kJ/(kgK)$ (cream after centrifuge)

From Litterature @NAGHAVI201864 we chose:

- $c_{p,thickener} = c_{p,alginate} = 4.175 kJ/(kg.K)$ 

Assuming that the mixer provides an ideal mix, we have:

$$
\begin{align*}
    c_{p,cream} &= \frac{\dot m_{cream{\_}0}}{\dot m_{Cream}} \cdot c_{p,Cream~ac} + \frac{\dot m_{thickener}}{\dot m_{Cream}} \cdot c_{p,thickener} \\
    \\
    c_{p,cream} &= \frac{0.48}{0.55} \cdot 3400 + \frac{0.07}{0.55} \cdot 4175
\end{align*}
$$ 

We also consider the centrifuge separes an ideal mix, therefore:

$$
\begin{align*}
    c_{p,fresh{\_}milk} &= \frac{\dot m_{cream{\_}0}}{\dot m_{fresh{\_}milk}} \cdot c_{p,Cream~ac} + \frac{\dot m_{Milk{\_}0} }{\dot m_{fresh{\_}milk}} \cdot c_{p,raw{\_}milk} \\
    \\
    c_{p,fresh{\_}milk} &= \frac{0.48}{8} \cdot 3400 + \frac{7.52}{8} \cdot 3800
\end{align*}
$$

Finally:

- $c_{p,cream} = 3.5~kJ/(kgK)$
- $c_{p,fresh_milk} = 3.78~kJ/(kgK)$

### Equations of operations 

In this subsection are indicated the heat flow equations for each element of the pasteurisation. All variables are defined whether on the pasteurization scheme or in the mass flow and heat capacities sections. The $\Delta T = 5K$ is applied on Past2, between Milk_0 and Past_a and on Past 5, between crpast_c and cream. Regarding the glycolic water and the steam, the same temperatures and heat capacities as the one in the beer pasteurization process are used, and it is assumed the exact cooling or the heating are controlled by the mass flow of these elements. 

#### Refrigeration

$$
\begin{align*}
    \dot Q_{refrigeration} &= \dot m_{Fresh~Milk} \cdot c_{p,Fresh~Milk} \cdot (T_{Fresh~Milk} - T_{Mixure{\_}out}) \\
    &= \dot m_{gliwater{\_}ref} \cdot c_{p,gliwater} \cdot (T_{Gliwater{\_}out,ref} - T_{Gliwater{\_}in,ref})
\end{align*}
$${#eq-past_refrigeration}

#### PAST1

$$
\begin{align*}
    \dot Q_{past1} &= \dot m_{Fresh~Milk} \cdot c_{p,Fresh~Milk} \cdot (T_{Past{\_}cent} - T_{Mixure{\_}out}) \\
    &= \dot m_{Milk} \cdot c_{p,Raw~Milk} \cdot (T_{Past{\_}c} - T_{Past{\_}d})
\end{align*}
$${#eq-past_past1}

#### PAST2

$$
\begin{align*}
    \dot Q_{past2} &= \dot m_{Milk} \cdot c_{p,Raw~Milk} \cdot (T_{Past{\_}a} - T_{Milk{\_}0}) \\
    &= \dot m_{Milk} \cdot c_{p,Raw~Milk} \cdot (T_{Past{\_}b} - T_{Past{\_}c})
\end{align*}
$${#eq-past_past2}

#### CENTRIFUGE

$$
\begin{align*}
    T_{Past{\_}cent} = T_{Milk{\_}0} = T_{cream{\_}0} ~~~~~~(isothermal~mix)
\end{align*}
$${#eq-past_centrifuge}

#### PAST3

$$
\begin{align*}
    \dot Q_{past3} &= \dot m_{Milk} \cdot c_{p,Raw~Milk} \cdot (T_{Milk{\_}b} - T_{Past{\_}a}) \\
    &= \dot m_{steam{\_}p2} \cdot c_{p,steam} \cdot (T_{Steam{\_}in,p3} - T_{Steam{\_}out,p3})
\end{align*}
$${#eq-past_past3}

#### PAST4

$$
\begin{align*}
    \dot Q_{past4} &= \dot m_{Milk} \cdot c_{p,Raw~Milk} \cdot (T_{past{\_}d} - T_{Milk}) \\
    &= \dot m_{gliwater{\_}p4} \cdot c_{p,gliwater} \cdot (T_{Gliwater{\_}out,p4} - T_{Gliwater{\_}in,p4})
\end{align*}
$${#eq-past_past4}


#### PAST5

$$
\begin{align*}
    \dot Q_{past5} &= \dot m_{Intern} \cdot c_{p,Cream~ac} \cdot (T_{crpast{\_}a} - T_{cream{\_}0}) \\
    &= \dot m_{Cream} \cdot c_{p,Cream} \cdot (T_{crpast{\_}b} - T_{crpast{\_}c})
\end{align*}
$${#eq-past_past5}

#### MIXER

$$
\begin{align*}
    \dot m_{thickener} \cdot c_{p,thickener} \cdot (T_{crpast{\_}x} - T_{thickener})
    = \dot m_{intern} \cdot c_{p,Cream~ac} \cdot (T_{crpast{\_}a} - T_{thickener}) \\
\end{align*}
$${#eq-past_mixer}

#### PAST6

$$
\begin{align*}
    \dot Q_{past6} &= \dot m_{Cream} \cdot c_{p,Cream} \cdot (T_{crpast{\_}b} - T_{crpast{\_}x}) \\
    &= \dot m_{steam{\_}p6} \cdot c_{p,steam} \cdot (T_{Steam{\_}in,p6} - T_{Steam{\_}out,p6})
\end{align*}
$${#eq-past_past6}

#### PAST7

$$
\begin{align*}
    \dot Q_{past7} &= \dot m_{Cream} \cdot c_{p,Cream} \cdot (T_{crpast{\_}c} - T_{Cream}) \\
    &= \dot m_{gliwater{\_}p7} \cdot c_{p,gliwater} \cdot (T_{Gliwater{\_}out,p7} - T_{Gliwater{\_}in,p7})
\end{align*}
$${#eq-past_past7}


```{python compute_pasteurisation, echo = T, eval = T}
import pandas as pd
import numpy as np
from IPython.display import display, HTML
from codes_01_energy_bill.pasteurisation_functions import heat_exchanger_Q

# Mass flows(kg/s)

m_fmilk = 8
m_milk = 7.52
m_cream = 0.55
m_int = m_fmilk - m_milk
m_thick = 0.07

# Heat capacities (J/(kg.K))

Cp_alboline = 4175
Cp_raw_milk = 3800 # Has been computed with mix
Cp_cream = 3400
Cp_glywater = 3900 #(Beer pasteurization exercise)
Cp_steam = 1996 #(Internet)
Cp_fmilk = (m_int/m_fmilk)*Cp_cream + (m_milk/m_fmilk)*Cp_raw_milk
Cp_cream_mixed = (m_int/m_cream)*Cp_cream + (m_thick/m_cream)*Cp_alboline


# Temperatures (K)

T_a=25+273.15
T_fmilk = 6+273.15
T_mixure_out = 4+273.15
T_past_cent = 60+273.15
T_milk_0 = T_past_cent
T_cream_0 = T_past_cent
T_past_b = 75+273.15
T_milk = 4+273.15
T_thick = 4+273.15
T_crpast_b = 75+273.15
T_cream = 4+273.15

T_glywater_in = -5 + 273.15
T_glywater_out = -1 + 273.15
T_steam_in = 207.336 + 273.15
T_steam_out = 110 + 273.15


# T_past_a, computed later
# T_past_c, computed later
# T_past_d, computed later
# T_crpast_a, computed later
# T_crpast_x, computed later
# T_crpast_c, computed later

# Temperatures computation

T_past_c = -5 + T_past_b
T_past_a = T_past_b - T_past_c + T_milk_0 
T_past_d = - (( m_fmilk / m_milk ) * ( Cp_fmilk / Cp_raw_milk ) * (T_past_cent- T_mixure_out)) + T_past_c
T_crpast_a = (( m_cream / m_int ) * ( Cp_cream_mixed / Cp_cream ) * 5) + T_cream_0
T_crpast_c = (( m_int / m_cream ) * ( Cp_cream / Cp_cream_mixed ) * (-T_crpast_a + T_cream_0)) + T_crpast_b
T_crpast_x = ((Cp_alboline*m_thick)*T_thick + (Cp_cream*m_int)*T_crpast_a) / ((Cp_alboline*m_thick)+(Cp_cream*m_int))

# Heat flows computation

Q_refrigeration = heat_exchanger_Q(T_fmilk,T_mixure_out,m_fmilk,Cp_fmilk)
Q_past1 = heat_exchanger_Q(T_past_cent,T_mixure_out,m_fmilk,Cp_fmilk) 
Q_past2 = heat_exchanger_Q(T_past_a,T_milk_0,m_milk,Cp_raw_milk)
Q_past3 = heat_exchanger_Q(T_past_a,T_past_b,m_milk,Cp_raw_milk)
Q_past4 = heat_exchanger_Q(T_past_d,T_milk,m_milk,Cp_raw_milk)
Q_past5 = heat_exchanger_Q(T_crpast_a,T_crpast_b,m_cream,Cp_cream_mixed)
Q_past6 = heat_exchanger_Q(T_crpast_x,T_crpast_b,m_cream,Cp_cream_mixed)
Q_past7 = heat_exchanger_Q(T_cream,T_crpast_c,m_cream,Cp_cream_mixed)

# Computation for steam and glywater

m_gly_ref = Q_refrigeration / ( Cp_glywater * (T_glywater_out-T_glywater_in) )
m_steam_past3 = Q_past3 / ( Cp_steam * (T_steam_in-T_steam_out) )
m_gly_past4 = Q_past4 / ( Cp_glywater * (T_glywater_out-T_glywater_in) )
m_steam_past6 = Q_past6 / ( Cp_steam * (T_steam_in-T_steam_out) )
m_gly_past7 = Q_past7 / ( Cp_glywater * (T_glywater_out-T_glywater_in) )

# Specific entropy and enthalpy from beer pasteurisation

delta_s_steam = 7.343e3 - 1.418e3
delta_h_steam = 2880.8e3 - 461.368e3


#DATAFRAMES

# Dataframe for Heat Flows

Energy_flow = 'kJ/s'

Variables_Names = ['Refrigeration','Past1','Past2','Past3','Past4','Past5','Past6','Past7']
Variables_Values = np.divide([Q_refrigeration,Q_past1,Q_past2,Q_past3,Q_past4,Q_past5,Q_past6,Q_past7],1000)
Variables_Units =  Energy_flow 
df_pasteurization_heat_flow = pd.DataFrame(data = {'Heat Flow': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})

# Dataframe for Temperatures

Temperature = 'Â°C'

Temperatures_vector = [T_a,T_fmilk,T_mixure_out,T_past_cent,T_milk_0,T_cream_0,T_past_a,T_past_b,T_past_c,T_past_d,T_milk,T_crpast_a,T_thick,T_crpast_x,T_crpast_b,T_crpast_c,T_cream,T_steam_in,T_steam_out,T_glywater_in,T_glywater_out]
to_celsius = lambda t: t - 273.15
Temperatures_vector = np.array([to_celsius(x) for x in Temperatures_vector])
Variables_Names = ['a','fmilk','mixure_out','past_cent','milk_0','cream_0','past_a','past_b','past_c','past_d','milk','crpast_a','thick','crpast_x','crpast_b','crpast_c','cream','steam_in','steam_out','glywater_in','glywater_out']

Variables_Values = Temperatures_vector
Variables_Units =  Temperature 
df_pasteurization_temperatures = pd.DataFrame(data = {'Temperature': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})


# Dataframe for Mass Flows in the Pasteurisation

Mass_flow = 'kg/s'

Variables_Names = ['fresh_milk','milk','cream','intern = fresh_milk - milk','thickener']
Variables_Values = [m_fmilk,m_milk,m_cream,m_int,m_thick]
Variables_Units =  Mass_flow 
df_pasteurization_mf_in = pd.DataFrame(data = {'Mass Flow': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})

# Dataframe for Mass Flows for steam and glywater

Mass_flow = 'kg/s'

Variables_Names = ['glywater in refrigeration','steam in past3','glywater in past4','steam in past6','glywater in past4']
Variables_Values = [m_gly_ref,m_steam_past3,m_gly_past4,m_steam_past6,m_gly_past7 ]
Variables_Units =  Mass_flow 
df_pasteurization_mf_steam_gly = pd.DataFrame(data = {'Mass Flow': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})


# Dataframe for Heat capacities (J/(kg.K))

Heat_capacity = 'J/(kg.K)'

Variables_Names = ['alboline','raw_milk','cream','glywater','steam','fmilk','cream_mixed']
Variables_Values = [Cp_alboline,Cp_raw_milk,Cp_cream,Cp_glywater,Cp_steam,Cp_fmilk,Cp_cream_mixed]
Variables_Units =  Heat_capacity 
df_pasteurization_heat_capacities = pd.DataFrame(data = {'Heat Capacity': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})

# Dataframe for entropy

Specific_entropy = 'J/(kg.K)'

Variables_Names = ['delta_s_steam']
Variables_Values = [delta_s_steam]
Variables_Units =  Specific_entropy 
df_pasteurization_entropy = pd.DataFrame(data = {'Specific Entropy': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})

# Dataframe for enthalpy

Specific_enthalpy = 'J/(kg)'

Variables_Names = ['delta_h_steam']
Variables_Values = [delta_h_steam]
Variables_Units =  Specific_enthalpy 
df_pasteurization_enthalpy = pd.DataFrame(data = {'Specific Enthalpy': Variables_Names, 'Value':Variables_Values, 'Unit': Variables_Units})

#HTML(df_pasteurization_heat_flow.to_html(index=False))
#HTML(df_pasteurization_temperatures.to_html(index=False))
#HTML(df_pasteurization_mf_in.to_html(index=False))
#HTML(df_pasteurization_mf_steam_gly.to_html(index=False))
#HTML(df_pasteurization_heat_capacities.to_html(index=False))


```



#### Results
 

```{python pasteurisation_csv, echo = T, eval = T}

import pandas as pd
import numpy as np
from IPython.display import display, HTML

def degree(x):
    return x +273.15

def to_J(x):
    return x *1000

df_1_variable = pd.DataFrame(data = {'Variable' : ['Q_refrigeration','Q_past1','Q_past2','Q_past3','Q_past4','Q_past5','Q_past6','Q_past7']})
df_1_values = df_pasteurization_heat_flow['Value'].apply(to_J)
df_1 = pd.concat([df_1_variable,df_1_values], axis = 1)

df_2_variable = pd.DataFrame(data = {'Variable' : ['T_a','T_fmilk','T_mixure_out','T_past_cent','T_milk_0','T_cream_0','T_past_a','T_past_b','T_past_c','T_past_d','T_milk','T_crpast_a','T_thick','T_crpast_x','T_crpast_b','T_crpast_c','T_cream','T_steam_in','T_steam_out','T_glywater_in','T_glywater_out']})
df_2_values = df_pasteurization_temperatures['Value'].apply(degree)
df_2 = pd.concat([df_2_variable,df_2_values], axis = 1)

df_3_variable = pd.DataFrame(data = {'Variable' : ['m_fmilk','m_milk','m_cream','m_int','m_thick']})
df_3_values = df_pasteurization_mf_in['Value']
df_3 = pd.concat([df_3_variable,df_3_values], axis = 1)

df_4_variable = pd.DataFrame(data = {'Variable' : ['m_gly_ref','m_steam_past3','m_gly_past4','m_steam_past6','m_gly_past7']})
df_4_values = df_pasteurization_mf_steam_gly['Value']
df_4 = pd.concat([df_4_variable,df_4_values], axis = 1)

df_5_variable = pd.DataFrame(data = {'Variable' : ['Cp_alboline','Cp_raw_milk','Cp_cream','Cp_glywater','Cp_steam','Cp_fmilk','Cp_cream_mixed']})
df_5_values = df_pasteurization_heat_capacities['Value']
df_5 = pd.concat([df_5_variable,df_5_values], axis = 1)

df_6_variable =  pd.DataFrame(data = {'Variable' : ['delta_s_steam']})
df_6_values = df_pasteurization_entropy['Value']
df_6 = pd.concat([df_6_variable,df_6_values], axis = 1)

df_7_variable =  pd.DataFrame(data = {'Variable' : ['delta_h_steam']})
df_7_values = df_pasteurization_enthalpy['Value']
df_7 = pd.concat([df_7_variable,df_7_values], axis = 1)


df_pasteurization_csv = pd.concat([df_1,df_2,df_3,df_4,df_5,df_6,df_7], axis = 0, ignore_index = True)
#df_pasteurization_csv = pd.concat([df_1,df_2,df_3,df_4,df_5], axis = 0, ignore_index = True)

df_pasteurization_csv.to_csv('pasteurization_process.csv',sep=';')
```

```{python display_pasteurisation, echo = T, eval = T}

import pandas as pd
import numpy as np
from IPython.display import display, HTML

df_pasteurization_heat_flow = df_pasteurization_heat_flow.round(2)
df_pasteurization_temperatures = df_pasteurization_temperatures.round(2)
df_pasteurization_mf_steam_gly = df_pasteurization_mf_steam_gly.round(2)
df_pasteurization_heat_capacities = df_pasteurization_heat_capacities.round(2)

HTML(df_pasteurization_heat_flow.to_html(index=False))
HTML(df_pasteurization_temperatures.to_html(index=False))
HTML(df_pasteurization_mf_in.to_html(index=False))
HTML(df_pasteurization_mf_steam_gly.to_html(index=False))
HTML(df_pasteurization_heat_capacities.to_html(index=False))
```

<!---

#### Results Exergy Analysis Pasteurization

```{python compute_pasteurisation_exergy, echo = F, eval = T}

# Refrigeration

#L_milk_refr=m_fmilk*Cp_fmilk*(T_fmilk-T_mixure_out)-T_a*log10(T_fmilk/T_mixure_out)
#Lgw_refr
#L_ref=L_milk_refr+L_gw_refr

# Past 1
#L_past1_1=m_fmilk*Cp_fmilk*(T_mixure_out-T_past_cent)-T_a*log10(T_mixure_out/T_past_cent)

#L_past1_2=m_milk*Cp_raw_milk*(T_pastc-T_pastd)-T_a*log10(T_pastc/T_pastd)

#L_past1=L_past1_1+L_past1_2
# Past 3
#L_past3_1=m_milk*Cp_raw_milk*(T_pasta-T_pastb)-T_a*log10(T_pasta/T_pastb)

#L_past3_2=

#L_past3=L_past3_1+L_past3_2

```


#### TO CONTINUE
```{python coolprop, echo = T, eval = T}
from CoolProp.CoolProp import PropsSI
rho = PropsSI('D', 'T', 298.15, 'P', 101325, 'Nitrogen')
```



```{r render-table, echo = T}
# a way to pass the value from python to r is to through json file
library(reticulate)
x = 42
```
-->

## Evaporation

![Evaporation](Figures/Evaporation.svg)

The evaporator section receives milk from pasteurisation. This milk can be seen as a mixture of water and fat. The aim of this section is to increase the fat proportion from $11.7\% wt.$ to $50\% wt.$ by evaporating water. It is composed of heat-exchanger (HEX), 3 evaporators, 2 splitters and a processing module. 

In order to compute the mass and energy balance at each point, the following method is used:

1. Compute the target mixture at the input and output of each evaporator, and the mass flow associated.
1. Compute the heating demand of each evaporator and the mass flow of steam needed.
1. Derive the mass flow of steam going from the evaporator, through the splitter, to the heat exchanger.
1. Compute the heating capacity of each HEX and find the possible temperature steps according to the HEX requirements.
1. Compute the Glycolic water needed to cool down the milk and the waste water from HEX.
1. Derive the amount of whey that can be extracted from the processing module.

### Mixture at each Evaporator

The mass flow $m_1$ is a given data and the mass flows $m_{14}$, $m_{15}$ and $m_{16}$ are parameters that can be manually changed in order to get a reasonable system. Knowing those 4 mass flows and the target mixture, the fat content at each point can be computed by substracting water mass flows.

Given data:

- $m_1$ = 5.0 kg/s
- At point 11, Fat content = $50\%wt.$ and Water content = $50\%wt.$

Assumptions:

- $m_{14}$ = 1.6 kg/s
- $m_{15}$ = 1.28 kg/s
- $m_{16}$ = 0.8 kg/s

```{python fatincreasedef, echo = T, eval = T}

import pandas as pd
import numpy as np
from IPython.display import display, HTML

m1=5.0
m6=m1
m14=1.6
m15=1.28
m16=0.8

def fat_increase(m_int1, m_int2, m_int3, m_in = 5.0, p_fat_out3 = 0.50):
    m_out = m_in - m_int1 - m_int2 - m_int3
    if m_out < 0:
        print("ERROR: The mass of the output is negative.")
    # OUT 3
    p_water_out3 = 1 - p_fat_out3
    m_water_out3 = m_out * p_water_out3
    m_fat = m_out * p_fat_out3
    # OUT 2
    m_water_out2 = m_water_out3 + m_int3
    m_tot_2 = m_water_out2 + m_fat
    p_fat_out2 = m_fat / m_tot_2
    p_water_out2 = 1 - p_fat_out2
    # OUT 1
    m_water_out1 = m_water_out2 + m_int2
    m_tot_1 = m_water_out1 + m_fat
    p_fat_out1 = m_fat / m_tot_1
    p_water_out1 = 1 - p_fat_out1
    # OUT 0
    m_water_out0 = m_water_out1 + m_int1
    m_tot_0 = m_water_out0 + m_fat
    p_fat_out0 = m_fat / m_tot_0
    p_water_out0 = 1 - p_fat_out0
    if p_water_out0 > 0.883:
        print("WARNING: The water content in the final product is too high.")
    return m_out, p_fat_out0, p_fat_out1, p_fat_out2, p_fat_out3, p_water_out0, p_water_out1, p_water_out2, p_water_out3

m11, p_fat_out0, p_fat_out1, p_fat_out2, p_fat_out3, p_water_out0, p_water_out1, p_water_out2, p_water_out3 = fat_increase(m_int1=m14, m_int2=m15, m_int3=m16, m_in = m6, p_fat_out3 = 0.5)

data = {'Point': ['6', '7&8', '9&10', '11'],
        'Fat content (%)': [p_fat_out0*100, p_fat_out1*100, p_fat_out2*100, p_fat_out3*100],
        'Water content (%)': [p_water_out0*100, p_water_out1*100, p_water_out2*100, p_water_out3*100]}
df = pd.DataFrame(data)
df = df.set_index('Point')
df = df.round(2)
#print(df)
HTML(df.to_html())
```

### Heating Demand and Steam Flow of Evaporators

Knowing the mass flow of each evaporator, the heating demand can be computed. The heating demand is the amount of heat needed to evaporate the water in the milk and is given by the following equation. 

$$
Q_{\text{evap}} = m_{\text{in}} \cdot c_{p_{\text{in}}} \cdot \Delta T - m_{\text{in}} \cdot h_{\text{in}} + m_{\text{out1}} \cdot h_{\text{out1}} + m_{\text{out2}} \cdot h_{\text{out2}}
$${#eq-Qevap}

Then, knowing the heat requirement, it is possible to derive the mass flow of steam that is needed to evaporate the water, assuming a pressure value.

$$
m_{\text{w}} = \frac{Q_{\text{evap}}}{h_{\text{fg}}}
$${#eq-mw}


All the enthalpy, heat capacity and latent heat of vaporization are computed using the CoolProp library. The pressure of the steam is assumed.

Given/Known data:

- All the mixture mass flows, pressures and temperatures (either given or computed on previous section)

Assumptions:

- Steam at point 22 is assumed to be 1 bar, at 373 K (saturated steam)
- Perfect evaporator

```{python evap, echo = T, eval = T}
#Evaporator 1
from codes_01_energy_bill.coolprop_functions import mixture
from pyxosmose.state import State
def evaporator_fct(m_in,m_out1,m_out2,h_in,h_out1,h_out2,cp_in,deltaT,hfg):
    Q_evap = m_in*cp_in*deltaT - m_in*h_in + m_out1*h_out1 + m_out2*h_out2
    m_w = (Q_evap)/(hfg)
    #print('Qevap:',Q_evap)
    #print('mw:',m_w)
    return Q_evap, m_w
#Fixed Parameters 
p6=31000
p7=p6
p14=p6
p24=100000

T6=343
T7=T6
T14=343
T24=373 #can be changed if needed to reduce cost instead of having a high pressure

#Dependent Parameters
State_e6=mixture(T=T6, P=p6, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!
#print(State_e6)
h6=State_e6["enthalpy"]
cp6=State_e6["cpmass"]

State_e7=mixture(T=T7, P=p7, frac_water=p_water_out1, frac_fat=p_fat_out1) # this is a dictionary!!
#print(State_e7)
h7=State_e7["enthalpy"]

Point_e14 = State(pair='TP', fluid='water', temperature=T14, pressure=p14)
# Then calculate the state using the State class method StateCalc
Point_e14.StateCalc()
# And print the dictionary for revision
State_e14 = Point_e14.__dict__ # Whole dictionary with properties
h14=State_e14["enthalpy"]
#print(h14)

Point_e24 = State(pair='TP', fluid='water', temperature=T24, pressure=p24)
# Then calculate the state using the State class method StateCalc
Point_e24.StateCalc()
# And print the dictionary for revision
State_e24 = Point_e24.__dict__ # Whole dictionary with properties
hfg1=State_e24["enthalpy"]
#print(hfg1)

#Evap 1 calculation of heat 
m7=m6-m14
deltaT=5

Q_evap1, m_w1 = evaporator_fct(m6,m14,m7,h6,h14,h7,cp6,deltaT,hfg1)

#print(Q_evap1)
#print(m_w1)

#Evaporator 2

from codes_01_energy_bill.coolprop_functions import mixture

p8=25000
p9=p8
p15=25000
p17=p14

T8=338
T9=T8
T15=338
T17=T14

State_e8=mixture(T=T8, P=p8, frac_water=p_water_out2, frac_fat=p_fat_out2) # this is a dictionary!!
#print(State_e8)
h8=State_e8["enthalpy"]
cp8=State_e8["cpmass"]

State_e9=mixture(T=T9, P=p9, frac_water=p_water_out2, frac_fat=p_fat_out2) # this is a dictionary!!
#print(State_e9)
h9=State_e9["enthalpy"]

Point_e15 = State(pair='TP', fluid='water', temperature=T15, pressure=p15)
# Then calculate the state using the State class method StateCalc
Point_e15.StateCalc()
# And print the dictionary for revision
State_e15 = Point_e15.__dict__ # Whole dictionary with properties
h15=State_e15["enthalpy"]
#print(h15)

Point_e17 = State(pair='TP', fluid='water', temperature=T17, pressure=p17)
# Then calculate the state using the State class method StateCalc
Point_e17.StateCalc()
# And print the dictionary for revision
State_e17 = Point_e17.__dict__ # Whole dictionary with properties
hfg2=State_e17["enthalpy"]
#print(hfg2)

m8=m7
m9=m8-m15
deltaT=5

Q_evap2, m_w2 = evaporator_fct(m8,m15,m9,h8,h15,h9,cp8,deltaT,hfg2)

#print(Q_evap2)
#print(m_w2)

#Evaporator 3

from codes_01_energy_bill.coolprop_functions import mixture

p10=20000
p11=p10
p15=25000
p18=p15
p16=20000

T10=333
T11=T10
T15=338
T18=T15
T16=333

State_e10=mixture(T=T10, P=p10, frac_water=p_water_out2, frac_fat=p_fat_out2) # this is a dictionary!!
#print(State_e10)
h10=State_e10["enthalpy"]
cp10=State_e10["cpmass"]

State_e11=mixture(T=T11, P=p11, frac_water=p_water_out3, frac_fat=p_fat_out3) # this is a dictionary!!
#print(State_e11)
h11=State_e11["enthalpy"]

Point_e16 = State(pair='TP', fluid='water', temperature=T16, pressure=p16)
# Then calculate the state using the State class method StateCalc
Point_e16.StateCalc()
# And print the dictionary for revision
State_e16 = Point_e16.__dict__ # Whole dictionary with properties
h16=State_e16["enthalpy"]
#print(h16)

Point_e18 = State(pair='TP', fluid='water', temperature=T18, pressure=p18)
# Then calculate the state using the State class method StateCalc
Point_e18.StateCalc()
# And print the dictionary for revision
State_e18 = Point_e18.__dict__ # Whole dictionary with properties
hfg3=State_e18["enthalpy"]
#print(hfg3)

m10=m9
m11=m10-m16
deltaT=5

Q_evap3, m_w3 = evaporator_fct(m10,m16,m11,h10,h16,h11,cp10,deltaT,hfg3)

m17=m_w2
m18=m_w3
m24=m_w1

#print(Q_evap3)
#print(m_w3)
# print mass flow, temperature, preasure for the points 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18 in a dataframe

data = {'Point': ['6', '7', '8', '9', '10', '11', '14', '15', '16', '17', '18', '24'],
        'Mass flow (kg/s)': [m6, m7, m8, m9, m10, m11, m14, m15, m16, m17, m18, m24],
        'Temperature (K)': [T6, T7, T8, T9, T10, T11, T14, T15, T16, T17, T18, T24],
        'Pressure (Pa)': [p6, p7, p8, p9, p10, p11, p14, p15, p16, p17, p18, p24]}
df = pd.DataFrame(data)
df = df.set_index('Point')
df = df.round(4)
HTML(df.to_html())

#print in a data frame the heat demand of each evaporator
data = {'Evaporator': ['1', '2', '3'],
        'Heat demand (W)': [Q_evap1, Q_evap2, Q_evap3]}
df = pd.DataFrame(data)
df = df.set_index('Evaporator')
df = df.round(4)
HTML(df.to_html())
```

### Steam Flow to HEX

From previous sections, $m_{14}$, $m_{15}$, $m_{16}$, $m_{17}$, and $m_{18}$ are known. The mass flow of steam going through the HEX4, HEX3 can be computed using the following equation, corresponding to the ideal splitter:

$$
m_{\text{steam,HEX}} = m_{\text{in}} - m_{\text{steam,evap}}
$${#eq-msteamHEX}

The steam mass flow through HEX2 and HEX1 are known ; $m_{16}$ and $m_{11}$ respectively.

Known data:

- $m_{14}$, $m_{15}$, $m_{16}$, $m_{17}$, and $m_{18}$

Assumptions:

- Perfect splitter


```{python mass, echo = T, eval = T}
m19=m14-m_w2
m20=m15-m_w3
#print(' mHEX4 = m19 = ', m19, '\n', 'mHEX3 = m20 = ', m20, '\n', 'mHEX2 = m16 = ', m16, '\n', 'mHEX1 = m11 = ', m11, '\n',)
print(f'mHEX4 = m19 = {m19:.3f} (kg/s)\n'
      f'mHEX3 = m20 = {m20:.3f} (kg/s)\n'
      f'mHEX2 = m16 = {m16:.3f} (kg/s)\n'
      f'mHEX1 = m11 = {m11:.3f} (kg/s)\n')
```

### HEX Heat Demand and Temperature Steps

Before doing any calculation, it is noticeable that $m_{19}$, i.e. the hot flow through HEX4, is very small. The heating capacity is therefore too small to ensure the required heating. In order to reduce the cost of the system, it is preferable to remove HEX4. 
To compute the temperature steps and the heating capacity, the following method is used:

- Assume some temperature steps between the 3 HEX.
- Compute the heating capacity of each HEX, by being aware that $T_{\text{hot,out}} \geq T_{\text{cold,in}}$ condition is satisfied.
- Adapt the temperature steps with the heating capacity of each HEX, to satisfy the previous condition.

The following function is used to know the heating capacity of each HEX:

```
def HeatExchanger(mcold, cpcold, Tcoldin, Tcoldout, Thotin, cphot, mhot, hhot):
    Q = mcold * cpcold * (Tcoldout - Tcoldin)
    Qcond = mhot * abs(hhot)
    if Qcond < Q:
        #print("Cold stream is completely condensed")
        Thotout = (-Q + mhot * abs(hhot)) / (mhot * cphot) + Thotin
    else:
        #print("Cold stream is not completely condensed")
        Thotout = Thotin
    return Q, Thotout
```


```{python HX, echo = T, eval = T}

def HeatExchanger(mcold, cpcold, Tcoldin, Tcoldout, Thotin, cphot, mhot, hhot):
    Q = mcold*cpcold*(Tcoldout-Tcoldin)
    Qcond = mhot*abs(hhot)
    if Qcond<Q:
        #print("Cold stream is completely condensed")
        Thotout = (-Q+mhot*abs(hhot))/(mhot*cphot) + Thotin
    else:
        #print("Cold stream is not completely condensed")
        Thotout = Thotin
    #print('Q_cond:', Qcond, 'W')
    #print('Q_HEX:', Q, 'W')
    #print('T_cold_in:', Tcoldin, 'K')
    #print('T_cold_out:', Tcoldout, 'K')
    #print('T_hot_in:', Thotin, 'K')
    #print('T_hot_out:', Thotout, 'K')
    return Q, Thotout

# Heat Exchanger 4
# Calculation can be done but the module is not used

T4=338
T5=T4
T19=T14
p4=100000
State_e4=mixture(T=T4, P=p4, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!
cp4=State_e4["cpmass"]
m5=m1
m19=m14-m_w2
p19=p6
Point_e19 = State(pair='TP', fluid='water', temperature=T19, pressure=p19)
# Then calculate the state using the State class method StateCalc
Point_e19.StateCalc()
# And print the dictionary for revision
State_e19 = Point_e19.__dict__ # Whole dictionary with properties
h19=State_e19["enthalpy"]
cp19=State_e19["cpmass"]

Q4, Thot4 = HeatExchanger(m5, cp4, T4, T5, T19, cp19, m19, h19)

#Heat Exchanger 3
T3=317.5
T20=T15
m4=m1
m20=m15-m_w3
p20=p8
p3=p4
State_e3=mixture(T=T3, P=p3, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!
cp3=State_e3["cpmass"]

Point_e20 = State(pair='TP', fluid='water', temperature=T20, pressure=p20)
# Then calculate the state using the State class method StateCalc
Point_e20.StateCalc()
# And print the dictionary for revision
State_e20 = Point_e20.__dict__ # Whole dictionary with properties
h20=State_e20["enthalpy"]
cp20=State_e20["cpmass"]

Q3, Thot3 = HeatExchanger(m4, cp3, T3, T4, T20, cp20, m20, h20)

#Heat Exchanger 2
T2=302
m3=m1
p2=p4
State_e2=mixture(T=T2, P=p2, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!
cp2=State_e2["cpmass"]
cp16=State_e16["cpmass"]

Q2, Thot2 = HeatExchanger(m3, cp2, T2, T3, T16, cp16, m16, h16)

#Heat Exchanger 1
T1=277
p1=p4
State_e1=mixture(T=T1, P=p1, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!
cp1=State_e1["cpmass"]
cp11=State_e11["cpmass"]
h11=State_e11["enthalpy"]

# mcold, cpcold, Tcoldin, Tcoldout, Thotin, cphot, mhot, hhot
Q1, Thot1 = HeatExchanger(m1, cp1, T1, T2, T11, cp11, m11, h11)

#HeatExchanger(mcold, cpcold, Tcoldin, Tcoldout, Thotin, cphot, mhot, hhot)
#Q4, Thot4 = HeatExchanger(m5, cp4, T4, T5, T19, cp19, m19, h19)
#Q3, Thot3 = HeatExchanger(m4, cp3, T3, T4, T20, cp20, m20, h20)
#Q2, Thot2 = HeatExchanger(m3, cp2, T2, T3, T16, cp16, m16, h16)
#Q1, Thot1 = HeatExchanger(m1, cp1, T1, T2, T11, cp11, m11, h11)

data = {'HEX': ['1', '2', '3', '4'],
        'Steam Flow (kg/s)' : [m11, m16, m20, m19],
        'T cold in (K)': [T1, T2, T3, T4],
        'T cold out (K)': [T2, T3, T4, T5],
        'T hot in (K)': [T11, T16, T20, T19],
        'T hot out (K)': [Thot1, Thot2, Thot3, Thot4],
        'Heat (W)': [Q1, Q2, Q3, Q4]}
df = pd.DataFrame(data)
df = df.set_index('HEX')
df = df.round(2)
HTML(df.to_html())
```

### Cooling Demand

HEX5 ensures that the milk is cooled down from $T_{\text{hot,out,HEX1}}$ = 290.38 K to 277 K. The cooling demand is computed using the following equation:

$$
Q_{\text{glycol}} = m_{12} \cdot cp_{12} \cdot (T_{12} - T_{13})
$${#eq-Qglycol}

$$
m_{\text{glycol}} = \frac{Q_{\text{glycol}}}{cp_{{\text{glycol}}} \cdot (T_{\text{out,glycol}} - T_{\text{in,glycol}})}
$${#eq-mglycol}

Given/Known data:

- $m_{12}$, $T_{12}$, $T_{13}$

Assumptions:

- $T_{\text{in,glycol}}$ = 270 K
- $T_{\text{out,glycol}}$ = 277 K
- $cp_{\text{glycol}}$ = 2294 kJ/kg.K


```{python HXGlycolic, echo = T, eval = T}
#Heat Exchanger Glycolic water

p12=p11
T12=Thot1
T13=277
m12=m11
#print(p12,p_water_out3,p_fat_out3)
State_e12 = mixture(T=T12, P=p12, frac_water=p_water_out3, frac_fat=p_fat_out3)
cp12=State_e12["cpmass"]
#print('cp12', cp12)


Tinglycol=270
Toutglycol=277
cpglycol=2294

Qglycol = m12*cp12*(T12-T13)
mglycol = m12*(cp12/cpglycol)*(T12-T13)/(Toutglycol-Tinglycol)

print(f'Q_glycol = {Qglycol:.3f} (W)\n'
      f'm_glycol = {mglycol:.3f} (kg/s)')

```

### Whey Extraction

Finally, in order to match the target fat content, it is possible to extract whey from the system. The mass flow of whey is computed using the following equation:

**Processing**:

Flow In:
\begin{align*}
    m_{\text{pasteur}} &= 7.52 \text{ (kg/s)}\\
    p_{\text{water\_pasteur}} &= 0.883 \\
    p_{\text{fat\_pasteur}} &= 1 - p_{\text{water\_pasteur}}
\end{align*}

Flow to HEX:

\begin{align*}
    m_1 &= 5.0 \text{ (kg/s)}\\
    p_{\text{water\_out1}} &= 0.868 \\
    p_{\text{fat\_out1}} &= 1 - p_{\text{water\_out1}}
\end{align*}

Flow to Filter:
\begin{align*}
    m_{\text{water\_21}} &= m_{\text{pasteur}} \cdot p_{\text{water\_pasteur}} - p_{\text{water\_out1}} \cdot m_1 \\
    m_{\text{fat\_21}} &= m_{\text{pasteur}} \cdot p_{\text{fat\_pasteur}} - p_{\text{fat\_out1}} \cdot m_1 \\
    m_{21} &= m_{\text{pasteur}} - m_1 \\
    p_{\text{water\_21}} &= \frac{m_{\text{water\_21}}}{m_{21}} \\
    p_{\text{fat\_21}} &= \frac{m_{\text{fat\_21}}}{m_{21}}
\end{align*}

**Filter:**

Wastewater flow:

\begin{align*}
    m_{23} &= 1 \text{ (kg/s)}\\
    p_{\text{water\_23}} &= 1 \\
    p_{\text{fat\_23}} &= 0
\end{align*}

Whey flow:
\begin{align*}
    m_{\text{water\_22}} &= m_{\text{water\_21}} - m_{23} \cdot p_{\text{water\_23}} \\
    m_{\text{fat\_22}} &= m_{\text{fat\_21}} - m_{23} \cdot p_{\text{fat\_23}} \\
    m_{22} &= m_{21} - m_{23} \\
    p_{\text{water\_22}} &= \frac{m_{\text{water\_22}}}{m_{22}} \\
    p_{\text{fat\_22}} &= \frac{m_{\text{fat\_22}}}{m_{22}}
\end{align*}


```{python Processing, echo = T, eval = T}

# Processing
# Flow In
m_pasteur = 7.52
p_water_pasteur = 0.883
p_fat_pasteur = 1 - p_water_pasteur

# Flow Out
m_water_21 = m_pasteur * p_water_pasteur - p_water_out0 * m1
m_fat_21 = m_pasteur * p_fat_pasteur - p_fat_out0 * m1

m_21 = m_pasteur - m1
p_water_21 = m_water_21 / m_21
p_fat_21 = m_fat_21 / m_21

# Filter
m_23 = 1
p_water_23 = 1
p_fat_23 = 0

# Flow out Whey
m_water_22 = m_water_21 - m_23 * p_water_23
m_fat_22 = m_fat_21 - m_23 * p_fat_23

m_22 = m_21 - m_23
p_water_22 = m_water_22 / m_22
p_fat_22 = m_fat_22 / m_22

# Print in a data frame the percent and mass flow of fat and water for point pasteur, 21, 22 and 23
data = {'Point': ['Pasteur', '21', '22', '23'],
        'Fat content (%)': [p_fat_pasteur*100, p_fat_21*100, p_fat_22*100, p_fat_23*100],
        'Water content (%)': [p_water_pasteur*100, p_water_21*100, p_water_22*100, p_water_23*100],
        'Mass flow (kg/s)': [m_pasteur, m_21, m_22, m_23]}
dfwhey = pd.DataFrame(data)
dfwhey = dfwhey.set_index('Point')
dfwhey = dfwhey.round(2)
#print(dfwhey)
HTML(dfwhey.to_html())
```

### Summary for the evaporator section


```{python recap, echo = T, eval = T}
#Entropy

#Computing remaining states
p5=p4
State_e5 = mixture(T=T5, P=p5, frac_water=p_water_out0, frac_fat=p_fat_out0) # this is a dictionary!!

p13=p12
State_e13 = mixture(T=T13, P=p13, frac_water=p_water_out3, frac_fat=p_fat_out3) # this is a dictionary!!

T21=277
p21=p1
State_e21 = mixture(T=T21, P=p21, frac_water=p_water_21, frac_fat=p_fat_21) # this is a dictionary!!

T22=T21
p22=p21
State_e22 = mixture(T=T22, P=p22, frac_water=p_water_22, frac_fat=p_fat_22) # this is a dictionary!!

T23=T21
p23=p21
State_e23 = mixture(T=T23, P=p23, frac_water=p_water_23, frac_fat=p_fat_23) # this is a dictionary!!


Ttest2=T16
ptest2=p16
State_test2 = State(pair='TP', fluid='water', temperature=Ttest2, pressure=ptest2) 
State_test2.StateCalc()
# And print the dictionary for revision
State_test2 = State_test2.__dict__

Ttest3=T20
ptest3=p20
State_test3 = State(pair='TP', fluid='water', temperature=Ttest3, pressure=ptest3) 
State_test3.StateCalc()
# And print the dictionary for revision
State_test3 = State_test3.__dict__

Ttest4=T19
ptest4=p19
State_test4 = State(pair='TP', fluid='water', temperature=Ttest4, pressure=ptest4) 
State_test4.StateCalc()
# And print the dictionary for revision
State_test4 = State_test4.__dict__

#Exctraction of entropy
s1=State_e1["entropy"]
s2=State_e2["entropy"]
s3=State_e3["entropy"]
s4=State_e4["entropy"]
s5=State_e5["entropy"]
s6=State_e6["entropy"]
s7=State_e7["entropy"]
s8=State_e8["entropy"]
s9=State_e9["entropy"]
s10=State_e10["entropy"]
s11=State_e11["entropy"]
s12=State_e12["entropy"]
s13=State_e13["entropy"]
s14=State_e14["entropy"]
s15=State_e15["entropy"]
s16=State_e16["entropy"]
s17=State_e17["entropy"]
s18=State_e18["entropy"]
s19=State_e19["entropy"]
s20=State_e20["entropy"]
s21=State_e21["entropy"]
s22=State_e22["entropy"]
s23=State_e23["entropy"]
stest2=State_test2["entropy"]
stest3=State_test3["entropy"]
stest4=State_test4["entropy"]

h1=State_e1["enthalpy"]
h2=State_e2["enthalpy"]
h3=State_e3["enthalpy"]
h4=State_e4["enthalpy"]
h5=State_e5["enthalpy"]
h6=State_e6["enthalpy"]
h7=State_e7["enthalpy"]
h8=State_e8["enthalpy"]
h9=State_e9["enthalpy"]
h10=State_e10["enthalpy"]
h11=State_e11["enthalpy"]
h12=State_e12["enthalpy"]
h13=State_e13["enthalpy"]
h14=State_e14["enthalpy"]
h15=State_e15["enthalpy"]
h16=State_e16["enthalpy"]
h17=State_e17["enthalpy"]
h18=State_e18["enthalpy"]
h19=State_e19["enthalpy"]
h20=State_e20["enthalpy"]
h21=State_e21["enthalpy"]
h22=State_e22["enthalpy"]
h23=State_e23["enthalpy"]
htest2=State_test2["enthalpy"]
htest3=State_test3["enthalpy"]
htest4=State_test4["enthalpy"]

m2=m1
m13=m12
m17=m_w2
m18=m_w3
m21 = m_21
m22 = m_22
m23 = m_23
mtest2=m16
mtest3=m20
mtest4=m19

#Recap
#Print in a dataframe: Temperature, Pressure, Mass flow, Enthalpy, Entropy for each point (i.e. 1 to 23)

datarecap = {'Point': ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10','11', '12', '13', '14', '15', '16', '17', '18', '19', '20','21', '22', '23', 'test2', 'test3', 'test4'],
        'Temperature (K)': [T1, T2, T3, T4, T5, T6, T7, T8, T9, T10,T11, T12, T13, T14, T15, T16, T17, T18, T19, T20,T21, T22, T23,Ttest2, Ttest3, Ttest4],
        'Pressure (Pa)': [p1, p2, p3, p4, p5, p6, p7, p8, p9, p10,p11, p12, p13, p14, p15, p16, p17, p18, p19, p20,p21, p22, p23,ptest2, ptest3, ptest4],
        'Mass flow (kg/s)': [m1, m2, m3, m4, m5, m6, m7, m8, m9, m10,m11, m12, m13, m14, m15, m16, m17, m18, m19, m20,m21, m22, m23,mtest2, mtest3, mtest4],
        'Enthalpy (J/mol)': [h1, h2, h3, h4, h5, h6, h7, h8, h9, h10,h11, h12, h13, h14, h15, h16, h17, h18, h19, h20,h21, h22, h23,htest2, htest3, htest4],
        'Entropy (J/K)': [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10,s11, s12, s13, s14, s15, s16, s17, s18, s19, s20,s21, s22, s23,stest2, stest3, stest4]}
dfrecap = pd.DataFrame(datarecap)
dfrecap = dfrecap.set_index('Point')
dfrecap = dfrecap.round(2)
HTML(dfrecap.to_html())

#Print in a dataframe: Q for each heat exchanger and evaporator
dataevap = {'Evaporator': ['1', '2', '3'],
        'Q (W)': [Q_evap1, Q_evap2, Q_evap3]}
dfevap = pd.DataFrame(dataevap)
dfevap = dfevap.set_index('Evaporator')
dfevap = dfevap.round(2)
HTML(dfevap.to_html())

#Print in a dataframe: Q for each heat exchanger and evaporator
datahx = {'Heat_Exchanger': ['1', '2', '3', '4', 'Glycolic'],
        'Q (W)': [Q1, Q2, Q3, Q4, Qglycol]}
dfhx = pd.DataFrame(datahx)
dfhx = dfhx.set_index('Heat_Exchanger')
dfhx = dfhx.round(2)
HTML(dfhx.to_html())
```

```{python exportation, echo = T, eval = T}
#Load the dataframe in a csv file

dfrecap.to_csv('dfrecap.csv')
dfevap.to_csv('dfevap.csv')
dfhx.to_csv('dfhx.csv')
```

## Drum Dryers

![Drum Dryers](Figures/Drum_dryer_new.jpg)

This section will present the mass and energy balances of the various steps involved in the process of drying the concentrated milk into milk powder. The concentrated milk is received by the evaporation section. As such the concentrated milk is considered to be a mixture of 50% water and 50% fat which will be transformed into a mixture of 96% fat and 4% water.

This section consists of multiple step:

1. Compute the mixture proportions at the input and output of each dryer.
1. Compute the heating demand of each dryer
1. Compute the heating demand of each HEX component
1. Compute the amount of cooling water needed to cool down the milk powder
1. Compute the amount of steam needed to heat up the humid air
1. Compute the amount of water exiting the system at dd13

### Mixture at each dryer

The parameters of the mixture at the position dd1 is known, since it is the same mixture exiting the evaporation process. Knowing that the second dryer evaporates 63% of the water it receives as input, it is possible to compute the proportions of water and fat content at each input and output of the dryers.

```{python DrumDryersMass, echo = T, eval = T}
mass_dd1 = 1.32
#mass_dd5 = 0.5*mass_dd4 + 0.5*mass_dd4*(1-0.63) = mass_dd1*0.5 + mass_dd1*0.08
#mass_dd5 = mass_dd1*0.5 + mass_dd1*0.5*0.04
#96% = 0.5*mass_dd1

mass_dd5 = 0.5*mass_dd1 + (0.5*mass_dd1/0.96)*0.04
mass_dd4 = mass_dd5/(0.5+0.5*(1-0.63))
mass_dd4 = 0.5*mass_dd1 + (mass_dd5-0.5*mass_dd1)/0.37

water_dd1 = 50
water_dd4 = ((mass_dd4 - mass_dd1/2)/mass_dd4)*100
water_dd5 = ((mass_dd5 - mass_dd1/2)/mass_dd5)*100

data_m = {'Position': ['dd1', 'dd4', 'dd5', 'dd7'],
        'm (kg)': [mass_dd1, mass_dd4, mass_dd5, mass_dd5],
        'Water Proportion': [water_dd1, water_dd4, water_dd5, water_dd5]}

dfm = pd.DataFrame(data_m)
dfm = dfm.set_index('Position')
dfm = dfm.round(2)
HTML(dfm.to_html())
```

### Heating demand of each dryer

For this part of the calculations it is assumed that the temperature of the steam at the point dd9 is of 50Â°C, the temperature at dd10is 60Â°C and that the pressure of the steam at points dd8, dd9, dd10 and dd11 is of 70529 Pa.
The same equations as the ones of section 2.2.2 are used here.


```{python DrumDryers, echo = T, eval = T}
from codes_01_energy_bill.coolprop_functions import mixture
from pyxosmose.state import State

m1_dryer = mass_dd1

cpH2O = 4182 #J/kg
cpConcMilk = 2610 #J/kg

pressure_dryer = 70529 #Pa, it's the saturatioon pressure for 90Â°C
pressure_dd1 = pressure_dd4 = pressure_dd5 = 20000 #Pa

Temp_dd11 = 318.15
Temp_dd10 = 333.15
Temp_dd9 = 323.15
Temp_dd8 = 363.15
Temp_dd1 = 277.15
Temp_dd4 = 333.15
Temp_dd5 = 333.15

mass_dd8 = (mass_dd4-mass_dd5)/79
mass_dd9 = mass_dd4-mass_dd5 + mass_dd8
mass_dd10 = mass_dd9
mass_dd11 = mass_dd10 + mass_dd1-mass_dd4


def evaporator_fct(m_in,m_out1,m_out2,h_in,h_out1,h_out2,cp_in,deltaT,hfg):
    Q_evap = m_in*cp_in*deltaT - m_in*h_in + m_out1*h_out1 + m_out2*h_out2
    m_w = (Q_evap)/(hfg)
    #print('Qevap:',Q_evap)
    #print('mw:',m_w)
    return Q_evap, m_w

State_dd1 = mixture(T = Temp_dd1, P = pressure_dd1, frac_water = water_dd1/100, frac_fat = 1-water_dd1/100)
h1_dryer = State_dd1["enthalpy"]
cp1_dryer = State_dd1["cpmass"]

State_dd4 = mixture(T = Temp_dd4, P = pressure_dd4, frac_water = water_dd4/100, frac_fat = 1-water_dd4/100)
h4_dryer = State_dd4["enthalpy"]
cp4_dryer = State_dd4["cpmass"]

State_dd5 = mixture(T = Temp_dd5, P = pressure_dd5, frac_water = water_dd5/100, frac_fat = 1-water_dd5/100)
h5_dryer = State_dd5["enthalpy"]
cp5_dryer = State_dd5["cpmass"]

#We assume T9 goes to 50C so it can go back to 60 for T10 and pressure is the ambient pressure

Point_dd9 = State(pair='TP', fluid='water', temperature=Temp_dd9, pressure=pressure_dryer)
Point_dd9.StateCalc()
State_dd9 = Point_dd9.__dict__
h9_dryer = State_dd9["enthalpy"]
cp9_dryer = State_dd9["cpmass"]

Point_dd8 = State(pair='TP', fluid='water', temperature=Temp_dd8, pressure=pressure_dryer)
Point_dd8.StateCalc()
State_dd8 = Point_dd8.__dict__
hfg8_dryer = State_e24["enthalpy"]
cp8_dryer = State_dd8["cpmass"]

cp14_dryer = cp8_dryer

Q2_dryer, m_w_2_dryer = evaporator_fct(mass_dd4, mass_dd4-mass_dd5, mass_dd5, h4_dryer, h9_dryer, h5_dryer, cp4_dryer, 40, hfg8_dryer)
#print(Q2_dryer)

Point_dd10 = State(pair='TP', fluid='water', temperature=Temp_dd10, pressure=pressure_dryer)
Point_dd10.StateCalc()
State_dd10 = Point_dd10.__dict__
hfg10_dryer = State_dd10["enthalpy"]

Point_dd11 = State(pair='TP', fluid='water', temperature=Temp_dd11, pressure=pressure_dryer)
Point_dd11.StateCalc()
State_dd11 = Point_dd11.__dict__
h11_dryer = State_dd11["enthalpy"]

Q3_dryer, m_w_3_dryer = evaporator_fct(mass_dd1, mass_dd1-mass_dd4 + mass_dd4-mass_dd5, mass_dd4, h1_dryer, h11_dryer, h4_dryer, cp1_dryer, 15, hfg10_dryer)
#print(Q3_dryer)

data_param = {'Position': ['1', '4', '5', '8', '9', '10', '11'],
            'Mass flow (kg/s)': [mass_dd1, mass_dd4, mass_dd5, mass_dd8, mass_dd9, mass_dd10, mass_dd11],
            'Temperature (K)': [Temp_dd1, Temp_dd4, Temp_dd5, Temp_dd8, Temp_dd9, Temp_dd10, Temp_dd11],
            'Pressure (Pa)': [pressure_dd1, pressure_dd4, pressure_dd5, pressure_dryer, pressure_dryer, pressure_dryer, pressure_dryer]}

dfp = pd.DataFrame(data_param)
dfp = dfp.set_index('Position')
dfp = dfp.round(4)
HTML(dfp.to_html())

data_q = {'Dryer': ['Dryer 1', 'Dryer 2'],
        'Heat demand (W)': [Q3_dryer, Q2_dryer]}

dfq = pd.DataFrame(data_q)
dfq = dfq.set_index('Dryer')
dfq = dfq.round(2)
HTML(dfq.to_html())
```

### Heating demand of each HEX

In this section the following equation is used:

\begin{align}
    Q = m \cdot cp \cdot (T_{1} - T_{2})
\end{align}

The cp corresponding to the milk mixtures were calculated in the precedent section.

```{python cpDryers, echo = T, eval = T}
data_cp = {'Position': ['5', '9', '14'],
        'cp (J/kg.K)': [ cp5_dryer, cp9_dryer, cp14_dryer]}

dfcp = pd.DataFrame(data_cp)
dfcp = dfcp.set_index('Position')
dfcp = dfcp.round(2)
HTML(dfcp.to_html())

QHEX1_dryer = mass_dd8*cp8_dryer*(Temp_dd8-Temp_dd11)
QHEX2_dryer = mass_dd9*cp9_dryer*(Temp_dd10-Temp_dd9)
QHEX3_dryer = mass_dd5*cp5_dryer*(10)

data_QHEX = {'HEX': ['1', '2', '3'],
        'Q (W)': [ QHEX1_dryer, QHEX2_dryer, QHEX3_dryer]}

dfqhex = pd.DataFrame(data_QHEX)
dfqhex = dfqhex.set_index('HEX')
dfqhex = dfqhex.round(2)
HTML(dfqhex.to_html())
```

### Water demand to cool down the milk powder

It is assumed that the water used to cool down the milk powder is saturated. As such, the following formula can be used:

\begin{align}
    Q = m_{water} \cdot L_{water}
\end{align}

```{python waterDryers, echo = T, eval = T}
Lwater = 2264.705
mass_water = QHEX3_dryer / Lwater

data_water = {'HEX': ['3'],
        'Mass flow (kg/s)': [ mass_water]}

dfw = pd.DataFrame(data_water)
dfw = dfw.set_index('HEX')
dfw = dfw.round(2)
HTML(dfw.to_html())
```

### Steam demand to heat up the air

The steam demand can be computed in the same way as the water demand by inverting the sign of the latent heat parameter. The steam is assumed to be saturated.

```{python steamDryers, echo = T, eval = T}
LwaterEvap = 2264.705
mass_steam1 = QHEX1_dryer / LwaterEvap
mass_steam2 = QHEX2_dryer / LwaterEvap

data_steam = {'HEX': ['1', '2'],
        'Mass flow (kg/s)': [ mass_steam1, mass_steam2]}

dfs = pd.DataFrame(data_steam)
dfs = dfs.set_index('HEX')
dfs = dfs.round(2)
HTML(dfs.to_html())
```

### Water exiting the system

The amount of water exiting the system at dd13 is simply the difference of mass between dd11 and dd8:

```{python water, echo = T, eval = T}
water_exiting = mass_dd11 - mass_dd8

data_water_exiting = {'Position': ['13'],
        'Mass flow (kg/s)': [ water_exiting]}

dfwe = pd.DataFrame(data_water_exiting)
dfwe = dfwe.set_index('Position')
dfwe = dfwe.round(2)
HTML(dfwe.to_html())
```

### Summary for the Drum Dryers section

This table is a summary of the characteristics of each point of this section:

```{python dryer_summary, echo = T, eval = T}

mass_dd6 = mass_dd5
mass_dd7 = mass_dd6
mass_dd12 = mass_dd11
mass_dd13 = water_exiting
mass_dd14 = mass_dd8

Temp_dd6 = 323.15
Temp_dd7 = Temp_dd6
Temp_dd12 = Temp_dd11
Temp_dd13 = 318.15
Temp_dd14 = Temp_dd13

dryer_summary = {'Position': ['1', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14'],
            'Mass Flow (kg/s)': [mass_dd1, mass_dd4, mass_dd5, mass_dd6, mass_dd7, mass_dd8, mass_dd9, mass_dd10, mass_dd11, mass_dd12, mass_dd13, mass_dd14],
            'Temperature (K)': [Temp_dd1, Temp_dd4, Temp_dd5, Temp_dd6, Temp_dd7, Temp_dd8, Temp_dd9, Temp_dd10, Temp_dd11, Temp_dd12, Temp_dd13, Temp_dd14]}

dfsd = pd.DataFrame(dryer_summary)
dfsd = dfsd.set_index('Position')
dfsd = dfsd.round(4)
HTML(dfsd.to_html())
```

## Cleaning in Place

![Cleaning in Place](Figures/CIP.svg)

Assumptions: 

- For safety purposes the glass needs to contact with water which is at least at 65Â°C. Each glass bottle weights 370 g and has 500 mL of capacity. 

For this part of the process, the following data are used:

- Mass Flows
   $\dot{m}_2 = 4\,kg/s$
- Specific Heats
  - $c_{p,water} = 4.184\,kJ/kgK$ (Specific heat of liquid water)
  - $c_{p,glass} = 0.840\,kJ/kgK$ (Specific heat of glass: @noauthor_table_nodate)
  - $h_{fg, steam} = 2257\,kJ/kg$ (Latent heat of steam at $100^\circ C$)
- Temperatures
  - $T_1 = 25Â°C = 298\,K$ 
  - $T_2 = 60Â°C = 333\,K$
  - $T_3 = T_{10} = 80Â°C = 353\,K$
  - $T_4 = T_5 = T_6 = T_{12} = 75Â°C = 348\,K$
  - $T_7 = 30Â°C = 303\,K$
  - $T_8 = 25Â°C = 298\,K$
  - $T_{11} = 40Â°C = 313\,K$
  - $T_{steam} = 100Â°C = 373\,K$ (Steam pressure is assumed at 1 bar)

```{r Constants Cleaning in Place, echo = T, results='hide'}
cp_water=4.184
cp_glass=0.84
hfg_cipsteam = 2257

m_cip2=4

t_cip1=298
t_cip2=333
t_cip3=353
t_cip4=348
t_cip5 = t_cip4
t_cip6 = t_cip4
t_cip7=303
t_cip8=298
t_cip11=313
t_cip10 = t_cip3
t_cip12 = t_cip4
t_cipsteam = 373
```

### Mixer

The first component is an adiabatic mixer (enthalpy stays constant over the mixing). There are three different flows assumed to be water flow (according to pressure and temperature flows). Two in flows and on out flow. We can obtain the mass and energy balance at the mixer as follows:
$$
\dot{m}_{CIP,1}cp_{water}T_{CIP,1}+\dot{m}_{CIP,5}cp_{water}T_{CIP,5}=\dot{m}_{CIP,2}cp_{water}T_{CIP,2}
$${#eq-mixer_m1}
$$
\dot{m}_{CIP,1}+\dot{m}_{CIP,5}=\dot{m}_{CIP,2}
$${#eq-mixer_m2}

```{r Mixer, echo=T}
m_cip1 = m_cip2*(t_cip2-t_cip5)/(t_cip1-t_cip5) 
m_cip5 = m_cip2-m_cip1
```
Hence, $m_{CIP,1}$ is equal to `r m_cip1` $kg/s$ and $m_{CIP,5}$ is equal to `r m_cip5` $kg/s$.

### Heater

The next step is to compute balances of the upper HX (between Steam and point 2 and 3). At this HX, there is mixed water at $60^\circ C$ which is heated to $80^\circ C$. The steam used to heat up the water is assumed to be at 1 bar (costs saving reason). Again we have the following equations to compute the heat exchanged and the mass flow of steam (NB: mass flow of water is constant over the HX).
$$
Q_{CIPHX,steam}=\dot{m}_{CIP,2}Cp_{water}(T_{CIP,3}-T_{CIP,2})
$${#eq-CIPHXsteam1}

$$
Q_{CIPHX,steam}=\dot{m}_{steam}h_{fg,steam}
$${#eq-CIPHXsteam2}

```{r HX_steam, echo=T} 

q_cipsteam = m_cip2*cp_water*(t_cip3-t_cip2)
m_cipsteam = q_cipsteam/hfg_cipsteam

# Splitting between CIP-3 and CIP-10 
p = 0.5 # assumed for ease of calculation
m_cip3 = m_cip2*p
m_cip10 = m_cip2*(1-p)
```
There is `r q_cipsteam` $kW$ heat exchanged thanks to a `r m_cipsteam` $kg/s$ steam flow. 

### Showers

It has been assume for ease of calculation that both showers received the same exact mass flow of hot water. Thus, $\dot{m}_{3} = \dot{m}_{4} = \dot{m}_{10} = \dot{m}_{12}= \dot{m}_{shower}=\frac{\dot{m}_2}{2}$  Furthermore, it is assumed that there is no heat loss through radiation. It is also assumed the mass of the bottle will stay constant the entire process (from part 8 to part 11) and thus: $\dot{m}_8 = \dot{m}_9 = \dot{m}_{11} = \dot{m}_{glass}$. 

The heat balance for the first shower is as followed:
$$ \dot{m}_{glass}c_{p,glass}(T_9-T_8)=\dot{m}_{shower}c_{p,water}(T_{3}-T_4)$$
Then for shower 2:
$$ \dot{m}_{glass}c_{p,glass}(T_{11}-T_9)=\dot{m}_{shower}c_{p,water}(T_{10}-T_{12})$$
```{r Showers, echo=T}
Q_shower=m_cip3*cp_water*(t_cip3-t_cip4) #same w/ m_cip4
t_cip9=(t_cip11+t_cip8)/2
m_cipglass = Q_shower/(cp_glass*(t_cip9-t_cip8))
m_cip8 = m_cipglass
m_cip9 = m_cipglass
m_cip11 = m_cipglass
```
Thus, there is `r Q_shower` $kW$ of heat used at each shower and bottle flow rate is `r m_cipglass` $kg/s$.

### Splitter

```{r Splitter, echo=T}
m_cip4 = m_cip3
m_cip6 = 2*m_cip4-m_cip5
m_cip12 = m_cip4
```
No heat exchanged. Only mass flows such that $$ \dot{m}_{4}+\dot{m}_{12}=\dot{m}_{2}=\dot{m}_{5}+\dot{m}_{6}$$
This gives $\dot{m}_6$ is equal to `r m_cip6` $kg/s$.

### Cooler

```{r Cooler, echo=T}
t_cwater_in = 283
t_cwater_out = 298
m_cip7 = m_cip6
q_cipwater = m_cip6*(t_cip6-t_cip7)*cp_water
m_cipwater = q_cipwater/((t_cwater_out-t_cwater_in)*cp_water)
```

The final steps of this cleaning process is with the of a HX as a cooler. hot water will be cooled down to $30^\circ C$. 
As showed above with calculations for the HX_Steam there is thus  `r round(q_cipwater,2)` $kW$ transferred thanks to a `r m_cipwater` $kg/s$ cooling water flow (which is itself going from $10^\circ C$ to $25^\circ C$).

### Summary for the Cleaning in Place section

```{r CIPrecap, echo=F}
# Remaining data

# Creating data frames
# Installing and loading the datatable package
if (!requireNamespace("DT", quietly = TRUE)) {
  install.packages("DT")
}
library(DT)

# Creating data frames
CIP_recap <- data.frame('Points' = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'),
                       'Mass Flow (kg/s)' = c(m_cip1, m_cip2, m_cip3, m_cip4, m_cip5, m_cip6, m_cip7, m_cip8, m_cipglass, m_cip10, m_cip11, m_cip12),
                       'Temperature (Â°C)' = c(t_cip1, t_cip2, t_cip3, t_cip4, t_cip5, t_cip6, t_cip7, t_cip8, t_cip9, t_cip10, t_cip11, t_cip12))

CIP_heat <- data.frame('Points' = c('Steam', 'Shower 1', 'Shower 2', 'Cooler'),
                       'Heat (kW)' = c(q_cipsteam, Q_shower, Q_shower, q_cipwater))

# Printing data frames as HTML tables
datatable(CIP_recap)
datatable(CIP_heat)
```

## Cold Storage & Hot Water

Here are reported calculation of air mass flow required to remove 500kW of heat from a cold storage and the heat required to heat 1kg/s of water from 15Â°C to 55Â°C.

```{python Hot Water, echo=T}
from pyxosmose.state import State

water_in = State(pair='TP',fluid='Water',temperature=288,pressure=100000)
water_in.StateCalc()
water_out = State(pair='TP',fluid='Water',temperature=328,pressure=100000)
water_out.StateCalc()

h_in=water_in.enthalpy 
m_water=1
h_out=water_out.enthalpy 
Q_hot=m_water*(h_out-h_in)
#print Q_hot rounded at 2 digits
print('The heat required to heat 1kg/s of water from 15Â°C to 55Â°C is', round(Q_hot,2), 'W.')
```

```{python Cold Storage, echo=T}
T_in=273
T_out=268
Q_fridge=500000
Cp_air=1000
m_air=Q_fridge/(Cp_air*(T_in-T_out))
print('The air mass flow required to remove 500kW of heat from a cold storage is', m_air, 'kg/s.')
```

## WasteWater and Sludge Production 

![Wastewater](Figures/Wastewater.svg)

For this process we just have to focus on computing liquid and dry matter mass flows for each of the 4 flows ($dw_{tot}=dw_{dry}+dw_{liq}$). The discharge will only contains liquid water whereas the sludge is a mixture of 13.3wt% fry matter and 86.7wt% water (@shiDairyProcessingSludge2021). From this paper, the following equations enables to deduce the waste water produced (WP) as well as the sludge produced (SP):

$$
WP = WRM \times RM
$${#eq-WP}

$$
SP = SW \times WP
$${#eq-SP}

$$
SW = \frac{\frac{ES}{RMa}}{WRM}
$${#eq-SW}

Where $WRM$ is the wastewater to raw milk ratio (-) and $RM$ is the Raw Milk processing volume ($m^3/s$), $SW$  is the sludge to wastewater ratio ($kg/m^3$), $ES$ is the estimated annual sludge produced ($kg$), $RMa$ is the annual milk production ($m^3$), $WP$ is the wastewater produced ($m^3/s$) and $SP$ is the amount of sludge produced ($kg/s$).

From the data given we have that $RM=8kg/s$ and Asherruzzaman gives us that $WRM=2.71\pm 0.9$ in average. 
Thus the produced waste water is $0.021 m^3/s$ given a milk density of $1035kg/m^3$.

Then from 2017 data in Asherruzzaman we have that $ES=110000t$, $RMa=7163000m^3$ and thus $SW=\frac{\frac{110000000}{7163000}}{2.71}=5.59kg/m^3$. Thus the produced sludge is $SP = 5.59 \times 0.021 = 0.1174\text{kg/s}$.

There is also the assumption that dw3 is only sludge and dw4 only water ($dw_{tot2}=dw_{tot3}+dw_{tot4}$).
In dw3, the quantity of dry matter is again assume to be 13.3wt% and thus the quantity of water is 86.7wt%.
The total mass entering the system is WP and because of mass balance, the dry quantity exiting at dw3 must be the same that at dw2 and dw1 (because there is no dry matter in dw4).
Finally, we assume that WP density is around that of water (1000kg/m3).
Thus, we have the following table to sum up the results:

| Stream | $\dot{m}_{dry}\,(kg/s)$ | $\dot{m}_{liquid}\,(kg/s)$ |$\dot{m}_{total}$  |
|--------|:-----------------------:|:-------------------------:|:-----------------:|
| dw1    | 0.0156  | 20.9844 |21|
| dw2    |0.0156 |20.9844  |21|
| dw3    |0.01561  |0.1018 |0.1174|
| dw4    |0  |20.8826  |20.8826|
Table:Discharge water and sludge production streams mass composition


## Rivella Production

![Rivella](Figures/Rivella.svg)

Having a better understanding of dairy process, it is now possible to evaluate the energy and mass balance of Rivella production to be able to compare later its costs with the digester.
The process is described in the following figure:

The process will be divided in 3 main parts:

1. The concentration of the whey 
2. The production of Rivella Green 
3. The production of Rivella Red

### The concentration of the whey

All the whey is assumed to come from the evaporator stage with the following characteristics:

* 14.46 % of dry matter, 
* 85.54 % of water, 
* T = 4Â°C, 
* p = 1 bar,
* mass flow rate of 1.52 kg/s.

At the end of the concentration process the whey will have the following characteristics:

* 50 % of dry matter, 
* 50 % of water, 
* T = 100Â°C, 
* p = 1 bar,
* mass flow rate to be determined.

We assume, the following: in the fermentation we have heating from 4 to 25Â°C, the mixer is isothermal and the evaporator is adiabatic.
Also the bacterias are added at T = 25Â°C and without disturbing the flow rate of the whey (m1 = m3, m4 = 0 $m/ s$) and the aromas are added at T = 25Â°C with 2g aromas/100g of whey.
Bacteria and aromas have the same heat capacity as water ($c_p=4184\,J/kgK$).
The pressure stays constant at 1 bar.

```{python ConcentrationWhey, echo = T, eval = T}

from codes_01_energy_bill.coolprop_functions import mixture
from pyxosmose.state import State

#Fixed Parameters
m1=1.52 #kg.s-1
m2=0 #kg.s-1
m3=1.52 #kg.s-1
m4=0.02*m3 #kg.s-1
m5=m3+m4 #kg.s-1
#to get m6 we assume that R6 is only water and that the flow is a mixture of fat and water
#m6=1*mw6+0*mf6 so m6=mw6
#mw7=0.5m7=0.5*(m5-m6)
#mw6=mw5-mw7=0.8554*m5-0.5*(m5-m6)
#m6=[0.8554*m5-0.5*m5]/0.5
m6=(0.8554*m5-0.5*m5)/0.5 #kg.s-1
m7=m5-m6 #kg.s-1

T1=277 #K
T2=298 #K
T3=T2 #K
T4=T2 #K
T5=T2 #K
T6=373 #K
T7=T6 #K

Tsteam_out = 373 #K

p=1 #bar

R1 = mixture(T=T1, P=p, frac_water=0.8554, frac_fat=0.1446) # this is a dictionary!!
cp1=R1["cpmass"]
h1=R1["enthalpy"]

#Fermentation 
Qferm = m1*cp1*(T2-T1) #J/s

#Evaporator
Tsteam=373 #K
Steam = State(pair='TP', fluid='water', temperature=Tsteam, pressure=p)
Steam.StateCalc()
State_Steam = Steam.__dict__ # Whole dictionary with properties
hfg=State_Steam["enthalpy"]

h5=h1
cp5=cp1

R6 = mixture(T=T6, P=p, frac_water=1, frac_fat=0) # this is a dictionary!!
h6=R6["enthalpy"]

R7 = mixture(T=T7, P=p, frac_water=0.5, frac_fat=0.5) # this is a dictionary!!
h7=R7["enthalpy"]
cp7=R7["cpmass"]

Qevap = m5*cp5*(T7-T5) - m5*h5 + m6*h6 + m7*h7 #J/s
msteam = Qevap/hfg #kg/s
print('Qevap =', round(Qevap,2), 'W')
```

### The production of Rivella Green 

30% of the concentrated whey is used for the Rivella Green production
The composition of the Rivella Green is the following: 

* 30% whey,
* 50% water,
* 20% sugar.

Tea is added at T = 50Â°C, without disturbing the flow rate of the Rivella Green (m8 = m10, m9 = 0 m/s) 
The sugar and water are added are added at T = 25Â°C (will thus cool the fluid and reduce the requirement for a steep change through HX2) and thus the mixer 3 is not isothermal anymore.
CO2 is added without change of temperature and pressure (isothermal mixer) and without changing the mass flow (the content of gas in each bottle is not known).
The Rivella Green exits at T = 10Â°C.
The pressure stays constant at 1 bar during the entire production.

```{python RivellaGreen, echo = T, eval = T}
#Fixed Parameters
m8=0.3*m7 #kg.s-1
m10=m8 #kg.s-1
m9=0 #kg.s-1

TA=298 #K ref temperature
T8=323 #K
T9=323 #K
T10=T8
T11=298
T12=T11
T16=283 #K
T14=T16
T15=T16

#HX1: heater
QHX1=m7*cp7*(T7-T8) #J/s

#Mixer 3
#We first have to determine the different flows of this non-isothermal mixer
#we will use the composition of Rivella Green and assume water comes from both R10 (50% of the conc whey) and R11
#m13=m10+m11+m12
#m11=0.5*m13-0.5*m10
#m12=0.2*m13

m13=(0.5*m10)/0.3 #kg.s-1
m14=m13
m16=m14
m11=0.5*m13-0.5*m10
m12=0.2*m13

R10 = mixture(T=T10, P=p, frac_water=0.5, frac_fat=0.5) # this is a dictionary!!
cp10=R10["cpmass"]

R11 = mixture(T=T11, P=p, frac_water=1, frac_fat=0) # this is a dictionary!!
cp11=R11["cpmass"]
h11=R11["enthalpy"]

cp12=1224 #J/kgK

cp13 = 0.3*cp10 + 0.5*cp11 + 0.2*cp12

#From the heat balance of non-isothermal mixer we can then determine the temperature of the Rivella Green T13
#m13*cp13*(T13-TA)=m10*cp10*(T10-TA)+m11*cp11*(T11-TA)+m12*cp12*(T12-TA)

T13=((m10*cp10*(T10-TA)+m11*cp11*(T11-TA)+m12*cp12*(T12-TA))/(m13*cp13))+TA

#HX2: cooler1
QHX2=m13*cp13*(T13-T14) #J/s

print(' QHX1 =', round(QHX1,2), 'W', '\n', 'QHXgreen =', round(QHX2,2), 'W')
```

### The production of Rivella Red 

70% of the concentrated whey is used for the Rivella Red production.
The composition of the Rivella Red is the following: 

* 30% whey,
* 35% water,
* 35% sugar.

The sugar and water are added are added at T = 25Â°C (will thus cool the fluid and reduce the requirement for a steep change through HX2) and thus the mixer 3 is not isothermal anymore.
CO2 is added without change of temperature and pressure (isothermal mixer) and without changing the mass flow (because the content of gas in each bottle is not known).
The Rivella Red exits as Rivella Green at T = 10Â°C.
The pressure stays constant at 1 bar during the entire production.

```{python RivellaRed, echo = T, eval = T}
#Fixed Parameters
m17=0.7*m7 #kg.s-1

T17=T8 #K
T18=T11
T19=T11
T23=T16 #K
T22=T23
T21=T23

#Mixer 4
#We first have to determine the different flows of this non-isothermal mixer
#we will use the composition of Rivella Green and assume water comes from both R17 (50% of the conc whey) and R18
#m20=m17+m18+m19
#m18=0.35*m20-0.5*m17
#m19=0.35*m20
m20=(0.5*m17)/0.3 #kg.s-1
m21=m20
m23=m21
m18=0.35*m20-0.5*m17
m19=0.35*m20

R17 = mixture(T=T17, P=p, frac_water=0.5, frac_fat=0.5) # this is a dictionary!!
cp17=R17["cpmass"]
h17=R17["enthalpy"]

R18 = mixture(T=T18, P=p, frac_water=1, frac_fat=0) # this is a dictionary!!
cp18=R18["cpmass"]
h18=R18["enthalpy"]

cp19=1224 #J/kgK

cp20 = 0.3*cp17 + 0.35*cp18 + 0.35*cp19

#From the heat balance of non-isothermal mixer we can then determine the temperature of the Rivella Green T13
#m20*cp20*(T20-TA)=m17*cp17*(T17-TA)+m18*cp18*(T18-TA)+m19*cp19*(T19-TA)

T20=((m17*cp17*(T17-TA)+m18*cp18*(T18-TA)+m19*cp19*(T19-TA))/(m20*cp20))+TA
#HX2: cooler1
QHX3=-m20*cp20*(T21-T20) #J/s

print('QHXred =', round(QHX3,2), 'W')
```

### Summary for the Rivella production section

```{python SummaryData, echo = T, eval = T}
#Put everything in a dataframe
from IPython.display import HTML
import pandas as pd
import numpy as np

#Compute remaining enthalpies and heat capacities

cp2=4184 #J/kgK

h3=h1
cp3=cp1

cp4=4184 #J/kgK

R6 = State(pair='TP', fluid='water', temperature=T6, pressure=p)
R6.StateCalc()
State_R6 = R6.__dict__ # Whole dictionary with properties
h6=State_R6["enthalpy"]
cp6=State_R6["cpmass"]

R8 = mixture(T=T8, P=p, frac_water=0.5, frac_fat=0.5) 
h8=R8["enthalpy"]
cp8=R8["cpmass"]

h10=h8
cp10=cp8

h12=0 #CHECKKKKKKKKKKK HOW TO GET ENTHALPY SUGAR 
#m13*h13=m10*h10+m11*h11+m12*h12
h13=((m10*h10+m11*h11+m12*h12)/m13)

#m13(h13-h14)=m13*cp13*(T13-T14)
h14=h13-m13*cp13*(T13-T14)
cp14=cp13 #assume no change of cp with cooling for Rivella Green

h16=h14
cp16=cp13

h19=h16 #CHECKKKKKKKKKKK HOW TO GET ENTHALPY SUGAR

#m20*h20=m17*h17+m18*h18+m19*h19
h20=((m17*h17+m18*h18+m19*h19)/m20)

#m20(h20-h21)=m20*cp20*(T20-T21)
h21=h20-m20*cp20*(T20-T21)
cp21=cp20 #assume no change of cp with cooling for Rivella Red

h23=h21
cp23=cp20

#Create a dataframe with all the parameters

Rivella = pd.DataFrame(columns=['Point', 'Temperature (K)', 'Pressure (bar)', 'Mass flow rate (kg/s)', 'Heat capacity (J/kgK)', 'Enthalpy (J/kg)'])
Rivella['Point']=['1', '2', '3', '4', '5', '6', '7', '8', '9', '10','11','12','13','14','15','16','17','18','19','20','21','22','23']
Rivella['Temperature (K)']=[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23]
Rivella['Pressure (bar)']=[p,p,p,p,p,p,p,p,p,p,p,p,p,p,p,p,p,p,p,p,p,p,p]
Rivella['Mass flow rate (kg/s)']=[m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,'',m16,m17,m18,m19,m20,m21,'',m23]
Rivella['Heat capacity (J/kgK)']=[cp1,cp2,cp3,cp4,cp5,cp6,cp7,cp8,'',cp10,cp11,cp12,cp13,cp14,'',cp16,cp17,cp18,cp19,cp20,cp21,'',cp23]
Rivella['Enthalpy (J/kg)']=[h1,'',h3,'',h5,h6,h7,h8,'',h10,h11,'h12',h13,h14,'',h16,h17,h18,h19,h20,h21,'',h23]
Rivella = Rivella.set_index('Point')
Rivella = Rivella.round(2)
HTML(Rivella.to_html())

#print a data frame with the heating value of the 3 hex
HX = pd.DataFrame(columns=['HX', 'Heat exchanged (W)'])
HX['HX']=['Evap', 'HX1', 'HX green', 'HX red']
HX['Heat exchanged (W)']=[Qevap, QHX1,QHX2,QHX3]
HX = HX.set_index('HX')
HX = HX.round(2)
HTML(HX.to_html())
```

## Digester

![Digester](Figures/Digester.svg)

The digester module aims to use sludge, consider as trash in milk production, to produce biogas and then make profits of it. In this project, all the whey and only whey is used for rivella production and all the sludge and only sludge is used for biogas production. This module is composed of a digestor to produce biogas, a rotary filter to eliminate some water, and a steam dryer to obtain as output dryed digestate. In order to compute the mass flow and energy balance of the digester module, the computation are split in three parts: the digestor, the rotary filter and the steam dryer. 

### Digestor

To compute the biogas production, the following equation is used:

$$
\text{Biogas}(t) = \sum_{i=1}^{n} \text{Flow}(i) \cdot \text{BMP}(i) \cdot \text{TS}(i) \cdot \text{VS}(i) \cdot (1 - e^{-k_i t})
$${#eq-biogas}

From litterature @holligerMethaneProductionFullScale2017, in table 2, data for waste sludge are the following:

- $\text{TS}_\text{sludge}$ = 0.037 
- $\text{VS}_\text{sludge}$ = 0.742
- $\text{BMP}_\text{sludge}$ = 0.407 $m^3_{CH4}/kg_{VS}$

Considering 90 % conversion achieved for the given residence time and only sludge is used, the @eq-biogas can be rewrite as: 

$$
\text{Biogas}(t) = \text{Flow}_\text{sludge} \cdot \text{BMP}_\text{sludge} \cdot \text{TS}_\text{sludge} \cdot \text{VS}_\text{sludge} \cdot 0.90
$${#eq-biogas_simplified}

Known data:

- $d_\text{1,dry}$ = $d_\text{w3,dry}$ = 0.01561 kg/s
- $d_\text{1,liquid}$ = $d_\text{w3,liquid}$ = 0.1018 kg/S
- $CH4_\text{in biogas}$ = 0.55 kg_CH4/kg_biogas (55% CH4 in biogas)
- $U_\text{digester}$ = 2.5 W/m2/Â°C
- $T_\text{digester}$ = 55Â°C
- $T_\text{in}$ = 20Â°C
- Ratio H/D = 0.6
- Minimum biogas expansion volume: 15%

Assumptions:

- p = 100000 Pa = 1 bar
- $\rho_\text{biogas}$ = 1.15 kg/m3
- $cp_\text{flow}$ = 4180 J/kg/Â°C
- $\rho_\text{CH4}$ = 0.657 kg/m3
- 20 days of residence time
- No water in biogas d3

#### Mass Flow

With those informations, the mass flow balance can be computed:

```{python Digester, echo = T, eval = T}
import numpy as np
import pandas as pd
from codes_01_energy_bill.coolprop_functions import mixture
from pyxosmose.state import State

p=100000 #Pa
TS_sludge = 0.037
VS_sludge = 0.742
BMP_sludge = 0.407 # m3_CH4/kg_VS
d1_dry = 0.01561
d1_liquid = 0.1018
d1 = d1_dry + d1_liquid
conversion_factor = 0.90
CH4_density = 0.657 # kg/m3
CH4_in_biogas = 0.55 # kg_CH4/kg_biogas (55% CH4 in biogas)
biogas_density = 1.15 # kg/m3
biogas_expansion = 0.15
U_digester = 2.5 # W/m2/Â°C
T_digester = 55+273 # K
T_in = 20+273 # K
cp_flow = 4180 # J/kg/Â°C

d3 = d1 * BMP_sludge * TS_sludge * VS_sludge * conversion_factor * CH4_density / CH4_in_biogas # kg/s
d2 = d1 - d3

d2_liquid = d1_liquid # Assumption : no water in biogas d3
d2_dry = d2 - d2_liquid

# print d1, d2, d3 in a dataframe
data = {'Point': ['1', '2', '3'],
        'Dry Mass flow (kg/s)': [d1_dry, d2_dry, d3],
        'Liquid Mass flow (kg/s)': [d1_liquid, d2_liquid, 0],
        'Total Mass flow (kg/s)': [d1, d2, d3]}
df = pd.DataFrame(data)
df = df.set_index('Point')
df = df.round(4)
HTML(df.to_html())
```

#### Digestor Geometry

$$
V_\text{biogas} = \frac{d_3 \cdot \text{time}}{\rho_\text{biogas}}
$${#eq-Vbiogas}

$$
V_\text{digester} = V_\text{biogas} \cdot (1 + \text{biogas expansion})
$${#eq-Vdigester}

$$
D = \left( \frac{4 \cdot V_\text{digester}}{0.6 \cdot \pi} \right)^{1/3}
$${#eq-D}

$$
H = 0.6 \cdot D
$${#eq-H}

$$
A = \pi \cdot D \cdot H + 2 \cdot \pi \left( \frac{D}{2} \right)^2
$${#eq-A}

```{python Volume, echo = T, eval = T}
# Compute the Volume
time = 20 * 24 * 3600 # 20 days in seconds
V_biogas= d3 * time / biogas_density # m3

# Compute the surface area
V_digester = V_biogas * (1 + biogas_expansion) # m3

D = (4 * V_digester / (0.6 * np.pi))**(1/3) 
H = 0.6 * D
A = np.pi * D * H + 2 * np.pi * (D/2)**2 # cylindrical digester area

# print in a dataframe the volume, the height, the diameter and the area of the digester
data = {'Point': ['Digester'],
        'Volume (m3)': [V_digester],
        'Diameter (m)': [D],
        'Height (m)': [H],
        'Area (m2)': [A]}
df = pd.DataFrame(data)
df = df.set_index('Point')
df = df.round(2)
HTML(df.to_html())
```


Knowing the surface area of the digester and the Heat transfer coefficient for well-insulated digester $U_\text{digester}$, the heat loss can be computed:

$$
Q_\text{digester} = U_\text{digester} \cdot A \cdot (T_\text{digester} - T_\text{in})
$${#eq-Qdigester}

$$
Q_\text{flow} = cp_\text{flow} \cdot d_1 \cdot (T_\text{digester} - T_\text{in})
$${#eq-Qflow}

$$
Q_\text{tot} = Q_\text{digester} + Q_\text{flow}
$${#eq-Qtot}

```{python Heat, echo = T, eval = T}
# Compute the heat loss
Q_digester = U_digester * A * (T_digester - T_in) # W
Q_flow = cp_flow * d1 * (T_digester - T_in) # W
Q_tot = Q_digester + Q_flow

# print in a dataframe the 3 losses
data = {'Point': ['Digestor', 'Flow', 'Total'],
        'Heat Loss (W)': [Q_digester, Q_flow, Q_tot]}
df = pd.DataFrame(data)
df = df.set_index('Point')
df = df.round(2)
HTML(df.to_html())
```

### Rotary filter

The rotary filter does not consume any heat. It is considered as a mechanical device only. The mass flow is computed as follow:

- only water is removed: $d_{5,\text{dry}} = d_{2,\text{dry}}$
- d5 is composed of 50% wt. H2O (w.b.): $d_{5,\text{liquid}} = d_{5,\text{dry}}$
- $d_5 = d_{5,\text{dry}} + d_{5,\text{liquid}}$
- d4 is fully liquid: $d_4 = d_{2,\text{liquid}} - d_{5,\text{liquid}}$

```{python rotary, echo = T, eval = T}
#Rotary Filter
d5_dry = d2_dry
d5_liquid = d5_dry
d5 = d5_dry + d5_liquid
d4 = d2_liquid - d5_liquid

# print in a data frame the mass flow of dry and liquid for point 4 and 5 and the total mass flow for point 4 and 5
data = {'Point': ['4', '5'],
        'Dry Mass flow (kg/s)': [0, d5_dry],
        'Liquid Mass flow (kg/s)': [d4, d5_liquid],
        'Total Mass flow (kg/s)': [d4, d5]}
df = pd.DataFrame(data)
df = df.set_index('Point')
df = df.round(4)
HTML(df.to_html())
```

### Steam dryer

The steam dryer target is to reduced the water composition of the digestate from 50% to 5%. It is assumed that $h_\text{steam}$ = 2250000 J/kg at T = 100Â°C.

The energy required to evaporate the water is computed as follow:
$$
Q_\text{sd} = d_5 \cdot (0.5 - 0.05) \cdot h_\text{steam}
$${#eq-Qsd}

Assumptions:

- $T_7$ = 150Â°C
- $T_8$ = 130Â°C

Knowing this energy, the mass flow of the steam is computed as follow:

- 90% of the water in d5 is removed: $d_6 = d_5 - 0.9 \cdot d_{5,\text{liquid}}$
- $d_7 = d_8 = \frac{Q_{sd}}{cp7 * (T_7 - T_8)}$

```{python dryer, echo = T, eval = T}
# Steam dryer
h_steam = 2250000 # J/kg source wikipedia at T = 100Â°C
Q_sd = d5 * (0.5-0.05) * h_steam # W from 50% to 5% water
print('Q_sd = ', Q_sd, 'W')
d6 = d5 - 0.9 * d5_liquid # 90% of the water in d5 is removed

T7 = 150 + 273 # Â°C  --> is an assumption
T8 = 130 + 273 # Â°C  --> is an assumption

point7 = State(pair='TP', fluid='water', temperature=T7, pressure=p)
point7.StateCalc()
point7 = point7.__dict__ # Whole dictionary with properties
h7=point7["enthalpy"]
cp7=point7["cpmass"]
d7 = Q_sd / (cp7 * (T7 - T8)) # kg/s
d8 = d7 + d5*0.9

# print in a dataframe the mass flow of dry and liquid for point 6, 7 and 8 and the total mass flow for point 6, 7 and 8
data = {'Point': ['6', '7', '8'],
        'Dry Mass flow (kg/s)': [d6*0.05, 0, 0],
        'Liquid Mass flow (kg/s)': [d6*0.95, d7, d8],
        'Total Mass flow (kg/s)': [d6, d7, d8]}
df = pd.DataFrame(data)
df = df.set_index('Point')
df = df.round(4)
HTML(df.to_html())
```

### Summary for the digester section

```{python recap_digester, echo = T, eval = T}
#Create a dataframe with all the parameters

T1= T_in
T2= T_digester
T3= T2
T4= T2
T5= 373
T6= T5

data = {'Point': ['1', '2', '3', '4', '5', '6', '7', '8'],
        'Temperature (K)': [T1, T2, T3, T4, T5, T6, T7, T8],
        'Pressure (bar)': [p, p, p, p, p, p, p, p],
        'Mass flow rate (kg/s)': [d1, d2, d3, d4, d5, d6, d7, d8]}
df = pd.DataFrame(data)
df = df.set_index('Point')
df = df.round(4)
HTML(df.to_html())

#print dataframe with Q_tot (named as Q_digestor in the table) and Q_sd
data = {'Point': ['Digestor', 'Steam Dryer'],
        'Q (W)': [Q_tot, Q_sd]}
df = pd.DataFrame(data)
df = df.set_index('Point')
df = df.round(2)
HTML(df.to_html())
```

```{python test, echo = F, eval = F}
from codes_01_energy_bill.coolprop_functions import mixture
State_Cold6=mixture(T=277, P=100000, frac_water=0.883, frac_fat=0.117)
print(State_Cold6)

State_Hot6=mixture(T=293.8, P=100000, frac_water=0.883, frac_fat=0.117)
print(State_Hot6)

State_Cold2=mixture(T=333, P=100000, frac_water=0.883, frac_fat=0.117)
print(State_Cold2)

State_Hot2=mixture(T=348, P=100000, frac_water=0.883, frac_fat=0.117)
print(State_Hot2)
```
