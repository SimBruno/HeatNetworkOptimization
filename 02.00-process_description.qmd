# Process description and analysis

To provide practical solutions to our industrial partner, the dairy factory, our first task is to show that we truly grasp the problem. To a business manager, industrial processes may seem mysterious and complex, like "black boxes." However, as engineers, we need to dig into the details, using mathematics and physics to analyze and design these industrial processes.

In this section, your task is to compute the thermodynamic properties of all the streams within each section of the dairy factory. The data collected here will be instrumental in calculating exergy efficiency and energy bills in the following section. To facilitate your work, we have provided an illustrative example for the Pasteurization section below:

## Pasteurisation section

![Pasteurisation](Figures/pasteurisation.svg)

In this section will be presented the mass and energy balances for each chemical operation of the milk pasteurisation. This pasterisation aims to produce cream and and milk from fresh milk with the intergation of a thickener at some point. 

### Mass Flows 

Because of the mass flow conservation, we have:

\begin{cases}
\dot m_{Mixure~Out} = \dot m_{Past{\_}Cent} = \dot m_{Fresh~Milk} = 8~kg/s \\

\dot m_{Milk{\_}0} = \dot m_{Past{\_}a} = \dot m_{Past{\_}b} = \dot m_{Past{\_}c} =  \dot m_{Past{\_}d} = \dot m_{Milk} = 7.52~kg/s \\

\dot m_{cream{\_}0} = \dot m_{crpast{\_}a} = \dot m_{Past{\_}cent} - \dot m_{Milk{\_}0} =  \dot m_{Fresh~Milk} - \dot m_{Milk} = 8 - 7.52 = 0.48~kg/s ~~ (centrifuge) \\

\dot m_{crpast{\_}x} = \dot m_{crpast{\_}b} = \dot m_{crpast{\_}c} = \dot m_{Cream} =  0.55~kg/s \\

\dot m_{thickener} = 0.07~kg/s \\

\end{cases}

Consequently, all mass flows are defined.

### Heat Capacity

Are already provided the following heat capacity data:

- $c_{p,Raw~Milk} = 3.8 kJ/(kgK)$ (milk after centrifuge)

- $c_{p,Cream~ac} = 3.4 kJ/(kgK)$ (cream after centrifuge)

From Litterature [add reference] we chose:

- $c_{p,thickener} = c_{p,albaline} = 0.07 kJ/(kgK)$

Assuming that the mixer provides an ideal mix, we have:

\begin{align*}
    c_{p,cream} &= \frac{\dot m_{cream{\_}0}}{\dot m_{Cream}}.c_{p,Cream~ac} + \frac{\dot m_{thickener} }{\dot m_{Cream}}.c_{p,thickener} \\
    \\
    c_{p,cream} &= \frac{0.48}{0.55}.3400 + \frac{0.07}{0.55}.4175 
\end{align*}

Finally:

- $c_{p,cream} = 3.5~kJ/(kgK)$



### Equations of operations 

#### Refrigeration

$\dot Q_{refrigeration} = \dot m_{Fresh~Milk} . c_{p,Fresh~Milk} . (T_{Fresh~Milk} - T_{Mixure{\_}out})$

#### PAST1

$\dot Q_{past~1} = \dot m_{Fresh~Milk} . c_{p,Fresh~Milk} . (T_{Past{\_}cent} - T_{Mixure{\_}out}) = \dot m_{Milk} . c_{p,Raw~Milk} . (T_{Past{\_}d} - T_{Past{\_}c})$

#### TO CONTINUE
```{python coolprop, echo = T, eval = T}
from CoolProp.CoolProp import PropsSI
rho = PropsSI('D', 'T', 298.15, 'P', 101325, 'Nitrogen')
```


```{python state-function, echo = T, eval = T}
from pyxosmose.state import State
# First, define the thermodynamic point,
Point1 = State(pair='TP', fluid='Water', temperature=340, pressure=31000)
# Then calculate the state using the State class method StateCalc
Point1.StateCalc()
# And print the dictionary for revision
State1 = Point1.__dict__ # Whole dictionary with properties
h1 = Point1.enthalpy # Point.enthalpy is equivalent to State1["enthalpy"]
```

```{r render-table, echo = T}
# a way to pass the value from python to r is to through json file
library(reticulate)
x = 42
```


## Evaporation section


## Process 3

...

