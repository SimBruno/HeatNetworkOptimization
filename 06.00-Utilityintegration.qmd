# Energy conversion integration

Once the heat recovery is implemented, the energy balance of the process system is closed by converting energy resources like natural and electricity into useful heat, cold or refrigeration heat loads for the process.

You will proceed by the following steps :

1. Generating the Grand composite curve (GCC) of the process system and analysing the temperature levels and the amount for the heat deficits and surplus in the system. 
2. From the Grand composite curve analysis, a list of possible energy conversion technologies like boilers, steam or Rankine cycles, heat pumps, cooling water or refrigeration system will be established. The hot and cold streams as well as the resources consumption/production as well as the associated investment will be defined based on the estimated heat loads and temperatures from the process system GCC.
3. System **Key Performance Indicators (KPI)** will be defined to characterise :
     1. the operating expenditure (OPEX) in [CHF/year]: cost of the resources and the waste flows to supply the energy requirements of the process on a yearly basis.
     2. the capital expenditure (CAPEX) in [CHF]: the investment associated with energy conversion units
     3. the total expenditure (TOTEX) in [CHF/year]: total cost of the energy supply considering the annualised investment and operating cost
     3. the exergy losses in [kW] or in [kJ/$kg_{product}$] when converting hte resources to useful heat, electricity, cooling and refrigeration needs.
     4. the emissions  in [$kg_{CO_{2}}$/year] and the associated life cycle environmental impact in [$kg_{CO_{2}eq}$/year] of the energy supply.
4. The energy conversion system integration is calculated by calculating the relative flows (level of usage) in the energy conversion system. The flows are calculated based on a given set of energy conversion unit and with one of the KPI as an objective. This calculation aims at discovering synergies or complementarities between energy covnersion technologies to suppply the process energy needs.
5. In particular, the integration of the soda production will be investigated, by making a sensitivity analysis of the capacity on the soda production process.
6. The systematic generation of alternative system configuration options will allow to compare the different options and select the final recommendation.


## Grand Composite Curve

Here is the grand composite curve with both Rivella and Digester processes:
```{python, echo = T, eval = T}
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import json
import numpy as np


# read json for heat integration data
file_name = open('codes_02_heat_recovery/result/brewery-57.json')
integ = json.loads(file_name.read())

# we used .keys() and json-reader to locate the data of interest (hot and cold composite curves)
hotcc = integ["results"]["graph"][0][0][1]["data"][0]["curve"]
coldcc = integ["results"]["graph"][0][0][1]["data"][1]["curve"]

# extract the temperature (T in Kelvin) and heat (Q in kW)
T_hc = [i["T"] for i in hotcc]
Q_hc = [i["Q"] for i in hotcc]
T_cc = [i["T"] for i in coldcc]
Q_cc = [i["Q"] for i in coldcc]

# compute the shifted carnot factor (1 - T0/T) and Treference = 298.15K
Tref = 298.15 
ca_hc = [(1-Tref/i) for i in T_hc]
ca_cc = [(1-Tref/i) for i in T_cc]

# compute back the original carnot factors given a deltaT_min
#deltaT_min = 40
deltaT_min = 5
T_hc_ori = [(i+deltaT_min/2) for i in T_hc]
T_cc_ori = [(i-deltaT_min/2) for i in T_cc]
ca_hc_ori = [(1-298.15/i) for i in T_hc_ori]
ca_cc_ori = [(1-298.15/i) for i in T_cc_ori]

# prepare the second y-axis for plotting
# the minim carnot value is extracted from the original cooling. Round it to the lowest .0
# the maximum carnot carnot value is extracted from the original heating. Round it to the highest .0
ca_min = round(min(ca_cc_ori) - 0.05, 1)
ca_max = round(max(ca_hc_ori) + 0.05, 1)
# generate an array with the carnot list from min to max
ca_values = np.arange(ca_min, ca_max, 0.2)
# compute the corresponding temperature values in celcius
Tref_ce = 298.15
T_ce = [int(Tref_ce/(1-i) - 273.15) for i in ca_values]


T_cc = [(i-273.15) for i in T_cc]
T_cc_ori = [(i-273.15) for i in T_cc_ori]
T_hc = [(i-273.15) for i in T_hc]
T_hc_ori = [(i-273.15) for i in T_hc_ori]

Q_gcc = np.zeros(len(Q_cc))

for i in range(len(Q_cc)):
  Q_gcc[i] = Q_cc[i] - Q_hc[i]  

figure, ax = plt.subplots(figsize = (8,6))

#T_hc1 = [(i+273.15) for i in T_hc]
ax.plot(Q_gcc, T_hc, "-g")
plt.axhline(y=0, color='black', linestyle='--')
plt.axvline(x=0, color='black', linestyle='--')

ax.set_xlabel('$Heat \ Load \ (kW)$', labelpad=12)
ax.set_ylabel('$Temperature \ (°C)$')
ax.set_title('$Grand \ Composite \ Curve$')
ax.legend(["Grand Composite Curve"])

print(Q_gcc[0])
plt.show()

```



Here is the one with neither Rivella nor Digester:
```{python, echo = T, eval = T}
import matplotlib.pyplot as plt
import json
import numpy as np


# read json for heat integration data
file_name = open('codes_02_heat_recovery/result/brewery-59NoRivellaNoDigester.json')
integ = json.loads(file_name.read())

# we used .keys() and json-reader to locate the data of interest (hot and cold composite curves)
hotcc = integ["results"]["graph"][0][0][1]["data"][0]["curve"]
coldcc = integ["results"]["graph"][0][0][1]["data"][1]["curve"]

# extract the temperature (T in Kelvin) and heat (Q in kW)
T_hc = [i["T"] for i in hotcc]
Q_hc = [i["Q"] for i in hotcc]
T_cc = [i["T"] for i in coldcc]
Q_cc = [i["Q"] for i in coldcc]

# compute the shifted carnot factor (1 - T0/T) and Treference = 298.15K
Tref = 298.15 
ca_hc = [(1-Tref/i) for i in T_hc]
ca_cc = [(1-Tref/i) for i in T_cc]

# compute back the original carnot factors given a deltaT_min
#deltaT_min = 40
deltaT_min = 5
T_hc_ori = [(i+deltaT_min/2) for i in T_hc]
T_cc_ori = [(i-deltaT_min/2) for i in T_cc]
ca_hc_ori = [(1-298.15/i) for i in T_hc_ori]
ca_cc_ori = [(1-298.15/i) for i in T_cc_ori]

# prepare the second y-axis for plotting
# the minim carnot value is extracted from the original cooling. Round it to the lowest .0
# the maximum carnot carnot value is extracted from the original heating. Round it to the highest .0
ca_min = round(min(ca_cc_ori) - 0.05, 1)
ca_max = round(max(ca_hc_ori) + 0.05, 1)
# generate an array with the carnot list from min to max
ca_values = np.arange(ca_min, ca_max, 0.2)
# compute the corresponding temperature values in celcius
Tref_ce = 298.15
T_ce = [int(Tref_ce/(1-i) - 273.15) for i in ca_values]


T_cc = [(i-273.15) for i in T_cc]
T_cc_ori = [(i-273.15) for i in T_cc_ori]
T_hc = [(i-273.15) for i in T_hc]
T_hc_ori = [(i-273.15) for i in T_hc_ori]

Q_gcc = np.zeros(len(Q_cc))

for i in range(len(Q_cc)):
  Q_gcc[i] = Q_cc[i] - Q_hc[i]  

figure, ax = plt.subplots(figsize = (8,6))

#T_hc1 = [(i+273.15) for i in T_hc]
ax.plot(Q_gcc, T_hc, "-g")
plt.axhline(y=0, color='black', linestyle='--')
plt.axvline(x=0, color='black', linestyle='--')

ax.set_xlabel('$Heat \ Load \ (kW)$', labelpad=12)
ax.set_ylabel('$Temperature \ (°C)$')
ax.set_title('$Grand \ Composite \ Curve$')
ax.legend(["Grand Composite Curve"])

print(Q_gcc[0])
plt.show()

```







Here is the one with only Rivella:

```{python, echo = T, eval = T}
import matplotlib.pyplot as plt
import json
import numpy as np


# read json for heat integration data
file_name = open('codes_02_heat_recovery/result/brewery-59_no_digester.json')
integ = json.loads(file_name.read())

# we used .keys() and json-reader to locate the data of interest (hot and cold composite curves)
hotcc = integ["results"]["graph"][0][0][1]["data"][0]["curve"]
coldcc = integ["results"]["graph"][0][0][1]["data"][1]["curve"]

# extract the temperature (T in Kelvin) and heat (Q in kW)
T_hc = [i["T"] for i in hotcc]
Q_hc = [i["Q"] for i in hotcc]
T_cc = [i["T"] for i in coldcc]
Q_cc = [i["Q"] for i in coldcc]

# compute the shifted carnot factor (1 - T0/T) and Treference = 298.15K
Tref = 298.15 
ca_hc = [(1-Tref/i) for i in T_hc]
ca_cc = [(1-Tref/i) for i in T_cc]

# compute back the original carnot factors given a deltaT_min
#deltaT_min = 40
deltaT_min = 5
T_hc_ori = [(i+deltaT_min/2) for i in T_hc]
T_cc_ori = [(i-deltaT_min/2) for i in T_cc]
ca_hc_ori = [(1-298.15/i) for i in T_hc_ori]
ca_cc_ori = [(1-298.15/i) for i in T_cc_ori]

# prepare the second y-axis for plotting
# the minim carnot value is extracted from the original cooling. Round it to the lowest .0
# the maximum carnot carnot value is extracted from the original heating. Round it to the highest .0
ca_min = round(min(ca_cc_ori) - 0.05, 1)
ca_max = round(max(ca_hc_ori) + 0.05, 1)
# generate an array with the carnot list from min to max
ca_values = np.arange(ca_min, ca_max, 0.2)
# compute the corresponding temperature values in celcius
Tref_ce = 298.15
T_ce = [int(Tref_ce/(1-i) - 273.15) for i in ca_values]


T_cc = [(i-273.15) for i in T_cc]
T_cc_ori = [(i-273.15) for i in T_cc_ori]
T_hc = [(i-273.15) for i in T_hc]
T_hc_ori = [(i-273.15) for i in T_hc_ori]

Q_gcc = np.zeros(len(Q_cc))

for i in range(len(Q_cc)):
  Q_gcc[i] = Q_cc[i] - Q_hc[i]  

figure, ax = plt.subplots(figsize = (8,6))

#T_hc1 = [(i+273.15) for i in T_hc]
ax.plot(Q_gcc, T_hc, "-g")
plt.axhline(y=0, color='black', linestyle='--')
plt.axvline(x=0, color='black', linestyle='--')

ax.set_xlabel('$Heat \ Load \ (kW)$', labelpad=12)
ax.set_ylabel('$Temperature \ (°C)$')
ax.set_title('$Grand \ Composite \ Curve$')
ax.legend(["Grand Composite Curve"])

print(Q_gcc[0])
plt.show()

```





Here is the one with only the digester:
```{python, echo = T, eval = T}
import matplotlib.pyplot as plt
import json
import numpy as np


# read json for heat integration data
file_name = open('codes_02_heat_recovery/result/brewery-59NoRivella.json')
integ = json.loads(file_name.read())

# we used .keys() and json-reader to locate the data of interest (hot and cold composite curves)
hotcc = integ["results"]["graph"][0][0][1]["data"][0]["curve"]
coldcc = integ["results"]["graph"][0][0][1]["data"][1]["curve"]

# extract the temperature (T in Kelvin) and heat (Q in kW)
T_hc = [i["T"] for i in hotcc]
Q_hc = [i["Q"] for i in hotcc]
T_cc = [i["T"] for i in coldcc]
Q_cc = [i["Q"] for i in coldcc]

# compute the shifted carnot factor (1 - T0/T) and Treference = 298.15K
Tref = 298.15 
ca_hc = [(1-Tref/i) for i in T_hc]
ca_cc = [(1-Tref/i) for i in T_cc]

# compute back the original carnot factors given a deltaT_min
#deltaT_min = 40
deltaT_min = 5
T_hc_ori = [(i+deltaT_min/2) for i in T_hc]
T_cc_ori = [(i-deltaT_min/2) for i in T_cc]
ca_hc_ori = [(1-298.15/i) for i in T_hc_ori]
ca_cc_ori = [(1-298.15/i) for i in T_cc_ori]

# prepare the second y-axis for plotting
# the minim carnot value is extracted from the original cooling. Round it to the lowest .0
# the maximum carnot carnot value is extracted from the original heating. Round it to the highest .0
ca_min = round(min(ca_cc_ori) - 0.05, 1)
ca_max = round(max(ca_hc_ori) + 0.05, 1)
# generate an array with the carnot list from min to max
ca_values = np.arange(ca_min, ca_max, 0.2)
# compute the corresponding temperature values in celcius
Tref_ce = 298.15
T_ce = [int(Tref_ce/(1-i) - 273.15) for i in ca_values]


T_cc = [(i-273.15) for i in T_cc]
T_cc_ori = [(i-273.15) for i in T_cc_ori]
T_hc = [(i-273.15) for i in T_hc]
T_hc_ori = [(i-273.15) for i in T_hc_ori]

Q_gcc = np.zeros(len(Q_cc))

for i in range(len(Q_cc)):
  Q_gcc[i] = Q_cc[i] - Q_hc[i]  

figure, ax = plt.subplots(figsize = (8,6))

#T_hc1 = [(i+273.15) for i in T_hc]
ax.plot(Q_gcc, T_hc, "-g")
plt.axhline(y=0, color='black', linestyle='--')
plt.axvline(x=0, color='black', linestyle='--')

ax.set_xlabel('$Heat \ Load \ (kW)$', labelpad=12)
ax.set_ylabel('$Temperature \ (°C)$')
ax.set_title('$Grand \ Composite \ Curve$')
ax.legend(["Grand Composite Curve"])

print(Q_gcc[0])
plt.show()

```

%1. Generating the Grand composite curve (GCC) of the process system and analysing the temperature levels and the amount for the heat deficits and surplus in the system. 

# Energy conversion integration

Once the heat recovery is implemented, the energy balance of the process system is closed by converting energy resources like natural and electricity into useful heat, cold or refrigeration heat loads for the process.


## Energy Conversion Technologies

In this section are listed the energy conversion technologies that can be implemented within the facility under study.

## System Key Performance Indicators (KPI)

To characterize the relevance of the system, Key Performance Indicators (KPI) are defined before being computed in the case of this study. The six following KPIs are used:
 
### KPIs definitions

```{r KPIs, echo = T, eval = F}

|KPI Name             |KPI Acronym|Unit(s)| Description |
|:----|:----------|:--------|:--------- |
|Operating Expenditure|OPEX       |[CHF/year]|Represents the cost of the resources and the waste flows to supply the energy requirements of the process on a yearly basis|
|Capital Expenditure  |CAPEX      |[CHF]|Indicates the investment associated with energy conversion units|
|Total Expenditure    |TOTEX      |[CHF/year]| Sums up the total cost of the energy supply considering the annualized investment and operating cost|
|Exergy Losses        |-          |[kW] or in [kJ/$kg_{product}$]| Exergy Losses. Takes the second unit when converting the resources to useful heat, electricity, cooling, and refrigeration needs: this KPI evaluates the energy losses within the energy conversion technology implemented|
|Emissions            |-          |[$kg_{CO_{2}eq}$/year] |Advises the emissions due to the energy conversion technology |      
|Life Cycle Environmental impact|-|[$kg_{CO_{2}eq}$/year]|Advises the emissions due to the life cycle of the energy conversion technology |      
```


### KPIs formulas


## Computations

4. The energy conversion system integration is calculated by calculating the relative flows (level of usage) in the energy conversion system. The flows are calculated based on a given set of energy conversion unit and with one of the KPI as an objective. This calculation aims at discovering synergies or complementarities between energy covnersion technologies to suppply the process energy needs.
5. In particular, the integration of the soda production will be investigated, by making a sensitivity analysis of the capacity on the soda production process.
6. The systematic generation of alternative system configuration options will allow to compare the different options and select the final recommendation.
