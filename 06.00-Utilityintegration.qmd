# Energy conversion integration

Once the heat recovery is implemented, the energy balance of the process system is closed by converting energy resources like natural and electricity into useful heat, cold or refrigeration heat loads for the process.

## Grand Composite Curve

```{python, echo = F, eval = T}
import json
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np

# Function to create the Grand Composite Curve plot
def create_gcc_plot(Q_gcc, T_hc, title):
    fig = go.Figure()

    # Add the Grand Composite Curve without legend
    fig.add_trace(go.Scatter(x=Q_gcc, y=T_hc, mode='lines', name=None))

    # Add horizontal and vertical reference lines
    fig.add_shape(go.layout.Shape(type='line', x0=0, x1=0, y0=min(T_hc), y1=max(T_hc), line=dict(dash='dash')))
    fig.add_shape(go.layout.Shape(type='line', x0=min(Q_gcc), x1=max(Q_gcc), y0=0, y1=0, line=dict(dash='dash')))

    # Set axis labels and title
    fig.update_layout(
        xaxis_title='Heat Load (kW)',
        yaxis_title='Temperature (°C)',
        title=dict(text=title, x=0.5),  # Center the title
        paper_bgcolor='white',  # Set the background color
    )

    return fig

# Read JSON for heat integration data for each case
file_names = [
    'codes_02_heat_recovery/result/brewery-57.json',
    'codes_02_heat_recovery/result/brewery-59NoRivellaNoDigester.json',
    'codes_02_heat_recovery/result/brewery-59_no_digester.json',
    'codes_02_heat_recovery/result/brewery-59NoRivella.json'
]

titles = [
    'With Rivella and Digester',
    'Without Rivella and Digester',
    'Only with Rivella',
    'Only with Digester'
]

# Create subplots with a 2x2 grid
fig = make_subplots(rows=2, cols=2, subplot_titles=titles)

# Loop through each case and add the corresponding subplot
for i, file_name in enumerate(file_names, start=1):
    integ = json.loads(open(file_name).read())
    hotcc = integ["results"]["graph"][0][0][1]["data"][0]["curve"]
    coldcc = integ["results"]["graph"][0][0][1]["data"][1]["curve"]
    T_hc = [(i["T"] - 273.15) for i in hotcc]
    Q_hc = [i["Q"] for i in hotcc]
    T_cc = [(i["T"] - 273.15) for i in coldcc]
    Q_cc = [i["Q"] for i in coldcc]

    deltaT_min = 5
    T_hc_ori = [(i + deltaT_min/2) for i in T_hc]
    Q_gcc = np.zeros(len(Q_cc))

    for j in range(len(Q_cc)):
        Q_gcc[j] = Q_cc[j] - Q_hc[j]

    row = (i - 1) // 2 + 1
    col = (i - 1) % 2 + 1

    fig.add_trace(go.Scatter(x=Q_gcc, y=T_hc, mode='lines', name=None), row=row, col=col)

    # Add horizontal and vertical reference lines to each subplot
    fig.add_shape(go.layout.Shape(type='line', x0=0, x1=0, y0=min(T_hc), y1=max(T_hc), line=dict(dash='dash')), row=row, col=col)
    fig.add_shape(go.layout.Shape(type='line', x0=min(Q_gcc), x1=max(Q_gcc), y0=0, y1=0, line=dict(dash='dash')), row=row, col=col)

    # Set axis labels and title for the subplot
    fig.update_xaxes(title_text='Heat Load (kW)', row=row, col=col)
    fig.update_yaxes(title_text='Temperature (°C)', row=row, col=col)
    fig.update_layout(title=dict(text='Grand Composite Curve', x=0.5), paper_bgcolor='white', showlegend = False)

# Show the plot
fig.show()
```


```{python, echo = F, eval = T}
import matplotlib.pyplot as plt
import json
import numpy as np
import pandas as pd
from IPython.display import display, HTML

plt.switch_backend('agg')

# read json for heat integration data
file_name = open('codes_02_heat_recovery/result/brewery-57.json')
integ = json.loads(file_name.read())

# we used .keys() and json-reader to locate the data of interest (hot and cold composite curves)
hotcc = integ["results"]["graph"][0][0][1]["data"][0]["curve"]
coldcc = integ["results"]["graph"][0][0][1]["data"][1]["curve"]

# extract the temperature (T in Kelvin) and heat (Q in kW)
T_hc = [i["T"] for i in hotcc]
Q_hc = [i["Q"] for i in hotcc]
T_cc = [i["T"] for i in coldcc]
Q_cc = [i["Q"] for i in coldcc]

# compute the shifted carnot factor (1 - T0/T) and Treference = 298.15K
Tref = 298.15 
ca_hc = [(1-Tref/i) for i in T_hc]
ca_cc = [(1-Tref/i) for i in T_cc]

# compute back the original carnot factors given a deltaT_min
#deltaT_min = 40
deltaT_min = 5
T_hc_ori = [(i+deltaT_min/2) for i in T_hc]
T_cc_ori = [(i-deltaT_min/2) for i in T_cc]
ca_hc_ori = [(1-298.15/i) for i in T_hc_ori]
ca_cc_ori = [(1-298.15/i) for i in T_cc_ori]

# prepare the second y-axis for plotting
# the minim carnot value is extracted from the original cooling. Round it to the lowest .0
# the maximum carnot carnot value is extracted from the original heating. Round it to the highest .0
ca_min = round(min(ca_cc_ori) - 0.05, 1)
ca_max = round(max(ca_hc_ori) + 0.05, 1)
# generate an array with the carnot list from min to max
ca_values = np.arange(ca_min, ca_max, 0.2)
# compute the corresponding temperature values in celcius
Tref_ce = 298.15
T_ce = [int(Tref_ce/(1-i) - 273.15) for i in ca_values]


T_cc = [(i-273.15) for i in T_cc]
T_cc_ori = [(i-273.15) for i in T_cc_ori]
T_hc = [(i-273.15) for i in T_hc]
T_hc_ori = [(i-273.15) for i in T_hc_ori]


Q_gcc = np.zeros(len(Q_cc))

for i in range(len(Q_cc)):
  Q_gcc[i] = Q_cc[i] - Q_hc[i]  

Heat_inter = []
intersections = []
for i in range(len(Q_gcc)):
  if (Q_gcc[i]<=10):
    if (T_hc[i]>=-30 and T_hc[i]<=200):
      intersections.append(T_hc[i])
      Heat_inter.append(Q_gcc[i])


upper_bound1 = 0
lower_bound1 = 30000
for i in range(len(Q_hc)):
  if (ca_hc_ori[i] < (np.max(ca_hc_ori)) and Q_hc[i] > upper_bound1):
    upper_bound1 = Q_hc[i]
  if (ca_cc_ori[i] > np.min(ca_cc_ori) and Q_cc[i] < lower_bound1):
    lower_bound1 = Q_cc[i]




cold_utilities1 = lower_bound1
total_w = 0

for i in range(len(Q_cc)):
  if ((ca_cc_ori[i] > 0.2) and (Q_cc[i] > total_w)):
    total_w = Q_cc[i]

hot_utilities1 = total_w - upper_bound1

###################################

# read json for heat integration data
file_name = open('codes_02_heat_recovery/result/brewery-59NoRivellaNoDigester.json')
integ = json.loads(file_name.read())

# we used .keys() and json-reader to locate the data of interest (hot and cold composite curves)
hotcc = integ["results"]["graph"][0][0][1]["data"][0]["curve"]
coldcc = integ["results"]["graph"][0][0][1]["data"][1]["curve"]

# extract the temperature (T in Kelvin) and heat (Q in kW)
T_hc = [i["T"] for i in hotcc]
Q_hc = [i["Q"] for i in hotcc]
T_cc = [i["T"] for i in coldcc]
Q_cc = [i["Q"] for i in coldcc]

# compute the shifted carnot factor (1 - T0/T) and Treference = 298.15K
Tref = 298.15 
ca_hc = [(1-Tref/i) for i in T_hc]
ca_cc = [(1-Tref/i) for i in T_cc]

# compute back the original carnot factors given a deltaT_min
#deltaT_min = 40
deltaT_min = 5
T_hc_ori = [(i+deltaT_min/2) for i in T_hc]
T_cc_ori = [(i-deltaT_min/2) for i in T_cc]
ca_hc_ori = [(1-298.15/i) for i in T_hc_ori]
ca_cc_ori = [(1-298.15/i) for i in T_cc_ori]

# prepare the second y-axis for plotting
# the minim carnot value is extracted from the original cooling. Round it to the lowest .0
# the maximum carnot carnot value is extracted from the original heating. Round it to the highest .0
ca_min = round(min(ca_cc_ori) - 0.05, 1)
ca_max = round(max(ca_hc_ori) + 0.05, 1)
# generate an array with the carnot list from min to max
ca_values = np.arange(ca_min, ca_max, 0.2)
# compute the corresponding temperature values in celcius
Tref_ce = 298.15
T_ce = [int(Tref_ce/(1-i) - 273.15) for i in ca_values]


T_cc = [(i-273.15) for i in T_cc]
T_cc_ori = [(i-273.15) for i in T_cc_ori]
T_hc = [(i-273.15) for i in T_hc]
T_hc_ori = [(i-273.15) for i in T_hc_ori]


Q_gcc = np.zeros(len(Q_cc))

for i in range(len(Q_cc)):
  Q_gcc[i] = Q_cc[i] - Q_hc[i]  

Heat_inter = []
intersections = []
for i in range(len(Q_gcc)):
  if (Q_gcc[i]<=10):
    if (T_hc[i]>=-30 and T_hc[i]<=200):
      intersections.append(T_hc[i])
      Heat_inter.append(Q_gcc[i])


upper_bound2 = 0
lower_bound2 = 30000
for i in range(len(Q_hc)):
  if (ca_hc_ori[i] < (np.max(ca_hc_ori)) and Q_hc[i] > upper_bound2):
    upper_bound2 = Q_hc[i]
  if (ca_cc_ori[i] > np.min(ca_cc_ori) and Q_cc[i] < lower_bound2):
    lower_bound2 = Q_cc[i]




cold_utilities2 = lower_bound2
total_w = 0

for i in range(len(Q_cc)):
  if ((ca_cc_ori[i] > 0.1) and (Q_cc[i] > total_w)):
    total_w = Q_cc[i]

hot_utilities2 = total_w - upper_bound2


###########################################

# read json for heat integration data
file_name = open('codes_02_heat_recovery/result/brewery-59_no_digester.json')
integ = json.loads(file_name.read())

# we used .keys() and json-reader to locate the data of interest (hot and cold composite curves)
hotcc = integ["results"]["graph"][0][0][1]["data"][0]["curve"]
coldcc = integ["results"]["graph"][0][0][1]["data"][1]["curve"]

# extract the temperature (T in Kelvin) and heat (Q in kW)
T_hc = [i["T"] for i in hotcc]
Q_hc = [i["Q"] for i in hotcc]
T_cc = [i["T"] for i in coldcc]
Q_cc = [i["Q"] for i in coldcc]

# compute the shifted carnot factor (1 - T0/T) and Treference = 298.15K
Tref = 298.15 
ca_hc = [(1-Tref/i) for i in T_hc]
ca_cc = [(1-Tref/i) for i in T_cc]

# compute back the original carnot factors given a deltaT_min
#deltaT_min = 40
deltaT_min = 5
T_hc_ori = [(i+deltaT_min/2) for i in T_hc]
T_cc_ori = [(i-deltaT_min/2) for i in T_cc]
ca_hc_ori = [(1-298.15/i) for i in T_hc_ori]
ca_cc_ori = [(1-298.15/i) for i in T_cc_ori]

# prepare the second y-axis for plotting
# the minim carnot value is extracted from the original cooling. Round it to the lowest .0
# the maximum carnot carnot value is extracted from the original heating. Round it to the highest .0
ca_min = round(min(ca_cc_ori) - 0.05, 1)
ca_max = round(max(ca_hc_ori) + 0.05, 1)
# generate an array with the carnot list from min to max
ca_values = np.arange(ca_min, ca_max, 0.2)
# compute the corresponding temperature values in celcius
Tref_ce = 298.15
T_ce = [int(Tref_ce/(1-i) - 273.15) for i in ca_values]


T_cc = [(i-273.15) for i in T_cc]
T_cc_ori = [(i-273.15) for i in T_cc_ori]
T_hc = [(i-273.15) for i in T_hc]
T_hc_ori = [(i-273.15) for i in T_hc_ori]


Q_gcc = np.zeros(len(Q_cc))

for i in range(len(Q_cc)):
  Q_gcc[i] = Q_cc[i] - Q_hc[i]  

Heat_inter = []
intersections = []
for i in range(len(Q_gcc)):
  if (Q_gcc[i]<=10):
    if (T_hc[i]>=-30 and T_hc[i]<=200):
      intersections.append(T_hc[i])
      Heat_inter.append(Q_gcc[i])


upper_bound3 = 0
lower_bound3 = 30000
for i in range(len(Q_hc)):
  if (ca_hc_ori[i] < (np.max(ca_hc_ori)) and Q_hc[i] > upper_bound3):
    upper_bound3 = Q_hc[i]
  if (ca_cc_ori[i] > np.min(ca_cc_ori) and Q_cc[i] < lower_bound3):
    lower_bound3 = Q_cc[i]




cold_utilities3 = lower_bound3
total_w = 0

for i in range(len(Q_cc)):
  if ((ca_cc_ori[i] > 0.2) and (Q_cc[i] > total_w)):
    total_w = Q_cc[i]

hot_utilities3 = total_w - upper_bound3


##################################################

# read json for heat integration data
file_name = open('codes_02_heat_recovery/result/brewery-59NoRivella.json')
integ = json.loads(file_name.read())

# we used .keys() and json-reader to locate the data of interest (hot and cold composite curves)
hotcc = integ["results"]["graph"][0][0][1]["data"][0]["curve"]
coldcc = integ["results"]["graph"][0][0][1]["data"][1]["curve"]

# extract the temperature (T in Kelvin) and heat (Q in kW)
T_hc = [i["T"] for i in hotcc]
Q_hc = [i["Q"] for i in hotcc]
T_cc = [i["T"] for i in coldcc]
Q_cc = [i["Q"] for i in coldcc]

# compute the shifted carnot factor (1 - T0/T) and Treference = 298.15K
Tref = 298.15 
ca_hc = [(1-Tref/i) for i in T_hc]
ca_cc = [(1-Tref/i) for i in T_cc]

# compute back the original carnot factors given a deltaT_min
#deltaT_min = 40
deltaT_min = 5
T_hc_ori = [(i+deltaT_min/2) for i in T_hc]
T_cc_ori = [(i-deltaT_min/2) for i in T_cc]
ca_hc_ori = [(1-298.15/i) for i in T_hc_ori]
ca_cc_ori = [(1-298.15/i) for i in T_cc_ori]

# prepare the second y-axis for plotting
# the minim carnot value is extracted from the original cooling. Round it to the lowest .0
# the maximum carnot carnot value is extracted from the original heating. Round it to the highest .0
ca_min = round(min(ca_cc_ori) - 0.05, 1)
ca_max = round(max(ca_hc_ori) + 0.05, 1)
# generate an array with the carnot list from min to max
ca_values = np.arange(ca_min, ca_max, 0.2)
# compute the corresponding temperature values in celcius
Tref_ce = 298.15
T_ce = [int(Tref_ce/(1-i) - 273.15) for i in ca_values]


T_cc = [(i-273.15) for i in T_cc]
T_cc_ori = [(i-273.15) for i in T_cc_ori]
T_hc = [(i-273.15) for i in T_hc]
T_hc_ori = [(i-273.15) for i in T_hc_ori]


Q_gcc = np.zeros(len(Q_cc))

for i in range(len(Q_cc)):
  Q_gcc[i] = Q_cc[i] - Q_hc[i]  

Heat_inter = []
intersections = []
for i in range(len(Q_gcc)):
  if (Q_gcc[i]<=10):
    if (T_hc[i]>=-30 and T_hc[i]<=200):
      intersections.append(T_hc[i])
      Heat_inter.append(Q_gcc[i])


upper_bound = 0
lower_bound = 30000
for i in range(len(Q_hc)):
  if (ca_hc_ori[i] < (np.max(ca_hc_ori)) and Q_hc[i] > upper_bound):
    upper_bound = Q_hc[i]
  if (ca_cc_ori[i] > np.min(ca_cc_ori) and Q_cc[i] < lower_bound):
    lower_bound = Q_cc[i]




cold_utilities = lower_bound
total_w = 0

for i in range(len(Q_cc)):
  if ((ca_cc_ori[i] > 0.2) and (Q_cc[i] > total_w)):
    total_w = Q_cc[i]

hot_utilities = total_w - upper_bound


data_heat_recovery = {'Information': ['Cold Utilities', 'Hot Utilities', 'Minimum Energy Requirements', 'Maximum Heat Recovery Potential'],
        'Only with Digester (kW)': [cold_utilities, hot_utilities, cold_utilities+hot_utilities, np.round(upper_bound - lower_bound, 2)],
        'Only with Rivella (kW)': [cold_utilities3, hot_utilities3, cold_utilities3+hot_utilities3, np.round(upper_bound3 - lower_bound3, 2)],
        'With Rivella and Digester (kW)': [cold_utilities1, hot_utilities1, cold_utilities1+hot_utilities1, np.round(upper_bound1 - lower_bound1, 2)],
        'Without Rivella and Digester (kW)': [cold_utilities2, hot_utilities2, cold_utilities2+hot_utilities2, np.round(upper_bound2 - lower_bound2, 2)],}

dfs = pd.DataFrame(data_heat_recovery)
dfs = dfs.set_index('Information')
dfs = dfs.round(2)
HTML(dfs.to_html())

```


It can be noticed that the Grand Composite Curves of these four different cases are quite similar. All of them show the triple plateau caused by the utilization of evaporators in the Evaporators section, and the minimum heat requirements as well as the maximum heat recovery are also quite similar, being of around 16000 kW and 26000 kW respectively in each case. The main difference that can be noticed is the temperature required by each system. The base system, without either the Rivella production or the Digester requires some relatively small temperatures, reaching a maximum of only ca. 90°C. This changes when the Rivella production is added, which requires slightly higher temperatures with a peak of ca. 100°C at the evaporator needed to produce the Rivella itself. The largest difference however is caused by the addition of the Digester. The Digester section introduces a steam dryer powered by superheated steam, thus reaching and requiring high temperatures of 150°C.
This said, since the subsystems required by the Rivella production and the Digester consume relatively little heat compared to the Evaporation section which is present in each scenario, the addition of these subsystems does not cause a large difference in the maximum heat recovery of the system nor in its minimum heat requirement.



## Energy Conversion Technologies

To provide the cold and hot flows required by the facility, Energy Conversion Technologies were chosen to meet this need. The relevant ones are presented in this section.

### Cooling Tower

*Cooling technology* 

A cooling tower is a device using a thermic contact surface between air and water to trigger water's evaporation, thus cooling down the remaining water. This process requires an electricity supply.

### Boiler

*Heating technology*

A boiler is a simple utility using natural gas (fuel) and air (combustive agent) to provoke combustion, thus providing a heat flow. Both fluids and solids can be heated up this way. The hot air can be recovered to provide a second hot flow. 


### Cogeneration Engine

*Heating technology*

In the general case, cogeneration refers to a system converting a resource into two products. In this case, the device works as a boiler, but this time it produces both heat and electricity. This electricity is obtained thanks to turbines. Using this system reduces the amount of electricity extracted from the grid, and consequently reduces the operation expenditures of the complete facility.


### Heat Pump

*Heating technology*

In this case is considered a mechanical vapor compression heat pump. This utility provides heat from a vapor compression cycle supplied by electricity and using refrigerant as working fluid. In the most particular case of a Mechanical Vapor Compression (MVR), no refrigerant is used, but the process flow which is to be heated. 

### Refrigeration

*Cooling technology*

The Refrigeration relies on the same system as the Heat Pump but uses the cold source rather than the heat sink. 

### Applications

- Cooling devices: The cooling tower is used over ambient temperature (25°C) and the Refrigeration system below.


## Key Performance Indicators (KPIs)

To characterize the relevance of the system, Key Performance Indicators (KPI) are defined before being computed in the case of this study. The six following KPIs are used:

### Definitions

|KPI Name|Acronym|Unit(s)| Description |
|:--|:--|:---|:----------------|
|Operating Expenditure|OPEX|[€/year]|Represents the cost of the resources and the waste flows to supply the energy requirements of the process on a yearly basis|
|Capital Expenditure|CAPEX|[€]|Indicates the investment associated with energy conversion units|
|Environmental expenditures| ENVEX |[€/year]| Refers to the costs due to $CO_2$ taxes|
|Total Expenditure|TOTEX|[€/year]| Sums up the total cost of the energy supply considering the annualized investment and operating cost|
|Exergy Losses|-|[kW] or in [kJ/$kg_{product}$]| Evaluate the energy losses within the energy conversion technology implemented. Measured using [kJ/$kg_{product}$] when converting the resources to useful heat, electricity, cooling, and refrigeration needs|
|Emissions|-|[$kg_{CO_{2}eq}$/year] |Advises the emissions due to the energy conversion technology operation|      
|Life Cycle Environmental impact|-|[$kg_{CO_{2}eq}$/year]|Advises the emissions due to the life cycle of the energy conversion technology |      


### Formulas

- OPEX: as maintenance and manpower costs are neglected, only resource costs are considered. In our case, only electricity and natural gas (NG) are used. Considering the yearly operation time $t_{op}$, $C$ the cost of a resource and $\dot Q$ its energy flow, OPEX is given by:

\begin{align}
OPEX = [C_{electricity}\dot Q_{electricity} + C_{NG}\dot Q_{NG}]*t_{op}
\end{align}

- CAPEX: CAPEX normally designates the cost of a technology during its lifetime. To annualize it, the following formula is used:

\begin{align}
C_{inv} = \frac{i(1+i)^n}{(1+i)^n-1}c_{inv}
\end{align}

In this formula, $c_{inv}$ designates whether the fixed investment cost or the variable investment cost. The two other parameters n and I, respectively refer to the lifetime and the interest rate, stated as equal to 8% in this study.

The investment cost must also be scaled with the CEPCI. According the requirements of the study, the CEPCI which should be chosen is the 2019 one, which is equal to 603.1. 

Finally:

\begin{align}
CAPEX = C_{inv1}+ C_{inv2} \dot Q_{unit}
\end{align}

In this formula, $C_{inv~1/2}$ are annualized and scaled using the correct CEPCI. The $\dot Q_{unit}$ refers to the power purchased for the unit.

- ENVEX: the ENVEX is equal to the total taxes paid every year due to carbon dioxyde emissions. 

\begin{align}
ENVEX = [e_{electricity}\dot Q_{electricity} + e_{NG}\dot Q_{NG}]*t_{op}*CO2_{tax}
\end{align}

In this formula, e indicates the environmental emissions of the resource. 

- TOTEX: is equal to the sum of the 3 previous KPIs

\begin{align}
TOTEX = CAPEX+OPEX+ENVEX
\end{align}

- Exergy Losses: determined using graphical solving. 


### Parameters

In this subsections are listed the parameters used to evaluate the KPIs. The fixed investment costs $c_{inv1}$ data were extracted from @cinv. The variable costs $c_{inv2}$ were provided for this study in the materials. The impact of electricity is assumed to be 0, and the one from Natural Gas is extracted from [?]. As the idea is to optimize the system without boundary, no limitation is applied on the conversion technologies: their proportional use can be included in the entire interval [O%,100%].


| Variable            | $cost_1$ | $cost_2$    | $cinv_1$       | $cinv_2$    | $imp_1$      | $imp_2$         | $f_{min}$ | $f_{max}$ |
|---------------------|-------|----------|-------------|----------|-----------|--------------|------|------|
| Unit                | [€/y] | [€/kW/y] | [€/y]       | [€/kW/y] | [kgCO2/y] | [kgCO2/kW/y] | %    | %    |
| Cooling Tower       | 0     | 10       | 0           | -        | 0         | 0            | 0    | 100  |
| Boiler              | 0     | 665,76   | 331,3013165 | -        | 0         | 230          | 0    | 100  |
| Cogeneration engine | 0     | 665,76   | 1355,022385 | -        | 0         | 230          | 0    | 100  |
| Heat Pump           | 0     | 499,32   | 495,2082836 | -        | 0         | 0            | 0    | 100  |
| Refrigeration       | 0     | 499,32   | 495,2082836 | -        | 0         | 0            | 0    | 100  |


## Adding Utilities to the Grand Composite Curve

### Dummy case

| Integrated Composite Curve              |        Carnot           |
| ---------------------------- | ----------------------------- |
| ![ICC Plot](Figures/icc_dummy.jpg) | ![Carnot Plot](Figures/carnot_dummy-1.jpg) |


In this initial case, utility units are added to the Grand Composite Curve, with the default parameters, and cost and emission factors from the previous section. Here, only boiler, cooling tower and refrigeration units are considered. As highlighted in the Carnot plot, there is a lot of exergy losses, especially in the hot flow requirement (boiler). The target of this task is to reduce these losses by adding more efficient and more adapted units. 

### Optimization of case without Rivella and Digester

| Integrated Composite Curve              |        Carnot           |
| ---------------------------- | ----------------------------- |
| ![ICC Plot](Figures/icc_base.jpg) | ![Carnot Plot](Figures/carnot_base-1.jpg) |

First the case without Rivella and Digester is optimized. The target is to reduce the area between the utility and the Grand Composite Curve, which represents the exergy losses. Indeed, reducing the area means that the heat generation fits better the heat requirement. To do so, the following steps are applied:

- The first step is to reduce the major exergy losses, which are in the hot flow requirement. To do so, a cogeneration engine is added in the optimization. The operating temperature of cogeneration engine is 450°C, while boiler is 1050°C. Then, it is more adapted to use a cogeneration engine according to the hot flow requirements, which are at maximum about 150°C for the digester, 100°C for the rivella and 80°C for the process without digester and rivella.
- Secondly, a heat pump is added to the Grand Composite Curve, around the pinch point, to enlace the three evaporator stages.
- Finally, the refrigeration unit and the cooling tower are used, at different and adapted temperature levels, to minimize the exergy losses for the cold flow requirement.

The Carnot plot shows that the exergy losses are reduced, for hot and cold flows, and the boiler is not used anymore.

The various economic costs (OPEX, CAPEX, and TOTEX) along with the size of each technology resulting from this optimization of the case without Tivella and Digester are presented in the following Table. The costs associated with the boiler are zero, and likewise, the CAPEX for the Cooling Tower is also zero.

| **Technology**      | **Mult** | **Size(kW)** | **OPEX(€/y)** | **CAPEX(€/y)** | **TOTEX(€/y)** |
|---------------------|----------|--------------|---------------|----------------|----------------|
| Cooling Tower       | 5,84     | 5840         | 568935        | 0              | 568935         |
| Boiler              | 0        | 0            | 0             | 0              | 0              |
| Cogeneration engine | 1,89     | 11340        | 10495158      | 377044         | 10872202       |
| Heat Pump           | 0,984    | 5904         | 4086940       | 122410         | 4209350        |
| Refrigeration       | 1,2      | 6000         | 5051466       | 153459         | 5204925        |

### Optimization of case with Rivella

| Integrated Composite Curve              |        Carnot           |
| ---------------------------- | ----------------------------- |
| ![ICC Plot](Figures/icc_rivella.jpg) | ![Carnot Plot](Figures/carnot_rivella.jpg) |

For the case with Rivella, with Digester, and with Rivella and Digester, the results are very similar. Only the maximum heat requirement is higher, as mention before, and still way lower than the operating temperature of the cogeneration engine. The Carnot plot shows that the exergy losses are reduced, compared to the first scenario, but is similar to the case without Rivella and Digester. 

The various economic costs (OPEX, CAPEX, and TOTEX) along with the size of each technology resulting from this optimization of the case with Rivella are presented in the following Table.  Compared to the case without Rivella and Digester the size of the used cogeneration engine technollogy got increased.

| **Technology**      | **Mult** | **Size(kW)** | **OPEX(€/y)** | **CAPEX(€/y)** | **TOTEX(€/y)** |
|---------------------|----------|--------------|:-------------:|----------------|----------------|
| Cooling Tower       |     5,73 |         5730 |        559790 |              0 |         559790 |
| Boiler              |        0 |            0 |             0 |              0 |              0 |
| Cogeneration engine |     2,28 |        13680 |      12632006 |         453536 |       13085542 |
| Heat Pump           |     0,97 |         5820 |       4030910 |         120739 |        4151649 |
| Refrigeration       |      1,2 |         6000 |       5051466 |         153459 |        5204925 |

### Optimization of case with Digester

| Integrated Composite Curve              |        Carnot           |
| ---------------------------- | ----------------------------- |
| ![ICC Plot](Figures/icc_digester.jpg) | ![Carnot Plot](Figures/carnot_digester.jpg) |

The various economic costs (OPEX, CAPEX, and TOTEX) along with the size of each technology resulting from this optimization of the case with Digester are presented in the following Table. The contributions of each technology are similar to the case without Rivella and Digester. 

| **Technology**      | **Mult** | **Size(kW)** | **OPEX(€/y)** | **CAPEX(€/y)** | **TOTEX(€/y)** |
|---------------------|----------|--------------|---------------|----------------|----------------|
| Cooling Tower       |     5,83 |         5830 |        568709 |              0 |         568709 |
| Boiler              |        0 |            0 |             0 |              0 |              0 |
| Cogeneration engine |     1,89 |        11340 |      10473693 |         376276 |       10849969 |
| Heat Pump           |    0,981 |         5886 |       4076196 |         122090 |        4198286 |
| Refrigeration       |      1,2 |         6000 |       5051466 |         153459 |        5204925 |

### Optimization of case with both Rivella and Digester

| Integrated Composite Curve              |        Carnot           |
| ---------------------------- | ----------------------------- |
| ![ICC Plot](Figures/icc_both.jpg) | ![Carnot Plot](Figures/carnot_both.jpg) |

The various economic costs (OPEX, CAPEX, and TOTEX) along with the size of each technology resulting from this optimization for the case with both Rivella and Digester are presented in the following Table. 

| **Technology**      | **Mult** | **Size(kW)** | **OPEX(€/y)** | **CAPEX(€/y)** | **TOTEX(€/y)** |
|---------------------|----------|--------------|---------------|----------------|----------------|
| Cooling Tower       |     5,72 |         5720 |        559564 |              0 |         559564 |
| Boiler              |        0 |            0 |             0 |              0 |              0 |
| Cogeneration engine |     2,28 |        13680 |      12610541 |         452767 |       13063308 |
| Heat Pump           |    0,967 |         5802 |       4020167 |         120418 |        4140585 |
| Refrigeration       |      1,2 |         6000 |       5051466 |         153459 |        5204925 |

### Reducing the operating temperature of the cogeneration engine

| Integrated Composite Curve              |        Carnot           |
| ---------------------------- | ----------------------------- |
| ![ICC Plot](Figures/icc_150.jpg) | ![Carnot Plot](Figures/carnot_150-1.jpg) |

Even after the optimization, the exergy losses due to the hot flow requirement remain predominant. One of the reasons is the operating temperature of the cogeneration engine, which is 450°C, far away from the maximum heat requirement of the process, which is 150°C. The operating temperature depends physically on the engine and cannot be easily reduced. Let see in this section, by simulation, if there is a benefit to reduce the operating temperature of the cogeneration engine. 

As the maximum heat requirement is 150°C for the whole process, the operating temperature of the cogeneration engine is simulatively reduced to 150°C instead of 450°C. The Carnot plot shows that the exergy losses are reduced for the hot flow. Indeed, the carnot factor is going less than 0.3 (0.6 with 450°C) which drastically reduces the area between the utility and the Grand Composite Curve. Then, using a technology similar to the cogeneration engine, but with a lower operating temperature, is more adapted to the process and is an idea of improvement.  

## System Integration Comparison

Since costs are the driving factors for comparing different options, the following table summarizes the total OPEX, CAPEX and ENVEX costs for the base case (without Rivella & Digester), the case only with Rivella, the case only with the Digester, and the case with both Rivella and Digester. For a graphical representation, the costs for each case are plotted in the Figure below.


| **Economic Costs**                | **OPEX Total(M€/y)** | **CAPEX Total(M€/y)**  | **ENVEX Total(M€/y)** |
|-----------------------------------|---------------------|----------------------|----------------------|
| Base (without Rivella & Digestor) | 28.232729           | 0.652913             | 2.039632             |
| Rivella                           | 31.60451            | 0.727733             | 2.454908             |
| Digester                          | 28.185742           | 0.651824             | 2.035461             |
| Rivella+Digester                  | 31.557523           | 0.726644             | 2.450736             |

```{python, echo = T, eval = T}

import matplotlib.pyplot as plt
import json
import numpy as np
import pandas as pd
from IPython.display import display, HTML

# Data
cases = ['Base', 'Rivella', 'Digester', 'Rivella+Digester']
opex_values = [28.232729, 31.604510, 28.185742, 31.557523]
capex_values = [0.652913, 0.727733, 0.651824, 0.726644]
envex_values = [2.039632, 2.454908, 2.035461, 2.450736]

# Bar Width
bar_width = 0.5
index = np.arange(len(cases))

# Plotting
fig, ax = plt.subplots(figsize=(10, 6))

bar1 = ax.bar(index, opex_values, bar_width, label='OPEX', color='royalblue')
bar2 = ax.bar(index, capex_values, bar_width, label='CAPEX', color='lightcoral', bottom=opex_values)
bar3 = ax.bar(index, envex_values, bar_width, label='ENVEX', color='limegreen', bottom=np.array(opex_values) + np.array(capex_values))

# Customize the plot
ax.set_xlabel('Cases')
ax.set_ylabel('Cost (M€/y)')
ax.set_title('Total Economic Costs Comparison')
ax.set_xticks(index)
ax.set_xticklabels(cases)
ax.legend()

# Save the plot as PNG
plt.savefig('Figures/EconomicCosts.png')

```

![Economic Costs comparison for all four cases](Figures/EconomicCosts.png)

The Figure shows that the primary driving costs in all cases are the operating costs, with environmental and investment costs significantly lower in comparison. Futhermore, one can observe that, compared to the base case, the scenario with Rivella incurs significantly higher costs, mainly due to increased operating expenses. The digester case, on the other hand, exhibits similar costs compared to the base case. The reason for these higher operating costs stems from the larger size of the employed cogeneration engine technology. The Figure below shows the size contribution from each technology in the four cases. The boiler contribution is zero for all cases.

```{python, echo = T, eval = T, fig.cap='Fig. 5: Bar Chart}

import matplotlib.pyplot as plt
import json
import numpy as np
import pandas as pd
from IPython.display import display, HTML

# Data
cases = ['Base', 'Rivella', 'Digester', 'Rivella+Digester']
Cooling_Tower = [5840,	5730,	5830,	5720]
Boiler = [0, 0, 0, 0]
Cogeneration_engine = [11340,	13680,	11340,	13680]
Heat_pump= [5904,	5820,	5886,	5802]
Refrigeration =[6000,	6000,	6000,	6000]

# Bar Width
bar_width = 0.5
index = np.arange(len(cases))

# Plotting
fig, ax = plt.subplots(figsize=(10, 6))

bar1 = ax.bar(index, Cooling_Tower, bar_width, label='Cooling Tower', color='royalblue')
bar2 = ax.bar(index, Boiler, bar_width, label='Boiler', color='lightcoral', bottom=Cooling_Tower)
bar3 = ax.bar(index, Cogeneration_engine, bar_width, label='Cogeneration engine', color='limegreen', bottom=np.array(Cooling_Tower) + np.array(Boiler))
bar4 = ax.bar(index, Heat_pump, bar_width, label='Heat pump', color='red', bottom=np.array(Cooling_Tower) + np.array(Boiler)+ np.array(Cogeneration_engine))
bar5 = ax.bar(index, Refrigeration, bar_width, label='Refrigeration', color='orange', bottom=np.array(Cooling_Tower) + np.array(Boiler)+ np.array(Cogeneration_engine)+ np.array(Heat_pump))

# Customize the plot
ax.set_xlabel('Cases')
ax.set_ylabel('Size (kW)')
ax.set_title('Size Distribution Comparison')
ax.set_xticks(index)
ax.set_xticklabels(cases)
ax.legend()

# Save the plot as PNG
plt.savefig('Figures/SizeComparison.png')

```


![Technology Size Contribution for all four cases](Figures/SizeComparison.png)


However, before reaching a conclusion about the optimal system, it is crucial to incorporate the selling costs for Rivella and the biogas for the digester. These selling costs are subtracted from the OPEX. The total costs (TOTEX, combining OPEX and CAPEX) for each of the different scenarios are illustrated in the Figure below.

```{python, echo = T, eval = T}

import matplotlib.pyplot as plt
import json
import numpy as np
import pandas as pd
from IPython.display import display, HTML

# Data
cases = ['Base', 'Rivella', 'Digester', 'Rivella+Digester']
totex_values = [28.232729+0.652913, 10.799510+0.727733, 27.819574+0.651824, 10.386355+0.726644]

# Bar Width
bar_width = 0.5
index = np.arange(len(cases))

# Plotting
fig, ax = plt.subplots(figsize=(10, 6))

bar1 = ax.bar(index, totex_values, bar_width, label='TOTEX', color='orange')

# Customize the plot
ax.set_xlabel('Cases')
ax.set_ylabel('Cost (M€/y)')
ax.set_title('TOTEX Comparison')
ax.set_xticks(index)
ax.set_xticklabels(cases)
ax.legend()

# Save the plot as PNG
plt.savefig('Figures/TOTEX.png')

```

![TOTEX comparison for all four cases](Figures/TOTEX.png)

From this Figure, it is now evident that incorporating Rivella production is very interesting from a total cost perspective. The costs of the digester are comparable to the base case and significantly higher than when Rivella is included. All in all, one must still keep in mind that these are just the utility costs. Other contribution costs such as installation cost might significantly change the overall result.


## (Guidelines)

You will proceed by the following steps :

1. Generating the Grand composite curve (GCC) of the process system and analysing the temperature levels and the amount for the heat deficits and surplus in the system. 
2. From the Grand composite curve analysis, a list of possible energy conversion technologies like boilers, steam or Rankine cycles, heat pumps, cooling water or refrigeration system will be established. The hot and cold streams as well as the resources consumption/production as well as the associated investment will be defined based on the estimated heat loads and temperatures from the process system GCC.
3. System **Key Performance Indicators (KPI)** will be defined to characterise :
     1. the operating expenditure (OPEX) in [CHF/year]: cost of the resources and the waste flows to supply the energy requirements of the process on a yearly basis.
     2. the capital expenditure (CAPEX) in [CHF]: the investment associated with energy conversion units
     3. the total expenditure (TOTEX) in [CHF/year]: total cost of the energy supply considering the annualised investment and operating cost
     3. the exergy losses in [kW] or in [kJ/$kg_{product}$] when converting hte resources to useful heat, electricity, cooling and refrigeration needs.
     4. the emissions  in [$kg_{CO_{2}}$/year] and the associated life cycle environmental impact in [$kg_{CO_{2}eq}$/year] of the energy supply.
4. The energy conversion system integration is calculated by calculating the relative flows (level of usage) in the energy conversion system. The flows are calculated based on a given set of energy conversion unit and with one of the KPI as an objective. This calculation aims at discovering synergies or complementarities between energy covnersion technologies to suppply the process energy needs.
5. In particular, the integration of the soda production will be investigated, by making a sensitivity analysis of the capacity on the soda production process.
6. The systematic generation of alternative system configuration options will allow to compare the different options and select the final recommendation.
4. The energy conversion system integration is calculated by calculating the relative flows (level of usage) in the energy conversion system. The flows are calculated based on a given set of energy conversion unit and with one of the KPI as an objective. This calculation aims at discovering synergies or complementarities between energy covnersion technologies to suppply the process energy needs.
5. In particular, the integration of the soda production will be investigated, by making a sensitivity analysis of the capacity on the soda production process.
6. The systematic generation of alternative system configuration options will allow to compare the different options and select the final recommendation.
